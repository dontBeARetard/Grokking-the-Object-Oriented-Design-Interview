{
    "course_api_url": "https://www.educative.io/api/collection/grokking-the-object-oriented-design-interview",
    "course_page_url": "https://educative.io/collection/page/5668639101419520/5692201761767424/",
    "course_page_prefix": "https://www.educative.io/api/collection/grokking-the-object-oriented-design-interview/page/",
    "title": "Grokking the Object Oriented Design Interview",
    "summary": "Object-oriented design has always been a critical part of the software engineering interview process. Most of the engineers struggle with the object-oriented design interviews (OODI), partly because of their lack of experience in laying down the design of a complex system, and partly because of the unstructured nature of OODI. Even engineers, who have some sort of experience in building such systems are not comfortable with these interviews. It is mainly because of the open-ended nature of the design problems that don't have a standard answer. This course is a complete guide to master the OODI. It is designed by the hiring managers of Google, Facebook, Microsoft, and Amazon. It not only has a set of carefully handpicked case studies, which have been repeatedly asked at the top tech companies but also provides a thorough experience to handle different object-oriented design scenarios. While code is not the emphasis of this course, some code examples in Java and Python are provided throughout.",
    "details": "<p>This course has two parts. In the first part, we will go through the core building blocks of Object-Oriented Design (OOD) and Unified Modeling Language (UML). Understanding these concepts would greatly help in establishing the solid base required to master OOD interviews. In the second part, we will apply these concepts to design a set of software systems \u2013 focusing on use-case diagrams, class diagrams,&nbsp;and activity diagrams. At the end of every design problem, we will get to see real Java code.</p><p>For feedback and suggestions, please contact us at ood@designgurus.org</p>",
    "categories": [
        {
            "title": "Object-Oriented Design and UML",
            "pages": [
                {
                    "components": [
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "Object-oriented programming (OOP) is a style of programming that focuses on using objects to design and build applications. Contrary to procedure-oriented programming where programs are designed as blocks of statements to manipulate data, OOP organizes the program to combine data and functionality and wrap it inside something called an \"Object\".\n\nIf you have never used an object-oriented programming language before, you will need to learn a few basic concepts before you can begin writing any code. This chapter will introduce some basic concepts of OOP:\n\n* **Objects:** Objects represent a real-world entity and the basic building block of OOP. For example, an Online Shopping System will have objects such as shopping cart, customer, product item, etc.\n\n* **Class:** Class is the prototype or blueprint of an object.  It is a template definition of the attributes and methods of an object. For example, in the Online Shopping System, the Customer object will have attributes like shipping address, credit card, etc., and methods for placing an order, canceling an order, etc.\n\n",
                                "mdHtml": "<p>Object-oriented programming (OOP) is a style of programming that focuses on using objects to design and build applications. Contrary to procedure-oriented programming where programs are designed as blocks of statements to manipulate data, OOP organizes the program to combine data and functionality and wrap it inside something called an \u201cObject\u201d.</p>\n<p>If you have never used an object-oriented programming language before, you will need to learn a few basic concepts before you can begin writing any code. This chapter will introduce some basic concepts of OOP:</p>\n<ul>\n<li>\n<p><strong>Objects:</strong> Objects represent a real-world entity and the basic building block of OOP. For example, an Online Shopping System will have objects such as shopping cart, customer, product item, etc.</p>\n</li>\n<li>\n<p><strong>Class:</strong> Class is the prototype or blueprint of an object.  It is a template definition of the attributes and methods of an object. For example, in the Online Shopping System, the Customer object will have attributes like shipping address, credit card, etc., and methods for placing an order, canceling an order, etc.</p>\n</li>\n</ul>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "8157b16f-3be5-471e-83e4-4d38246f0c62"
                            },
                            "hash": "1",
                            "iteration": 0
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5740087962763264,
                                "style": "original",
                                "caption": "OOP basics",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 403,
                                    "height": 377,
                                    "sizeInBytes": 8655,
                                    "name": "Untitled Diagram(1).svg"
                                },
                                "comp_id": "0a6d9738-3ecd-4f18-a425-1649bab175ef"
                            },
                            "hash": "2",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "edit",
                            "content": {
                                "version": "2.0",
                                "text": "The four principles of object-oriented programming are encapsulation, abstraction, inheritance, and polymorphism.\n\n* **Encapsulation:** Encapsulation is the mechanism of binding the data together and hiding it from the outside world. Encapsulation is achieved when each object keeps its state private so that other objects don\u2019t have direct access to its state. Instead, they can access this state only through a set of public functions.\n\n* **Abstraction:** Abstraction can be thought of as the natural extension of encapsulation. It means hiding all but the relevant data about an object in order to reduce the complexity of the system. In a large system, objects talk to each other, which makes it difficult to maintain a large code base; abstraction helps by hiding internal implementation details of objects and only revealing operations that are relevant to other objects.  \n\n* **Inheritance:** Inheritance is the mechanism of creating new classes from existing ones.\n\n* **Polymorphism:** Polymorphism  (from Greek, meaning \u201cmany forms\u201d)  is the ability of an object to take different forms and thus, depending upon the context, to respond to the same message in different ways. Take the example of a chess game; a chess piece can take many forms, like bishop, castle, or knight and all these pieces will respond differently to the 'move' message.\n\n",
                                "mdHtml": "<p>The four principles of object-oriented programming are encapsulation, abstraction, inheritance, and polymorphism.</p>\n<ul>\n<li>\n<p><strong>Encapsulation:</strong> Encapsulation is the mechanism of binding the data together and hiding it from the outside world. Encapsulation is achieved when each object keeps its state private so that other objects don\u2019t have direct access to its state. Instead, they can access this state only through a set of public functions.</p>\n</li>\n<li>\n<p><strong>Abstraction:</strong> Abstraction can be thought of as the natural extension of encapsulation. It means hiding all but the relevant data about an object in order to reduce the complexity of the system. In a large system, objects talk to each other, which makes it difficult to maintain a large code base; abstraction helps by hiding internal implementation details of objects and only revealing operations that are relevant to other objects.</p>\n</li>\n<li>\n<p><strong>Inheritance:</strong> Inheritance is the mechanism of creating new classes from existing ones.</p>\n</li>\n<li>\n<p><strong>Polymorphism:</strong> Polymorphism  (from Greek, meaning \u201cmany forms\u201d)  is the ability of an object to take different forms and thus, depending upon the context, to respond to the same message in different ways. Take the example of a chess game; a chess piece can take many forms, like bishop, castle, or knight and all these pieces will respond differently to the \u2018move\u2019 message.</p>\n</li>\n</ul>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "d3c35886-949c-4008-a773-895c95559f98"
                            },
                            "hash": "3",
                            "iteration": 1
                        }
                    ],
                    "summary": {
                        "title": "Object-Oriented Basics",
                        "description": ""
                    },
                    "pageProperties": {}
                },
                {
                    "components": [
                        {
                            "type": "MarkdownEditor",
                            "mode": "edit",
                            "content": {
                                "version": "2.0",
                                "text": "OO Analysis and Design is a structured method for analyzing and designing a system by applying object-oriented concepts. This design process consists of an investigation into the objects constituting the system. It starts by first identifying the objects of the system and then figuring out the interactions between various objects.\n\nThe process of OO analysis and design can be described as:\n\n1. Identifying the objects in a system;\n2. Defining relationships between objects;\n3. Establishing the interface of each object; and,\n4. Making a design, which can be converted to executables using OO languages.\n\nWe need a standard method/tool to document all this information; for this purpose we use UML. UML can be considered as the successor of object-oriented (OO) analysis and design. UML is powerful enough to represent all the concepts that exist in object-oriented analysis and design. UML diagrams are a representation of object-oriented concepts only. Thus, before learning UML, it is essential to understand OO concepts.\n\nLet's find out how we can model using UML.",
                                "mdHtml": "<p>OO Analysis and Design is a structured method for analyzing and designing a system by applying object-oriented concepts. This design process consists of an investigation into the objects constituting the system. It starts by first identifying the objects of the system and then figuring out the interactions between various objects.</p>\n<p>The process of OO analysis and design can be described as:</p>\n<ol>\n<li>Identifying the objects in a system;</li>\n<li>Defining relationships between objects;</li>\n<li>Establishing the interface of each object; and,</li>\n<li>Making a design, which can be converted to executables using OO languages.</li>\n</ol>\n<p>We need a standard method/tool to document all this information; for this purpose we use UML. UML can be considered as the successor of object-oriented (OO) analysis and design. UML is powerful enough to represent all the concepts that exist in object-oriented analysis and design. UML diagrams are a representation of object-oriented concepts only. Thus, before learning UML, it is essential to understand OO concepts.</p>\n<p>Let\u2019s find out how we can model using UML.</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "b0788a61-251a-4a3d-bd4d-fc9e893c720c"
                            },
                            "hash": "1",
                            "iteration": 1
                        }
                    ],
                    "summary": {
                        "description": "",
                        "title": "OO Analysis and Design"
                    },
                    "pageProperties": {}
                },
                {
                    "components": [
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "UML stands for Unified Modeling Language and is used to model the Object-Oriented Analysis of a software system. UML is a way of visualizing and documenting a software system by using a collection of diagrams, which helps engineers, businesspeople, and system architects understand the behavior and structure of the system being designed.\n\nBenefits of using UML:\n\n1. Helps develop a quick understanding of a software system.\n2. UML modeling helps in breaking a complex system into discrete pieces that can be easily understood.\n3. UML\u2019s graphical notations can be used to communicate design decisions.\n4. Since UML is independent of any specific platform or language or technology, it is easier to abstract out concepts.\n5. It becomes easier to hand the system over to a new team.",
                                "mdHtml": "<p>UML stands for Unified Modeling Language and is used to model the Object-Oriented Analysis of a software system. UML is a way of visualizing and documenting a software system by using a collection of diagrams, which helps engineers, businesspeople, and system architects understand the behavior and structure of the system being designed.</p>\n<p>Benefits of using UML:</p>\n<ol>\n<li>Helps develop a quick understanding of a software system.</li>\n<li>UML modeling helps in breaking a complex system into discrete pieces that can be easily understood.</li>\n<li>UML\u2019s graphical notations can be used to communicate design decisions.</li>\n<li>Since UML is independent of any specific platform or language or technology, it is easier to abstract out concepts.</li>\n<li>It becomes easier to hand the system over to a new team.</li>\n</ol>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "2688ba64-e639-41a5-93c8-c9da7d9d716f"
                            },
                            "hash": "1",
                            "iteration": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5133151101779968,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 642,
                                    "height": 336,
                                    "sizeInBytes": 16960,
                                    "name": "uml-risorse-free-642x336.jpg"
                                },
                                "comp_id": "fbb51c2e-9a52-4d7b-aae3-21ba5fcbe52b"
                            },
                            "hash": "2",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "edit",
                            "content": {
                                "version": "2.0",
                                "text": "**Types of UML Diagrams:**\nThe current UML standards call for 14 different kinds of diagrams. These diagrams are organized into two distinct groups: structural diagrams and behavioral or interaction diagrams. As the names suggest, some UML diagrams analyze and depict the structure of a system or process, whereas others describe the behavior of the system, its actors, and its building components. The different types are broken down as follows:\n\n**Structural UML diagrams**\n\n* Class diagram\n* Object diagram\n* Package diagram\n* Component diagram\n* Composite structure diagram\n* Deployment diagram\n* Profile diagram\n\n**Behavioral UML diagrams**\n\n* Use case diagram\n* Activity diagram\n* Sequence diagram\n* State diagram\n* Communication diagram\n* Interaction overview diagram\n* Timing diagram\n\nIn this course, we will be focusing on the following UML diagrams:\n\n* **Use Case Diagram:** Used to describe a set of user scenarios, this diagram, illustrates the functionality provided by the system.\n\n* **Class Diagram:** Used to describe structure and behavior in the use cases, this diagram provides a conceptual model of the system in terms of entities and their relationships.\n\n* **Activity Diagram:** Used to model the functional flow-of-control between two or more class objects.\n\n* **Sequence Diagram:** Used to describe interactions among classes in terms of an exchange of messages over time.\n",
                                "mdHtml": "<p><strong>Types of UML Diagrams:</strong>\nThe current UML standards call for 14 different kinds of diagrams. These diagrams are organized into two distinct groups: structural diagrams and behavioral or interaction diagrams. As the names suggest, some UML diagrams analyze and depict the structure of a system or process, whereas others describe the behavior of the system, its actors, and its building components. The different types are broken down as follows:</p>\n<p><strong>Structural UML diagrams</strong></p>\n<ul>\n<li>Class diagram</li>\n<li>Object diagram</li>\n<li>Package diagram</li>\n<li>Component diagram</li>\n<li>Composite structure diagram</li>\n<li>Deployment diagram</li>\n<li>Profile diagram</li>\n</ul>\n<p><strong>Behavioral UML diagrams</strong></p>\n<ul>\n<li>Use case diagram</li>\n<li>Activity diagram</li>\n<li>Sequence diagram</li>\n<li>State diagram</li>\n<li>Communication diagram</li>\n<li>Interaction overview diagram</li>\n<li>Timing diagram</li>\n</ul>\n<p>In this course, we will be focusing on the following UML diagrams:</p>\n<ul>\n<li>\n<p><strong>Use Case Diagram:</strong> Used to describe a set of user scenarios, this diagram, illustrates the functionality provided by the system.</p>\n</li>\n<li>\n<p><strong>Class Diagram:</strong> Used to describe structure and behavior in the use cases, this diagram provides a conceptual model of the system in terms of entities and their relationships.</p>\n</li>\n<li>\n<p><strong>Activity Diagram:</strong> Used to model the functional flow-of-control between two or more class objects.</p>\n</li>\n<li>\n<p><strong>Sequence Diagram:</strong> Used to describe interactions among classes in terms of an exchange of messages over time.</p>\n</li>\n</ul>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "18289fff-707a-4757-8d92-bd0d3080e0ae"
                            },
                            "hash": "3",
                            "iteration": 1
                        }
                    ],
                    "summary": {
                        "title": "What is UML?"
                    },
                    "pageProperties": {}
                },
                {
                    "components": [
                        {
                            "type": "MarkdownEditor",
                            "mode": "edit",
                            "content": {
                                "version": "2.0",
                                "text": "Use case diagrams describe a set of actions (called use cases) that a system should or can perform in collaboration with one or more external users of the system (called actors). Each use case should provide some observable and valuable result to the actors.\n\n1. Use Case Diagrams describe the high-level functional behavior of the system.\n2. It answers what system does from the user point of view.\n3. Use case answers \u2018What will the system do?\u2019 and at the same time tells us 'What will the system NOT do?'.\n\nA use case illustrates a unit of functionality provided by the system. The primary purpose of the use case diagram is to help development teams visualize the functional requirements of a system, including the relationship of \"actors\" to the essential processes, as well as the relationships among different use cases.\n\nTo illustrate a use case on a use case diagram, we draw an oval in the middle of the diagram and put the name of the use case in the center of the oval. To show an actor (indicating a system user) on a use-case diagram, we draw a stick figure to the left or right of the diagram.",
                                "mdHtml": "<p>Use case diagrams describe a set of actions (called use cases) that a system should or can perform in collaboration with one or more external users of the system (called actors). Each use case should provide some observable and valuable result to the actors.</p>\n<ol>\n<li>Use Case Diagrams describe the high-level functional behavior of the system.</li>\n<li>It answers what system does from the user point of view.</li>\n<li>Use case answers \u2018What will the system do?\u2019 and at the same time tells us \u2018What will the system NOT do?\u2019.</li>\n</ol>\n<p>A use case illustrates a unit of functionality provided by the system. The primary purpose of the use case diagram is to help development teams visualize the functional requirements of a system, including the relationship of \u201cactors\u201d to the essential processes, as well as the relationships among different use cases.</p>\n<p>To illustrate a use case on a use case diagram, we draw an oval in the middle of the diagram and put the name of the use case in the center of the oval. To show an actor (indicating a system user) on a use-case diagram, we draw a stick figure to the left or right of the diagram.</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "dc5be7ab-496a-4a4b-af0c-d5e710cfd6f6"
                            },
                            "hash": "1",
                            "iteration": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5697869507985408,
                                "style": "original",
                                "caption": "Sample use-case diagram for online shopping system",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 693,
                                    "height": 421,
                                    "sizeInBytes": 21946,
                                    "name": "use case basic.svg"
                                },
                                "comp_id": "4eebdd01-3061-4b23-a30d-567f7765899f"
                            },
                            "hash": "2",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "The different components of the use case diagram are:\n\n* **System boundary:** A system boundary defines the scope and limits of the system. It is shown as a rectangle that spans all use cases of the system.\n\n* **Actors:** An actor is an entity who performs specific actions. These roles are the actual business roles of the users in a given system. An actor interacts with a use case of the system. For example, in a banking system, the customer is one of the actors.\n\n* **Use Case:** Every business functionality is a potential use case. The use case should list the discrete business functionality specified in the problem statement.\n\n* **Include:** Include relationship represents an invocation of one use case by another use case. From a coding perspective, it is like one function being called by another function.\n\n* **Extend:** This relationship signifies that the extended use case will work exactly like the base use case, except that some new steps will be inserted in the extended use case.",
                                "mdHtml": "<p>The different components of the use case diagram are:</p>\n<ul>\n<li>\n<p><strong>System boundary:</strong> A system boundary defines the scope and limits of the system. It is shown as a rectangle that spans all use cases of the system.</p>\n</li>\n<li>\n<p><strong>Actors:</strong> An actor is an entity who performs specific actions. These roles are the actual business roles of the users in a given system. An actor interacts with a use case of the system. For example, in a banking system, the customer is one of the actors.</p>\n</li>\n<li>\n<p><strong>Use Case:</strong> Every business functionality is a potential use case. The use case should list the discrete business functionality specified in the problem statement.</p>\n</li>\n<li>\n<p><strong>Include:</strong> Include relationship represents an invocation of one use case by another use case. From a coding perspective, it is like one function being called by another function.</p>\n</li>\n<li>\n<p><strong>Extend:</strong> This relationship signifies that the extended use case will work exactly like the base use case, except that some new steps will be inserted in the extended use case.</p>\n</li>\n</ul>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "2dd0e55e-00c2-407e-86f5-fea299f19101"
                            },
                            "hash": "3",
                            "iteration": 0
                        }
                    ],
                    "summary": {
                        "title": "Use Case Diagrams"
                    },
                    "pageProperties": {}
                },
                {
                    "components": [
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "Class diagram is the backbone of object-oriented modeling - it shows how different entities (people, things, and data) relate to each other. In other words, it shows the static structures of the system.\n\nA class diagram describes the attributes and operations of a class and also the constraints imposed on the system. Class diagrams are widely used in the modeling of object-oriented systems because they are the only UML diagrams that can be mapped directly to object-oriented languages.\n\nThe purpose of the class diagram can be summarized as:\n\n1. Analysis and design of the static view of an application;\n2. To describe the responsibilities of a system;\n3. To provide a base for component and deployment diagrams; and,\n4. Forward and reverse engineering.\n\nA class is depicted in the class diagram as a rectangle with three horizontal sections, as shown in the figure below. The upper section shows the class's name (Flight), the middle section contains the properties of the class, and the lower section contains the class's operations (or \"methods\").\n",
                                "mdHtml": "<p>Class diagram is the backbone of object-oriented modeling - it shows how different entities (people, things, and data) relate to each other. In other words, it shows the static structures of the system.</p>\n<p>A class diagram describes the attributes and operations of a class and also the constraints imposed on the system. Class diagrams are widely used in the modeling of object-oriented systems because they are the only UML diagrams that can be mapped directly to object-oriented languages.</p>\n<p>The purpose of the class diagram can be summarized as:</p>\n<ol>\n<li>Analysis and design of the static view of an application;</li>\n<li>To describe the responsibilities of a system;</li>\n<li>To provide a base for component and deployment diagrams; and,</li>\n<li>Forward and reverse engineering.</li>\n</ol>\n<p>A class is depicted in the class diagram as a rectangle with three horizontal sections, as shown in the figure below. The upper section shows the class\u2019s name (Flight), the middle section contains the properties of the class, and the lower section contains the class\u2019s operations (or \u201cmethods\u201d).</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "f16e1d2e-70e4-472f-be1c-b3296877bc55"
                            },
                            "hash": "1",
                            "iteration": 0
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5632242407702528,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 395,
                                    "height": 284,
                                    "sizeInBytes": 9137,
                                    "name": "Class Diagram simple.svg"
                                },
                                "comp_id": "3bbd1807-28f6-4ef1-b278-5b0036631336"
                            },
                            "hash": "2",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "\nThese are the different types of relationships between classes:\n\n**Association:** If two classes in a model need to communicate with each other, there must be a link between them. This link can be represented by an association. Associations can be represented in a class diagram by a line between these classes with an arrow indicating the navigation direction. \n\n* By default, associations are always assumed to be bi-directional; this means that both classes are aware of each other and their relationship. In the diagram below, the association between Pilot and FlightInstance is bi-directional, as both classes know each other. \n* By contrast, in a uni-directional association, two classes are related - but only one class knows that the relationship exists. In the below example, only Flight class knows about Aircraft; hence it is a uni-directional association\n\n***Multiplicity*** Multiplicity indicates how many instances of a class participate in the relationship. It is a constraint that specifies the range of permitted cardinalities between two classes. For example, in the diagram below, one FlightInstance will have two Pilots, while a Pilot can have many FlightInstances. A ranged multiplicity can be expressed as \"0..*\" which means \u201czero to many\" or as \"2..4\" which means \"two to four\".\n\nWe can indicate the multiplicity of an association by adding multiplicity adornments to the line denoting the association. The below diagram, demonstrates that a FlightInstance has exactly two Pilots but a Pilot can have many FlightInstances.",
                                "mdHtml": "<p>These are the different types of relationships between classes:</p>\n<p><strong>Association:</strong> If two classes in a model need to communicate with each other, there must be a link between them. This link can be represented by an association. Associations can be represented in a class diagram by a line between these classes with an arrow indicating the navigation direction.</p>\n<ul>\n<li>By default, associations are always assumed to be bi-directional; this means that both classes are aware of each other and their relationship. In the diagram below, the association between Pilot and FlightInstance is bi-directional, as both classes know each other.</li>\n<li>By contrast, in a uni-directional association, two classes are related - but only one class knows that the relationship exists. In the below example, only Flight class knows about Aircraft; hence it is a uni-directional association</li>\n</ul>\n<p><strong><em>Multiplicity</em></strong> Multiplicity indicates how many instances of a class participate in the relationship. It is a constraint that specifies the range of permitted cardinalities between two classes. For example, in the diagram below, one FlightInstance will have two Pilots, while a Pilot can have many FlightInstances. A ranged multiplicity can be expressed as \u201c0\u2026*\u201d which means \u201czero to many&quot; or as \u201c2\u20264\u201d which means \u201ctwo to four\u201d.</p>\n<p>We can indicate the multiplicity of an association by adding multiplicity adornments to the line denoting the association. The below diagram, demonstrates that a FlightInstance has exactly two Pilots but a Pilot can have many FlightInstances.</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "281c0ecf-2dc0-419f-904e-f869cceb7265"
                            },
                            "hash": "3",
                            "iteration": 0
                        },
                        {
                            "type": "Image",
                            "mode": "edit",
                            "content": {
                                "image_id": 5424304122494976,
                                "style": "original",
                                "caption": "Sample class diagram for flight reservation system",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 1037,
                                    "height": 761,
                                    "sizeInBytes": 182378,
                                    "name": "Class Diagram detailed (1).png"
                                },
                                "comp_id": "01cf25c9-e526-4f5b-ba02-8509cfaecea9"
                            },
                            "hash": "4",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Aggregation:**\nAggregation is a special type of association used to model a \"whole to its parts\" relationship. In a basic aggregation relationship, the lifecycle of a PART class is independent of the WHOLE class's lifecycle. In other words, aggregation implies a relationship where the child can exist independently of the parent. In the above diagram, Aircraft can exist without Airline.\n\n**Composition:**\nThe composition aggregation relationship is just another form of the aggregation relationship, but the child class's instance lifecycle is dependent on the parent class's instance lifecycle. In other words, Composition implies a relationship where the child cannot exist independent of the parent. In the above example, WeeklySchedule is composed in Flight which means when Flight lifecycle ends, WeeklySchedule automatically gets destroyed.\n\n**Generalization:** Generalization is the mechanism for combining similar classes of objects into a single, more general class. Generalization identifies commonalities among a set of entities. In the above diagram, Crew, Pilot, and Admin, all are Person.\n\n**Dependency:** A dependency relationship is a relationship in which one class, the client, uses or depends on another class, the supplier. In the above diagram, FlightReservation depends on Payment. \n\n**Abstract class:** An abstract class is identified by specifying its name in *italics*. In the above diagram, both Person and Account classes are abstract classes. ",
                                "mdHtml": "<p><strong>Aggregation:</strong>\nAggregation is a special type of association used to model a \u201cwhole to its parts\u201d relationship. In a basic aggregation relationship, the lifecycle of a PART class is independent of the WHOLE class\u2019s lifecycle. In other words, aggregation implies a relationship where the child can exist independently of the parent. In the above diagram, Aircraft can exist without Airline.</p>\n<p><strong>Composition:</strong>\nThe composition aggregation relationship is just another form of the aggregation relationship, but the child class\u2019s instance lifecycle is dependent on the parent class\u2019s instance lifecycle. In other words, Composition implies a relationship where the child cannot exist independent of the parent. In the above example, WeeklySchedule is composed in Flight which means when Flight lifecycle ends, WeeklySchedule automatically gets destroyed.</p>\n<p><strong>Generalization:</strong> Generalization is the mechanism for combining similar classes of objects into a single, more general class. Generalization identifies commonalities among a set of entities. In the above diagram, Crew, Pilot, and Admin, all are Person.</p>\n<p><strong>Dependency:</strong> A dependency relationship is a relationship in which one class, the client, uses or depends on another class, the supplier. In the above diagram, FlightReservation depends on Payment.</p>\n<p><strong>Abstract class:</strong> An abstract class is identified by specifying its name in <em>italics</em>. In the above diagram, both Person and Account classes are abstract classes.</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "495e4832-90f2-4b2a-97a4-e4c9d1bc1603"
                            },
                            "hash": "5",
                            "iteration": 109
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 6207956561428480,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 571,
                                    "height": 511,
                                    "sizeInBytes": 25589,
                                    "name": "uml cheat sheet (1).svg"
                                },
                                "comp_id": "a973f86b-015d-4d56-87d8-f7ed5155730b"
                            },
                            "hash": "6",
                            "iteration": 0
                        }
                    ],
                    "summary": {
                        "title": "Class Diagram"
                    },
                    "pageProperties": {}
                },
                {
                    "components": [
                        {
                            "type": "MarkdownEditor",
                            "mode": "edit",
                            "content": {
                                "version": "2.0",
                                "text": "Sequence diagrams describe interactions among classes in terms of an exchange of messages over time and are used to explore the logic of complex operations, functions or procedures. In this diagram, the sequence of interactions between the objects is represented in a step-by-step manner.\n\nSequence diagrams show a detailed flow for a specific use case or even just part of a particular use case. They are almost self-explanatory; they show the calls between the different objects in their sequence and can explain, at a detailed level, different calls to various objects.\n\nA sequence diagram has two dimensions: The vertical dimension shows the sequence of messages in the chronological order that they occur; the horizontal dimension shows the object instances to which the messages are sent.",
                                "mdHtml": "<p>Sequence diagrams describe interactions among classes in terms of an exchange of messages over time and are used to explore the logic of complex operations, functions or procedures. In this diagram, the sequence of interactions between the objects is represented in a step-by-step manner.</p>\n<p>Sequence diagrams show a detailed flow for a specific use case or even just part of a particular use case. They are almost self-explanatory; they show the calls between the different objects in their sequence and can explain, at a detailed level, different calls to various objects.</p>\n<p>A sequence diagram has two dimensions: The vertical dimension shows the sequence of messages in the chronological order that they occur; the horizontal dimension shows the object instances to which the messages are sent.</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "3c8c5444-33cf-4bbe-b5f8-625b65345976"
                            },
                            "hash": "1",
                            "iteration": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5098807469539328,
                                "style": "original",
                                "caption": "Sample sequence diagram for ATM balance inquiry",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 723,
                                    "height": 371,
                                    "sizeInBytes": 17198,
                                    "name": "sequence diagram basic.svg"
                                },
                                "comp_id": "a02bc9fa-073b-4cd2-9075-5195e8753cc9"
                            },
                            "hash": "2",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "A sequence diagram is straightforward to draw. Across the top of your diagram, identify the class instances (objects) by putting each class instance inside a box (see above figure). If a class instance sends a message to another class instance, draw a line with an open arrowhead pointing to the receiving class instance and place the name of the message above the line. Optionally, for important messages, you can draw a dotted line with an arrowhead pointing back to the originating class instance; label the returned value above the dotted line.",
                                "mdHtml": "<p>A sequence diagram is straightforward to draw. Across the top of your diagram, identify the class instances (objects) by putting each class instance inside a box (see above figure). If a class instance sends a message to another class instance, draw a line with an open arrowhead pointing to the receiving class instance and place the name of the message above the line. Optionally, for important messages, you can draw a dotted line with an arrowhead pointing back to the originating class instance; label the returned value above the dotted line.</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "2cc5107c-b794-4324-8d8d-3079611f0460"
                            },
                            "hash": "3",
                            "iteration": 0
                        }
                    ],
                    "summary": {
                        "description": "",
                        "title": "Sequence diagram"
                    },
                    "pageProperties": {}
                },
                {
                    "components": [
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "We use Activity Diagrams to illustrate the flow of control in a system. An activity diagram shows the flow of control for a system functionality; it emphasizes the condition of flow and the sequence in which it happens. We can also use an activity diagram to refer to the steps involved in the execution of a use case.\n\nActivity diagrams illustrate the dynamic nature of a system by modeling the flow of control from activity to activity. An activity represents an operation on some class in the system that results in a change in the state of the system. Typically, activity diagrams are used to model workflow or business processes and internal operations.\n\nFollowing is an activity diagram for a user performing online shopping:",
                                "mdHtml": "<p>We use Activity Diagrams to illustrate the flow of control in a system. An activity diagram shows the flow of control for a system functionality; it emphasizes the condition of flow and the sequence in which it happens. We can also use an activity diagram to refer to the steps involved in the execution of a use case.</p>\n<p>Activity diagrams illustrate the dynamic nature of a system by modeling the flow of control from activity to activity. An activity represents an operation on some class in the system that results in a change in the state of the system. Typically, activity diagrams are used to model workflow or business processes and internal operations.</p>\n<p>Following is an activity diagram for a user performing online shopping:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "90bb0c3c-b9d5-482e-af8f-9acc12fc13b2"
                            },
                            "hash": "1",
                            "iteration": 2
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5696101055201280,
                                "style": "original",
                                "caption": "Sample activity diagram for online shopping ",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 485,
                                    "height": 879,
                                    "sizeInBytes": 24598,
                                    "name": "Activity Diagram(3).svg"
                                },
                                "comp_id": "f81ff149-0412-4c26-8649-332da0ca3955"
                            },
                            "hash": "2",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "edit",
                            "content": {
                                "version": "2.0",
                                "text": "**What is the difference between Activity diagram and Sequence diagram?**\n\n**Activity diagram** captures the process flow. It is used for functional modeling. A functional model represents the flow of values from external inputs, through operations and internal data stores, to external outputs.  \n**Sequence diagram** tracks the interaction between the objects. It is used for dynamic modeling, which is represented by tracking states, transitions between states, and the events that trigger these transitions.\n",
                                "mdHtml": "<p><strong>What is the difference between Activity diagram and Sequence diagram?</strong></p>\n<p><strong>Activity diagram</strong> captures the process flow. It is used for functional modeling. A functional model represents the flow of values from external inputs, through operations and internal data stores, to external outputs.<br />\n<strong>Sequence diagram</strong> tracks the interaction between the objects. It is used for dynamic modeling, which is represented by tracking states, transitions between states, and the events that trigger these transitions.</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "f37377cf-4bdc-4266-9df8-ddc43830e963"
                            },
                            "hash": "3",
                            "iteration": 2
                        }
                    ],
                    "summary": {
                        "title": "Activity Diagrams"
                    },
                    "pageProperties": {}
                }
            ]
        },
        {
            "title": "Object Oriented Design Case Studies",
            "pages": [
                {
                    "components": [
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "A Library Management System is a software built to handle the primary housekeeping functions of a library. Libraries rely on library management systems to manage asset collections as well as relationships with their members. Library management systems help libraries keep track of the books and their checkouts, as well as members' subscriptions and profiles.\n\nLibrary management systems also involve maintaining the database for entering new books and recording books that have been borrowed with their respective due dates.",
                                "mdHtml": "<p>A Library Management System is a software built to handle the primary housekeeping functions of a library. Libraries rely on library management systems to manage asset collections as well as relationships with their members. Library management systems help libraries keep track of the books and their checkouts, as well as members\u2019 subscriptions and profiles.</p>\n<p>Library management systems also involve maintaining the database for entering new books and recording books that have been borrowed with their respective due dates.</p>\n",
                                "comp_id": "df92ee8c-1868-42ae-85a7-25604cd9ba1b",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0,
                                    "sticky": "after",
                                    "xRel": -4.4444580078125
                                }
                            },
                            "hash": "1",
                            "iteration": 1,
                            "saveVersion": 4
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5668235307384832,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 540,
                                    "height": 360,
                                    "sizeInBytes": 61341,
                                    "name": "library-849797_1920.jpg"
                                },
                                "comp_id": "f6621716-c690-4984-aa56-2b3bfb1a6917"
                            },
                            "hash": "2",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## System Requirements\n\n> Always clarify requirements at the beginning of the interview. Be sure to ask questions to find the exact scope of the system that the interviewer has in mind.\n\nWe will focus on the following set of requirements while designing the Library Management System:\n\n1. Any library member should be able to search books by their title, author, subject category as well by the publication date.\n\n2. Each book will have a unique identification number and other details including a rack number which will help to physically locate the book.\n\n3. There could be more than one copy of a book, and library members should be able to check-out and reserve any copy. We will call each copy of a book, a book item.\n\n4. The system should be able to retrieve information like who took a particular book or what are the books checked-out by a specific library member.\n\n5. There should be a maximum limit (5) on how many books a member can check-out.\n\n6. There should be a maximum limit (10) on how many days a member can keep a book.\n\n7. The system should be able to collect fines for books returned after the due date.\n\n8. Members should be able to reserve books that are not currently available.\n\n9. The system should be able to send notifications whenever the reserved books become available, as well as when the book is not returned within the due date.\n\n10. Each book and member card will have a unique barcode. The system will be able to read barcodes from books and members' library cards.\n\n## Use case diagram\n\nWe have three main actors in our system:\n\n* **Librarian:** Mainly responsible for adding and modifying books, book items, and users. The Librarian can also issue, reserve, and return book items.\n* **Member:** All members can search the catalog, as well as check-out, reserve, renew, and return a book.\n* **System:** Mainly responsible for sending notifications for overdue books, canceled reservations, etc.\n\nHere are the top use cases of the Library Management System:\n\n* **Add/Remove/Edit book:** To add, remove or modify a book or book item.\n* **Search catalog:** To search books by title, author, subject or publication date.\n* **Register new account/cancel membership:** To add a new member or cancel the membership of an existing member.\n* **Check-out book:** To borrow a book from the library.\n* **Reserve book:** To reserve a book which is not currently available.\n* **Renew a book:** To reborrow an already checked-out book.\n* **Return a book:** To return a book to the library which was issued to a member.",
                                "mdHtml": "<h2>System Requirements</h2>\n<blockquote>\n<p>Always clarify requirements at the beginning of the interview. Be sure to ask questions to find the exact scope of the system that the interviewer has in mind.</p>\n</blockquote>\n<p>We will focus on the following set of requirements while designing the Library Management System:</p>\n<ol>\n<li>\n<p>Any library member should be able to search books by their title, author, subject category as well by the publication date.</p>\n</li>\n<li>\n<p>Each book will have a unique identification number and other details including a rack number which will help to physically locate the book.</p>\n</li>\n<li>\n<p>There could be more than one copy of a book, and library members should be able to check-out and reserve any copy. We will call each copy of a book, a book item.</p>\n</li>\n<li>\n<p>The system should be able to retrieve information like who took a particular book or what are the books checked-out by a specific library member.</p>\n</li>\n<li>\n<p>There should be a maximum limit (5) on how many books a member can check-out.</p>\n</li>\n<li>\n<p>There should be a maximum limit (10) on how many days a member can keep a book.</p>\n</li>\n<li>\n<p>The system should be able to collect fines for books returned after the due date.</p>\n</li>\n<li>\n<p>Members should be able to reserve books that are not currently available.</p>\n</li>\n<li>\n<p>The system should be able to send notifications whenever the reserved books become available, as well as when the book is not returned within the due date.</p>\n</li>\n<li>\n<p>Each book and member card will have a unique barcode. The system will be able to read barcodes from books and members\u2019 library cards.</p>\n</li>\n</ol>\n<h2>Use case diagram</h2>\n<p>We have three main actors in our system:</p>\n<ul>\n<li><strong>Librarian:</strong> Mainly responsible for adding and modifying books, book items, and users. The Librarian can also issue, reserve, and return book items.</li>\n<li><strong>Member:</strong> All members can search the catalog, as well as check-out, reserve, renew, and return a book.</li>\n<li><strong>System:</strong> Mainly responsible for sending notifications for overdue books, canceled reservations, etc.</li>\n</ul>\n<p>Here are the top use cases of the Library Management System:</p>\n<ul>\n<li><strong>Add/Remove/Edit book:</strong> To add, remove or modify a book or book item.</li>\n<li><strong>Search catalog:</strong> To search books by title, author, subject or publication date.</li>\n<li><strong>Register new account/cancel membership:</strong> To add a new member or cancel the membership of an existing member.</li>\n<li><strong>Check-out book:</strong> To borrow a book from the library.</li>\n<li><strong>Reserve book:</strong> To reserve a book which is not currently available.</li>\n<li><strong>Renew a book:</strong> To reborrow an already checked-out book.</li>\n<li><strong>Return a book:</strong> To return a book to the library which was issued to a member.</li>\n</ul>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 89,
                                    "sticky": null
                                },
                                "comp_id": "ed7c4426-07e1-4abd-b8ee-c687ec9979e9"
                            },
                            "hash": "3",
                            "iteration": 8,
                            "saveVersion": 5
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 4834701682409472,
                                "style": "original",
                                "caption": "Use case diagram",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 838,
                                    "height": 1044,
                                    "sizeInBytes": 245813,
                                    "name": "usecase.png"
                                },
                                "comp_id": "68c1cd98-291b-42e7-a3f0-9d1aa13cdae9"
                            },
                            "hash": "4",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## Class diagram\n\nHere are the main classes of our Library Management System:\n\n* **Library:**  The central part of the organization for which this software has been designed. It has attributes like 'Name' to distinguish it from any other libraries and 'Address' to describe its location.\n\n* **Book:** The basic building block of the system. Every book will have ISBN, Title, Subject, Publishers, etc.\n\n* **BookItem:** Any book can have multiple copies, each copy will be considered a book item in our system. Each book item will have a unique barcode.\n\n* **Account:** We will have two types of accounts in the system, one will be a general member, and the other will be a librarian.\n\n* **LibraryCard:** Each library user will be issued a library card, which will be used to identify users while issuing or returning books.\n\n* **BookReservation:** Responsible for managing reservations against book items.\n\n* **BookLending:** Manage the checking-out of book items.\n\n* **Catalog:** Catalogs contain list of books sorted on certain criteria. Our system will support searching through four catalogs: Title, Author, Subject, and Publish-date.\n\n* **Fine:** This class will be responsible for calculating and collecting fines from library members.\n\n* **Author:** This class will encapsulate a book author.\n\n* **Rack:** Books will be placed on racks. Each rack will be identified by a rack number and will have a location identifier to describe the physical location of the rack in the library.\n\n* **Notification:** This class will take care of sending notifications to library members.",
                                "mdHtml": "<h2>Class diagram</h2>\n<p>Here are the main classes of our Library Management System:</p>\n<ul>\n<li>\n<p><strong>Library:</strong>  The central part of the organization for which this software has been designed. It has attributes like \u2018Name\u2019 to distinguish it from any other libraries and \u2018Address\u2019 to describe its location.</p>\n</li>\n<li>\n<p><strong>Book:</strong> The basic building block of the system. Every book will have ISBN, Title, Subject, Publishers, etc.</p>\n</li>\n<li>\n<p><strong>BookItem:</strong> Any book can have multiple copies, each copy will be considered a book item in our system. Each book item will have a unique barcode.</p>\n</li>\n<li>\n<p><strong>Account:</strong> We will have two types of accounts in the system, one will be a general member, and the other will be a librarian.</p>\n</li>\n<li>\n<p><strong>LibraryCard:</strong> Each library user will be issued a library card, which will be used to identify users while issuing or returning books.</p>\n</li>\n<li>\n<p><strong>BookReservation:</strong> Responsible for managing reservations against book items.</p>\n</li>\n<li>\n<p><strong>BookLending:</strong> Manage the checking-out of book items.</p>\n</li>\n<li>\n<p><strong>Catalog:</strong> Catalogs contain list of books sorted on certain criteria. Our system will support searching through four catalogs: Title, Author, Subject, and Publish-date.</p>\n</li>\n<li>\n<p><strong>Fine:</strong> This class will be responsible for calculating and collecting fines from library members.</p>\n</li>\n<li>\n<p><strong>Author:</strong> This class will encapsulate a book author.</p>\n</li>\n<li>\n<p><strong>Rack:</strong> Books will be placed on racks. Each rack will be identified by a rack number and will have a location identifier to describe the physical location of the rack in the library.</p>\n</li>\n<li>\n<p><strong>Notification:</strong> This class will take care of sending notifications to library members.</p>\n</li>\n</ul>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 104,
                                    "sticky": null
                                },
                                "comp_id": "64f142f7-f99e-4ba9-99ad-e4905fcff860"
                            },
                            "hash": "5",
                            "iteration": 1,
                            "saveVersion": 2
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5972651845615616,
                                "style": "original",
                                "caption": "Class diagram for Library Management System",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 993,
                                    "height": 1294,
                                    "sizeInBytes": 290171,
                                    "name": "Class Diagram (7).png"
                                },
                                "comp_id": "f8dfeb51-f81a-4eb8-9505-3560d60b0fb3"
                            },
                            "hash": "6",
                            "iteration": 0
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5150650100875264,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 571,
                                    "height": 511,
                                    "sizeInBytes": 25589,
                                    "name": "uml cheat sheet (1).svg"
                                },
                                "comp_id": "5c30679e-d32f-48d8-9d6d-08a71a7eb3a8"
                            },
                            "hash": "7",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## Activity diagrams\n\n**Check-out a book:** Any library member or  librarian can perform this activity. Here are the set of steps to check-out a book:",
                                "mdHtml": "<h2>Activity diagrams</h2>\n<p><strong>Check-out a book:</strong> Any library member or  librarian can perform this activity. Here are the set of steps to check-out a book:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "afbe7153-a38b-40a3-9c95-d0c06521b773"
                            },
                            "hash": "8",
                            "iteration": 1,
                            "saveVersion": 2
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5690449683546112,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 491,
                                    "height": 1067,
                                    "sizeInBytes": 23691,
                                    "name": "Checkout a book - Activity Diagram(4).svg"
                                },
                                "comp_id": "77b4189f-17ef-42b0-b71c-2a7a7c713870"
                            },
                            "hash": "9",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Return a book:** Any library member or librarian can perform this activity. The system will collect fines from members if they return books after the due date. Here are the steps for returning a book:",
                                "mdHtml": "<p><strong>Return a book:</strong> Any library member or librarian can perform this activity. The system will collect fines from members if they return books after the due date. Here are the steps for returning a book:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "02d872c4-927d-40fc-b464-5bbe676ed245"
                            },
                            "hash": "10",
                            "iteration": 1,
                            "saveVersion": 1
                        },
                        {
                            "type": "Image",
                            "mode": "edit",
                            "content": {
                                "image_id": 4597046280454144,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 492,
                                    "height": 913,
                                    "sizeInBytes": 75144,
                                    "name": "Return book - Activity Diagram.png"
                                },
                                "comp_id": "22b02ad7-5d7f-4d1a-acb1-79c14d15b41f"
                            },
                            "hash": "11",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Renew a book:** While renewing (re-issuing) a book, the system will check for fines and see if any other member has not reserved the same book, in that case the book item cannot be renewed. Here are the different steps for renewing a book:",
                                "mdHtml": "<p><strong>Renew a book:</strong> While renewing (re-issuing) a book, the system will check for fines and see if any other member has not reserved the same book, in that case the book item cannot be renewed. Here are the different steps for renewing a book:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "48ed5deb-5db2-4ea6-9249-22a292589125"
                            },
                            "hash": "12",
                            "iteration": 1,
                            "saveVersion": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5728605367697408,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 499,
                                    "height": 977,
                                    "sizeInBytes": 24168,
                                    "name": "Renew book - Activity Diagram(2).svg"
                                },
                                "comp_id": "ca0c0c4a-ba54-49ef-9b24-68f03fff05bc"
                            },
                            "hash": "13",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## Code\n\nHere is the code for the use cases mentioned above: \n1) Check-out a book, \n2) Return a book, and \n3) Renew a book.\n\nNote: This code only focuses on the design part of the use cases. Since you are not required to write a fully executable code in an interview, you can assume parts of the code to interact with the database, payment system, etc.\n\n\n**Enums and Constants:** Here are the required enums, data types, and constants:",
                                "mdHtml": "<h2>Code</h2>\n<p>Here is the code for the use cases mentioned above:</p>\n<ol>\n<li>Check-out a book,</li>\n<li>Return a book, and</li>\n<li>Renew a book.</li>\n</ol>\n<p>Note: This code only focuses on the design part of the use cases. Since you are not required to write a fully executable code in an interview, you can assume parts of the code to interact with the database, payment system, etc.</p>\n<p><strong>Enums and Constants:</strong> Here are the required enums, data types, and constants:</p>\n",
                                "cursorPosition": 7,
                                "comp_id": "d1e829ed-5615-4b07-97e5-bbd8c694db43"
                            },
                            "hash": "14",
                            "iteration": 2,
                            "saveVersion": 2
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public enum BookFormat {\n  HARDCOVER,\n  PAPERBACK,\n  AUDIO_BOOK,\n  EBOOK,\n  NEWSPAPER,\n  MAGAZINE,\n  JOURNAL\n}\n\npublic enum BookStatus {\n  AVAILABLE,\n  RESERVED,\n  LOANED,\n  LOST\n}\n\npublic enum ReservationStatus{\n  WAITING,\n  PENDING,\n  CANCELED,\n  NONE\n}\n\npublic enum AccountStatus{\n  ACTIVE,\n  CLOSED,\n  CANCELED,\n  BLACKLISTED,\n  NONE\n}\n\npublic class Address {\n  private String streetAddress;\n  private String city;\n  private String state;\n  private String zipCode;\n  private String country;\n}\n\npublic class Person {\n  private String name;\n  private Address address;\n  private String email;\n  private String phone;\n}\n\npublic class Constants {\n  public static final int MAX_BOOKS_ISSUED_TO_A_USER = 5;\n  public static final int MAX_LENDING_DAYS = 10;\n}\n",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class BookFormat(Enum):\n  HARDCOVER, PAPERBACK, AUDIO_BOOK, EBOOK, NEWSPAPER, MAGAZINE, JOURNAL = 1, 2, 3, 4, 5, 6, 7\n\n\nclass BookStatus(Enum):\n  AVAILABLE, RESERVED, LOANED, LOST = 1, 2, 3, 4\n\n\nclass ReservationStatus(Enum):\n  WAITING, PENDING, CANCELED, NONE = 1, 2, 3, 4\n\n\nclass AccountStatus(Enum):\n  ACTIVE, CLOSED, CANCELED, BLACKLISTED, NONE = 1, 2, 3, 4, 5\n\n\nclass Address:\n  def __init__(self, street, city, state, zip_code, country):\n    self.__street_address = street\n    self.__city = city\n    self.__state = state\n    self.__zip_code = zip_code\n    self.__country = country\n\n\nclass Person(ABC):\n  def __init__(self, name, address, email, phone):\n    self.__name = name\n    self.__address = address\n    self.__email = email\n    self.__phone = phone\n\n\nclass Constants:\n  self.MAX_BOOKS_ISSUED_TO_A_USER = 5\n  self.MAX_LENDING_DAYS = 10",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "8dfff955-1f2f-491d-8005-9572a110983f"
                            },
                            "hash": "15",
                            "iteration": 1,
                            "saveVersion": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Account, Member, and Librarian:** These classes represent various people that interact with our system:",
                                "mdHtml": "<p><strong>Account, Member, and Librarian:</strong> These classes represent various people that interact with our system:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "8ef5b266-0f77-40ae-863f-9af9783e7c28"
                            },
                            "hash": "16",
                            "iteration": 1,
                            "saveVersion": 1
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "// For simplicity, we are not defining getter and setter functions. The reader can\n// assume that all class attributes are private and accessed through their respective\n// public getter methods and modified only through their public methods function.\n\npublic abstract class Account {\n  private String id;\n  private String password;\n  private AccountStatus status;\n  private Person person;\n\n  public boolean resetPassword();\n}\n\npublic class Librarian extends Account {\n  public boolean addBookItem(BookItem bookItem);\n\n  public boolean blockMember(Member member);\n\n  public boolean unBlockMember(Member member);\n}\n\npublic class Member extends Account {\n  private Date dateOfMembership;\n  private int totalBooksCheckedout;\n\n  public int getTotalBooksCheckedout();\n\n  public boolean reserveBookItem(BookItem bookItem);\n\n  private void incrementTotalBooksCheckedout();\n\n  public boolean checkoutBookItem(BookItem bookItem) {\n    if (this.getTotalBooksCheckedOut() >= Constants.MAX_BOOKS_ISSUED_TO_A_USER) {\n      ShowError(\"The user has already checked-out maximum number of books\");\n      return false;\n    }\n    BookReservation bookReservation = BookReservation.fetchReservationDetails(bookItem.getBarcode());\n    if (bookReservation != null && bookReservation.getMemberId() != this.getId()) {\n      // book item has a pending reservation from another user\n      ShowError(\"This book is reserved by another member\");\n      return false;\n    } else if (bookReservation != null) {\n      // book item has a pending reservation from the give member, update it\n      bookReservation.updateStatus(ReservationStatus.COMPLETED);\n    }\n\n    if (!bookItem.checkout(this.getId())) {\n      return false;\n    }\n\n    this.incrementTotalBooksCheckedout();\n    return true;\n  }\n\n  private void checkForFine(String bookItemBarcode) {\n    BookLending bookLending = BookLending.fetchLendingDetails(bookItemBarcode);\n    Date dueDate = bookLending.getDueDate();\n    Date today = new Date();\n    // check if the book has been returned within the due date\n    if (today.compareTo(dueDate) > 0) {\n      long diff = todayDate.getTime() - dueDate.getTime();\n      long diffDays = diff / (24 * 60 * 60 * 1000);\n      Fine.collectFine(memberId, diffDays);\n    }\n  }\n\n  public void returnBookItem(BookItem bookItem) {\n    this.checkForFine(bookItem.getBarcode());\n    BookReservation bookReservation = BookReservation.fetchReservationDetails(bookItem.getBarcode());\n    if (bookReservation != null) {\n      // book item has a pending reservation\n      bookItem.updateBookItemStatus(BookStatus.RESERVED);\n      bookReservation.sendBookAvailableNotification();\n    }\n    bookItem.updateBookItemStatus(BookStatus.AVAILABLE);\n  }\n\n  public bool renewBookItem(BookItem bookItem) {\n    this.checkForFine(bookItem.getBarcode());\n    BookReservation bookReservation = BookReservation.fetchReservationDetails(bookItem.getBarcode());\n    // check if this book item has a pending reservation from another member\n    if (bookReservation != null && bookReservation.getMemberId() != this.getMemberId()) {\n      ShowError(\"This book is reserved by another member\");\n      member.decrementTotalBooksCheckedout();\n      bookItem.updateBookItemState(BookStatus.RESERVED);\n      bookReservation.sendBookAvailableNotification();\n      return false;\n    } else if (bookReservation != null) {\n      // book item has a pending reservation from this member\n      bookReservation.updateStatus(ReservationStatus.COMPLETED);\n    }\n    BookLending.lendBook(bookItem.getBarCode(), this.getMemberId());\n    bookItem.updateDueDate(LocalDate.now().plusDays(Constants.MAX_LENDING_DAYS));\n    return true;\n  }\n}\n",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "# For simplicity, we are not defining getter and setter functions. The reader can\n# assume that all class attributes are private and accessed through their respective\n# public getter methods and modified only through their public methods function.\n\n\nfrom abc import ABC, abstractmethod\n\nclass Account(ABC):\n  def __init__(self, id, password, person, status=AccountStatus.Active):\n    self.__id = id\n    self.__password = password\n    self.__status = status\n    self.__person = person\n\n  def reset_password(self):\n    None\n\n\nclass Librarian(Account):\n  def __init__(self, id, password, person, status=AccountStatus.Active):\n    super().__init__(id, password, person, status)\n\n  def add_book_item(self, book_item):\n    None\n\n  def block_member(self, member):\n    None\n\n  def un_block_member(self, member):\n    None\n\n\nclass Member(Account):\n  def __init__(self, id, password, person, status=AccountStatus.Active):\n    super().__init__(id, password, person, status)\n    self.__date_of_membership = datetime.date.today()\n    self.__total_books_checkedout = 0\n\n  def get_total_books_checkedout(self):\n    return self.__total_books_checkedout\n\n  def reserve_book_item(self, book_item):\n    None\n\n  def increment_total_books_checkedout(self):\n    None\n\n  def renew_book_item(self, book_item):\n    None\n\n  def checkout_book_item(self, book_item):\n    if self.get_total_books_checked_out() >= Constants.MAX_BOOKS_ISSUED_TO_A_USER:\n      print(\"The user has already checked-out maximum number of books\")\n      return False\n    book_reservation = BookReservation.fetch_reservation_details(\n      book_item.get_barcode())\n    if book_reservation != None and book_reservation.get_member_id() != self.get_id():\n      # book item has a pending reservation from another user\n      print(\"self book is reserved by another member\")\n      return False\n    elif book_reservation != None:\n      # book item has a pending reservation from the give member, update it\n      book_reservation.update_status(ReservationStatus.COMPLETED)\n\n    if not book_item.checkout(self.get_id()):\n      return False\n\n    self.increment_total_books_checkedout()\n    return True\n\n  def check_for_fine(self, book_item_barcode):\n    book_lending = BookLending.fetch_lending_details(book_item_barcode)\n    due_date = book_lending.get_due_date()\n    today = datetime.date.today()\n    # check if the book has been returned within the due date\n    if today > due_date:\n      diff = today - due_date\n      diff_days = diff.days\n      Fine.collect_fine(self.get_member_id(), diff_days)\n\n  def return_book_item(self, book_item):\n    self.check_for_fine(book_item.get_barcode())\n    book_reservation = BookReservation.fetch_reservation_details(\n      book_item.get_barcode())\n    if book_reservation != None:\n      # book item has a pending reservation\n      book_item.update_book_item_status(BookStatus.RESERVED)\n      book_reservation.send_book_available_notification()\n    book_item.update_book_item_status(BookStatus.AVAILABLE)\n\n  def renew_book_item(self, book_item):\n    self.check_for_fine(book_item.get_barcode())\n    book_reservation = BookReservation.fetch_reservation_details(\n      book_item.get_barcode())\n    # check if self book item has a pending reservation from another member\n    if book_reservation != None and book_reservation.get_member_id() != self.get_member_id():\n      print(\"self book is reserved by another member\")\n      self.decrement_total_books_checkedout()\n      book_item.update_book_item_state(BookStatus.RESERVED)\n      book_reservation.send_book_available_notification()\n      return False\n    elif book_reservation != None:\n      # book item has a pending reservation from self member\n      book_reservation.update_status(ReservationStatus.COMPLETED)\n    BookLending.lend_book(book_item.get_bar_code(), self.get_member_id())\n    book_item.update_due_date(\n      datetime.datetime.now().AddDays(Constants.MAX_LENDING_DAYS))\n    return True\n",
                                        "entryFileName": "main.py",
                                        "onlyCodeChanged": true,
                                        "key": 1
                                    }
                                ],
                                "comp_id": "97fc90ec-fb9d-4ad6-baec-98312678acbe"
                            },
                            "hash": "17",
                            "iteration": 1,
                            "saveVersion": 2
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**BookReservation, BookLending, and Fine:** These classes represent a book reservation, lending, and fine collection, respectively.",
                                "mdHtml": "<p><strong>BookReservation, BookLending, and Fine:</strong> These classes represent a book reservation, lending, and fine collection, respectively.</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "cb88e435-a97c-4deb-ae7e-cea734b8a86b"
                            },
                            "hash": "18",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public class BookReservation {\n  private Date creationDate;\n  private ReservationStatus status;\n  private String bookItemBarcode;\n  private String memberId;\n\n  public static BookReservation fetchReservationDetails(String barcode);\n}\n\npublic class BookLending {\n  private Date creationDate;\n  private Date dueDate;\n  private Date returnDate;\n  private String bookItemBarcode;\n  private String memberId;\n\n  public static boolean lendBook(String barcode, String memberId);\n  public static BookLending fetchLendingDetails(String barcode);\n}\n\npublic class Fine {\n  private Date creationDate;\n  private double bookItemBarcode;\n  private String memberId;\n\n  public static void collectFine(String memberId, long days) {}\n}\n",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0,
                                        "onlyCodeChanged": true
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class BookReservation:\n  def __init__(self, creation_date, status, book_item_barcode, member_id):\n    self.__creation_date = creation_date\n    self.__status = status\n    self.__book_item_barcode = book_item_barcode\n    self.__member_id = member_id\n\n  def fetch_reservation_details(self, barcode):\n    None\n\n\nclass BookLending:\n  def __init__(self, creation_date, due_date, book_item_barcode, member_id):\n    self.__creation_date = creation_date\n    self.__due_date = due_date\n    self.__return_date = None\n    self.__book_item_barcode = book_item_barcode\n    self.__member_id = member_id\n\n  def lend_book(self, barcode, member_id):\n    None\n\n  def fetch_lending_details(self, barcode):\n    None\n\n\nclass Fine:\n  def __init__(self, creation_date, book_item_barcode, member_id):\n    self.__creation_date = creation_date\n    self.__book_item_barcode = book_item_barcode\n    self.__member_id = member_id\n\n  def collect_fine(self, member_id, days):\n    None",
                                        "entryFileName": "main.py",
                                        "key": 1,
                                        "onlyCodeChanged": true
                                    }
                                ],
                                "comp_id": "721d38b1-dd76-4960-b157-28dbf016356f"
                            },
                            "hash": "19",
                            "iteration": 1,
                            "saveVersion": 4
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**BookItem:** Encapsulating a book item, this class will be responsible for processing the reservation, return, and renewal of a book item.",
                                "mdHtml": "<p><strong>BookItem:</strong> Encapsulating a book item, this class will be responsible for processing the reservation, return, and renewal of a book item.</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "c4ae0111-64b2-4f4e-b564-95a57de77d3d"
                            },
                            "hash": "20",
                            "iteration": 1,
                            "saveVersion": 1
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public abstract class Book {\n  private String ISBN;\n  private String title;\n  private String subject;\n  private String publisher;\n  private String language;\n  private int numberOfPages;\n  private List<Author> authors;\n}\n\npublic class BookItem extends Book {\n  private String barcode;\n  private boolean isReferenceOnly;\n  private Date borrowed;\n  private Date dueDate;\n  private double price;\n  private BookFormat format;\n  private BookStatus status;\n  private Date dateOfPurchase;\n  private Date publicationDate;\n  private Rack placedAt;\n\n  public boolean checkout(String memberId) {\n    if(bookItem.getIsReferenceOnly()) {\n      ShowError(\"This book is Reference only and can't be issued\");\n      return false;\n    }\n    if(!BookLending.lendBook(this.getBarCode(), memberId)){\n      return false;\n    }\n    this.updateBookItemStatus(BookStatus.LOANED);\n    return true;\n  }\n}\n\npublic class Rack {\n  private int number;\n  private String locationIdentifier;\n}\n",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "from abc import ABC, abstractmethod\n\nclass Book(ABC):\n  def __init__(self, ISBN, title, subject, publisher, language, number_of_pages):\n    self.__ISBN = ISBN\n    self.__title = title\n    self.__subject = subject\n    self.__publisher = publisher\n    self.__language = language\n    self.__number_of_pages = number_of_pages\n    self.__authors = []\n\n\nclass BookItem(Book):\n  def __init__(self, barcode, is_reference_only, borrowed, due_date, price, book_format, status, date_of_purchase, publication_date, placed_at):\n    self.__barcode = barcode\n    self.__is_reference_only = is_reference_only\n    self.__borrowed = borrowed\n    self.__due_date = due_date\n    self.__price = price\n    self.__format = book_format\n    self.__status = status\n    self.__date_of_purchase = date_of_purchase\n    self.__publication_date = publication_date\n    self.__placed_at = placed_at\n\n  def checkout(self, member_id):\n    if self.get_is_reference_only():\n      print(\"self book is Reference only and can't be issued\")\n      return False\n    if not BookLending.lend_book(self.get_bar_code(), member_id):\n      return False\n    self.update_book_item_status(BookStatus.LOANED)\n    return True\n\n\nclass Rack:\n  def __init__(self, number, location_identifier):\n    self.__number = number\n    self.__location_identifier = location_identifier",
                                        "entryFileName": "main.py",
                                        "key": 1,
                                        "onlyCodeChanged": true
                                    }
                                ],
                                "comp_id": "90b9054d-9b43-4d59-a89d-8746542c2426"
                            },
                            "hash": "21",
                            "iteration": 1,
                            "saveVersion": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "\n**Search interface and Catalog:** The Catalog class will implement the Search interface to facilitate searching of books.\n",
                                "mdHtml": "<p><strong>Search interface and Catalog:</strong> The Catalog class will implement the Search interface to facilitate searching of books.</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "7c01f109-161e-473f-8f36-a0740ea7be5b"
                            },
                            "hash": "22",
                            "iteration": 1,
                            "saveVersion": 1
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public interface Search {\n  public List<Book> searchByTitle(String title);\n  public List<Book> searchByAuthor(String author);\n  public List<Book> searchBySubject(String subject);\n  public List<Book> searchByPubDate(Date publishDate);\n}\n\npublic class Catalog implements Search {\n  private HashMap<String, List<Book>> bookTitles;\n  private HashMap<String, List<Book>> bookAuthors;\n  private HashMap<String, List<Book>> bookSubjects;\n  private HashMap<String, List<Book>> bookPublicationDates;\n\n  public List<Book> searchByTitle(String query) {\n    // return all books containing the string query in their title.\n    return bookTitles.get(query);\n  }\n\n  public List<Book> searchByAuthor(String query) {\n    // return all books containing the string query in their author's name.\n    return bookAuthors.get(query);\n  }\n}",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "from abc import ABC, abstractmethod\n\nclass Search(ABC):\n  def search_by_title(self, title):\n    None\n\n  def search_by_author(self, author):\n    None\n\n  def search_by_subject(self, subject):\n    None\n\n  def search_by_pub_date(self, publish_date):\n    None\n\n\nclass Catalog(Search):\n  def __init__(self):\n    self.__book_titles = {}\n    self.__book_authors = {}\n    self.__book_subjects = {}\n    self.__book_publication_dates = {}\n\n  def search_by_title(self, query):\n    # return all books containing the string query in their title.\n    return self.__book_titles.get(query)\n\n  def search_by_author(self, query):\n    # return all books containing the string query in their author's name.\n    return self.__book_authors.get(query)\n",
                                        "entryFileName": "main.py",
                                        "key": 1,
                                        "onlyCodeChanged": true
                                    }
                                ],
                                "comp_id": "eb399731-b1c3-4560-93b4-480e12fdbf4d"
                            },
                            "hash": "23",
                            "iteration": 1,
                            "saveVersion": 1
                        }
                    ],
                    "summary": {
                        "title": "Design a Library Management System",
                        "titleUpdated": true
                    }
                },
                {
                    "components": [
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "A parking lot or car park is a dedicated cleared area that is intended for parking vehicles. In most countries where cars are a major mode of transportation, parking lots are a feature of every city and suburban area. Shopping malls, sports stadiums, megachurches, and similar venues often feature parking lots over large areas.",
                                "mdHtml": "<p>A parking lot or car park is a dedicated cleared area that is intended for parking vehicles. In most countries where cars are a major mode of transportation, parking lots are a feature of every city and suburban area. Shopping malls, sports stadiums, megachurches, and similar venues often feature parking lots over large areas.</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "3ae9d88b-69e3-4071-b530-aaddbe904c0b"
                            },
                            "hash": "1",
                            "iteration": 1,
                            "saveVersion": 2
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5757793965441024,
                                "style": "original",
                                "caption": "A Parking Lot",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 576,
                                    "height": 432,
                                    "sizeInBytes": 56242,
                                    "name": "parking lot.jpg"
                                },
                                "comp_id": "a0151144-0a66-4f2f-a705-92cf09b3301c"
                            },
                            "hash": "2",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## System Requirements\n\nWe will focus on the following set of requirements while designing the parking lot:\n\n1. The parking lot should have multiple floors where customers can park their cars.\n\n2. The parking lot should have multiple entry and exit points.\n\n3. Customers can collect a parking ticket from the entry points and can pay the parking fee at the exit points on their way out.\n\n4. Customers can pay the tickets at the automated exit panel or to the parking attendant.\n\n5. Customers can pay via both cash and credit cards.\n\n6. Customers should also be able to pay the parking fee at the customer's info portal on each floor. If the customer has paid at the info portal, they don't have to pay at the exit.  \n\n7. The system should not allow more vehicles than the maximum capacity of the parking lot. If the parking is full, the system should be able to show a message at the entrance panel and on the parking display board on the ground floor.\n\n8. Each parking floor will have many parking spots. The system should support multiple types of parking spots such as Compact, Large, Handicapped, Motorcycle, etc.\n\n9. The Parking lot should have some parking spots specified for electric cars. These spots should have an electric panel through which customers can pay and charge their vehicles. \n\n10. The system should support parking for different types of vehicles like car, truck, van, motorcycle, etc.\n\n11. Each parking floor should have a display board showing any free parking spot for each spot type.\n\n12. The system should support a per-hour parking fee model. For example, customers have to pay \\$4 for the first hour, \\$3.5 for the second and third hours, and \\$2.5 for all the remaining hours.\n\n\n## Use case diagram\n\nHere are the main Actors in our system:\n\n* **Admin:** Mainly responsible for adding and modifying parking floors, parking spots, entrance, and exit panels, adding/removing parking attendants, etc.\n\n* **Customer:** All customers can get a parking ticket and pay for it.\n\n* **Parking attendant:** Parking attendants can do all the activities on the customer's behalf, and can take cash for ticket payment. \n\n* **System:** To display messages on different info panels, as well as assigning and removing a vehicle from a parking spot.\n\nHere are the top use cases for Parking Lot:\n\n* **Add/Remove/Edit parking floor:** To add, remove or modify a parking floor from the system. Each floor can have its own display board to show free parking spots.\n* **Add/Remove/Edit parking spot:** To add, remove or modify a parking spot on a parking floor.\n* **Add/Remove a parking attendant:** To add or remove a parking attendant from the system.\n* **Take ticket:**  To provide customers with a new parking ticket when entering the parking lot.\n* **Scan ticket:** To scan a ticket to find out the total charge.\n* **Credit card payment:** To pay the ticket fee with credit card.\n* **Cash payment:** To pay the parking ticket through cash.\n* **Add/Modify parking rate:** To allow admin to add or modify the hourly parking rate.",
                                "mdHtml": "<h2>System Requirements</h2>\n<p>We will focus on the following set of requirements while designing the parking lot:</p>\n<ol>\n<li>\n<p>The parking lot should have multiple floors where customers can park their cars.</p>\n</li>\n<li>\n<p>The parking lot should have multiple entry and exit points.</p>\n</li>\n<li>\n<p>Customers can collect a parking ticket from the entry points and can pay the parking fee at the exit points on their way out.</p>\n</li>\n<li>\n<p>Customers can pay the tickets at the automated exit panel or to the parking attendant.</p>\n</li>\n<li>\n<p>Customers can pay via both cash and credit cards.</p>\n</li>\n<li>\n<p>Customers should also be able to pay the parking fee at the customer\u2019s info portal on each floor. If the customer has paid at the info portal, they don\u2019t have to pay at the exit.</p>\n</li>\n<li>\n<p>The system should not allow more vehicles than the maximum capacity of the parking lot. If the parking is full, the system should be able to show a message at the entrance panel and on the parking display board on the ground floor.</p>\n</li>\n<li>\n<p>Each parking floor will have many parking spots. The system should support multiple types of parking spots such as Compact, Large, Handicapped, Motorcycle, etc.</p>\n</li>\n<li>\n<p>The Parking lot should have some parking spots specified for electric cars. These spots should have an electric panel through which customers can pay and charge their vehicles.</p>\n</li>\n<li>\n<p>The system should support parking for different types of vehicles like car, truck, van, motorcycle, etc.</p>\n</li>\n<li>\n<p>Each parking floor should have a display board showing any free parking spot for each spot type.</p>\n</li>\n<li>\n<p>The system should support a per-hour parking fee model. For example, customers have to pay $4 for the first hour, $3.5 for the second and third hours, and $2.5 for all the remaining hours.</p>\n</li>\n</ol>\n<h2>Use case diagram</h2>\n<p>Here are the main Actors in our system:</p>\n<ul>\n<li>\n<p><strong>Admin:</strong> Mainly responsible for adding and modifying parking floors, parking spots, entrance, and exit panels, adding/removing parking attendants, etc.</p>\n</li>\n<li>\n<p><strong>Customer:</strong> All customers can get a parking ticket and pay for it.</p>\n</li>\n<li>\n<p><strong>Parking attendant:</strong> Parking attendants can do all the activities on the customer\u2019s behalf, and can take cash for ticket payment.</p>\n</li>\n<li>\n<p><strong>System:</strong> To display messages on different info panels, as well as assigning and removing a vehicle from a parking spot.</p>\n</li>\n</ul>\n<p>Here are the top use cases for Parking Lot:</p>\n<ul>\n<li><strong>Add/Remove/Edit parking floor:</strong> To add, remove or modify a parking floor from the system. Each floor can have its own display board to show free parking spots.</li>\n<li><strong>Add/Remove/Edit parking spot:</strong> To add, remove or modify a parking spot on a parking floor.</li>\n<li><strong>Add/Remove a parking attendant:</strong> To add or remove a parking attendant from the system.</li>\n<li><strong>Take ticket:</strong>  To provide customers with a new parking ticket when entering the parking lot.</li>\n<li><strong>Scan ticket:</strong> To scan a ticket to find out the total charge.</li>\n<li><strong>Credit card payment:</strong> To pay the ticket fee with credit card.</li>\n<li><strong>Cash payment:</strong> To pay the parking ticket through cash.</li>\n<li><strong>Add/Modify parking rate:</strong> To allow admin to add or modify the hourly parking rate.</li>\n</ul>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "dee3ce7c-5141-4717-8574-4d82e0b270f2"
                            },
                            "hash": "3",
                            "iteration": 2,
                            "saveVersion": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5676455606353920,
                                "style": "original",
                                "caption": "Use case diagram",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 843,
                                    "height": 894,
                                    "sizeInBytes": 34670,
                                    "name": "usecase(33).svg"
                                },
                                "comp_id": "464fef2b-09a8-4f93-b934-96da2af675bb"
                            },
                            "hash": "4",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## Class diagram\n\nHere are the main classes of our Parking Lot System:\n\n* **ParkingLot:**  The central part of the organization for which this software has been designed. It has attributes like 'Name' to distinguish it from any other parking lots and 'Address' to define its location.\n\n* **ParkingFloor:** The parking lot will have many parking floors.\n\n* **ParkingSpot:** Each parking floor will have many parking spots. Our system will support different parking spots 1) Handicapped, 2) Compact, 3) Large, 4) Motorcycle, and 5) Electric. \n\n* **Account:** We will have two types of accounts in the system: one for an Admin, and the other for a parking attendant.\n\n* **Parking ticket:** This class will encapsulate a parking ticket. Customers will take a ticket when they enter the parking lot.\n\n* **Vehicle:** Vehicles will be parked in the parking spots. Our system will support different types of vehicles 1) Car, 2) Truck, 3) Electric, 4) Van and 5) Motorcycle. \n\n* **EntrancePanel and ExitPanel:** EntrancePanel will print tickets, and ExitPanel will facilitate payment of the ticket fee.\n\n* **Payment:** This class will be responsible for making payments. The system will support credit card and cash transactions.\n\n* **ParkingRate:** This class will keep track of the hourly parking rates. It will specify a dollar amount for each hour. For example, for a two hour parking ticket, this class will define the cost for the first and the second hour.\n\n* **ParkingDisplayBoard:** Each parking floor will have a display board to show available parking spots for each spot type. This class will be responsible for displaying the latest availability of free parking spots to the customers.\n\n* **ParkingAttendantPortal:** This class will encapsulate all the operations that an attendant can perform, like scanning tickets and processing payments.\n\n* **CustomerInfoPortal:** This class will encapsulate the info portal that customers use to pay for the parking ticket. Once paid, the info portal will update the ticket to keep track of the payment.\n\n* **ElectricPanel:** Customers will use the electric panels to pay and charge their electric vehicles.",
                                "mdHtml": "<h2>Class diagram</h2>\n<p>Here are the main classes of our Parking Lot System:</p>\n<ul>\n<li>\n<p><strong>ParkingLot:</strong>  The central part of the organization for which this software has been designed. It has attributes like \u2018Name\u2019 to distinguish it from any other parking lots and \u2018Address\u2019 to define its location.</p>\n</li>\n<li>\n<p><strong>ParkingFloor:</strong> The parking lot will have many parking floors.</p>\n</li>\n<li>\n<p><strong>ParkingSpot:</strong> Each parking floor will have many parking spots. Our system will support different parking spots 1) Handicapped, 2) Compact, 3) Large, 4) Motorcycle, and 5) Electric.</p>\n</li>\n<li>\n<p><strong>Account:</strong> We will have two types of accounts in the system: one for an Admin, and the other for a parking attendant.</p>\n</li>\n<li>\n<p><strong>Parking ticket:</strong> This class will encapsulate a parking ticket. Customers will take a ticket when they enter the parking lot.</p>\n</li>\n<li>\n<p><strong>Vehicle:</strong> Vehicles will be parked in the parking spots. Our system will support different types of vehicles 1) Car, 2) Truck, 3) Electric, 4) Van and 5) Motorcycle.</p>\n</li>\n<li>\n<p><strong>EntrancePanel and ExitPanel:</strong> EntrancePanel will print tickets, and ExitPanel will facilitate payment of the ticket fee.</p>\n</li>\n<li>\n<p><strong>Payment:</strong> This class will be responsible for making payments. The system will support credit card and cash transactions.</p>\n</li>\n<li>\n<p><strong>ParkingRate:</strong> This class will keep track of the hourly parking rates. It will specify a dollar amount for each hour. For example, for a two hour parking ticket, this class will define the cost for the first and the second hour.</p>\n</li>\n<li>\n<p><strong>ParkingDisplayBoard:</strong> Each parking floor will have a display board to show available parking spots for each spot type. This class will be responsible for displaying the latest availability of free parking spots to the customers.</p>\n</li>\n<li>\n<p><strong>ParkingAttendantPortal:</strong> This class will encapsulate all the operations that an attendant can perform, like scanning tickets and processing payments.</p>\n</li>\n<li>\n<p><strong>CustomerInfoPortal:</strong> This class will encapsulate the info portal that customers use to pay for the parking ticket. Once paid, the info portal will update the ticket to keep track of the payment.</p>\n</li>\n<li>\n<p><strong>ElectricPanel:</strong> Customers will use the electric panels to pay and charge their electric vehicles.</p>\n</li>\n</ul>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "ae6c812f-6dca-4b64-9584-c0ac26d42ba3"
                            },
                            "hash": "5",
                            "iteration": 2,
                            "saveVersion": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5661762059763712,
                                "style": "original",
                                "caption": "Class diagram",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 1133,
                                    "height": 1018,
                                    "sizeInBytes": 259857,
                                    "name": "Class Diagram (8).png"
                                },
                                "comp_id": "1c45f59e-34b6-4e84-b9c3-5f90015864bb"
                            },
                            "hash": "6",
                            "iteration": 0
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 6245805994278912,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 571,
                                    "height": 511,
                                    "sizeInBytes": 25589,
                                    "name": "uml cheat sheet (1).svg"
                                },
                                "comp_id": "f85efaa4-4673-4b99-ba5b-af4c2a183795"
                            },
                            "hash": "7",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## Activity diagrams\n\n**Customer paying for parking ticket:** Any customer can perform this activity. Here are the set of steps:",
                                "mdHtml": "<h2>Activity diagrams</h2>\n<p><strong>Customer paying for parking ticket:</strong> Any customer can perform this activity. Here are the set of steps:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "ce158bb5-c3e7-4a09-92f2-c0b04a78accd"
                            },
                            "hash": "8",
                            "iteration": 2,
                            "saveVersion": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5679720049934336,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 535,
                                    "height": 1236,
                                    "sizeInBytes": 28951,
                                    "name": "Pay parking ticket - Activity Diagram(1).svg"
                                },
                                "comp_id": "eff701f0-fdbc-4274-b12d-5ba427bde0d3",
                                "file": null
                            },
                            "hash": "9",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## Code\n\nFollowing is the skeleton code for our parking lot system:\n\n**Enums and Constants:** Here are the required enums, data types, and constants:",
                                "mdHtml": "<h2>Code</h2>\n<p>Following is the skeleton code for our parking lot system:</p>\n<p><strong>Enums and Constants:</strong> Here are the required enums, data types, and constants:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "b5366b2f-0b9e-4100-86ec-13a94b76ac80"
                            },
                            "hash": "10",
                            "iteration": 2,
                            "saveVersion": 1
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public enum VehicleType {\n  CAR, TRUCK, ELECTRIC, VAN, MOTORBIKE\n}\n\npublic enum ParkingSpotType {\n  HANDICAPPED, COMPACT, LARGE, MOTORBIKE, ELECTRIC\n}\n\npublic enum AccountStatus {\n  ACTIVE, BLOCKED, BANNED, COMPROMISED, ARCHIVED, UNKNOWN\n}\n\npublic enum ParkingTicketStatus {\n  ACTIVE, PAID, LOST\n}\n\npublic class Address {\n  private String streetAddress;\n  private String city;\n  private String state;\n  private String zipCode;\n  private String country;\n}\n\npublic class Person {\n  private String name;\n  private Address address;\n  private String email;\n  private String phone;\n}",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class VehicleType(Enum):\n  CAR, TRUCK, ELECTRIC, VAN, MOTORBIKE = 1, 2, 3, 4, 5\n\n\nclass ParkingSpotType(Enum):\n  HANDICAPPED, COMPACT, LARGE, MOTORBIKE, ELECTRIC = 1, 2, 3, 4, 5\n\n\nclass AccountStatus(Enum):\n  ACTIVE, BLOCKED, BANNED, COMPROMISED, ARCHIVED, UNKNOWN = 1, 2, 3, 4, 5, 6\n\n\nclass ParkingTicketStatus(Enum):\n  ACTIVE, PAID, LOST = 1, 2, 3\n\n\nclass Address:\n  def __init__(self, street, city, state, zip_code, country):\n    self.__street_address = street\n    self.__city = city\n    self.__state = state\n    self.__zip_code = zip_code\n    self.__country = country\n\n\nclass Person():\n  def __init__(self, name, address, email, phone):\n    self.__name = name\n    self.__address = address\n    self.__email = email\n    self.__phone = phone\n",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "10e72269-b828-4cbd-b35d-f9b8f73ed92c"
                            },
                            "hash": "11",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Account, Admin, and ParkingAttendant:** These classes represent various people that interact with our system:",
                                "mdHtml": "<p><strong>Account, Admin, and ParkingAttendant:</strong> These classes represent various people that interact with our system:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "68d5bdd5-5687-476d-bf2c-abb50cb728d6"
                            },
                            "hash": "12",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "// For simplicity, we are not defining getter and setter functions. The reader can\n// assume that all class attributes are private and accessed through their respective\n// public getter methods and modified only through their public methods function.\n\npublic abstract class Account {\n  private String userName;\n  private String password;\n  private AccountStatus status;\n  private Person person;\n\n  public boolean resetPassword();\n}\n\npublic class Admin extends Account {\n  public bool addParkingFloor(ParkingFloor floor);\n  public bool addParkingSpot(String floorName, ParkingSpot spot);\n  public bool addParkingDisplayBoard(String floorName, ParkingDisplayBoard displayBoard);\n  public bool addCustomerInfoPanel(String floorName, CustomerInfoPanel infoPanel);\n\n  public bool addEntrancePanel(EntrancePanel entrancePanel);\n  public bool addExitPanel(ExitPanel exitPanel);\n}\n\npublic class ParkingAttendant extends Account {\n  public bool processTicket(string TicketNumber);\n}\n",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class Account:\n  def __init__(self, user_name, password, person, status=AccountStatus.Active):\n    self.__user_name = user_name\n    self.__password = password\n    self.__person = person\n    self.__status = status\n\n  def reset_password(self):\n    None\n\n\nclass Admin(Account):\n  def __init__(self, user_name, password, person, status=AccountStatus.Active):\n    super().__init__(user_name, password, person, status)\n\n  def add_parking_floor(self, floor):\n    None\n\n  def add_parking_spot(self, floor_name, spot):\n    None\n\n  def add_parking_display_board(self, floor_name, display_board):\n    None\n\n  def add_customer_info_panel(self, floor_name, info_panel):\n    None\n\n  def add_entrance_panel(self, entrance_panel):\n    None\n\n  def add_exit_panel(self, exit_panel):\n    None\n\n\nclass ParkingAttendant(Account):\n  def __init__(self, user_name, password, person, status=AccountStatus.Active):\n    super().__init__(user_name, password, person, status)\n\n  def process_ticket(self, ticket_number):\n    None\n",
                                        "entryFileName": "main.py",
                                        "onlyCodeChanged": true,
                                        "key": 1
                                    }
                                ],
                                "comp_id": "90bdf422-7036-4419-a165-3c874e365ab5"
                            },
                            "hash": "13",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**ParkingSpot:** Here is the definition of ParkingSpot and all of its children classes:",
                                "mdHtml": "<p><strong>ParkingSpot:</strong> Here is the definition of ParkingSpot and all of its children classes:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "ed98a665-0916-4909-9eba-9abf9c159d6d"
                            },
                            "hash": "14",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public abstract class ParkingSpot {\n  private String number;\n  private boolean free;\n  private Vehicle vehicle;\n  private final ParkingSpotType type;\n\n  public boolean IsFree();\n\n  public ParkingSpot(ParkingSpotType type) {\n    this.type = type;\n  }\n\n  public boolean assignVehicle(Vehicle vehicle) {\n    this.vehicle = vehicle;\n    free = false;\n  }\n\n  public boolean removeVehicle() {\n    this.vehicle = null;\n    free = true;\n  }\n}\n\npublic class HandicappedSpot extends ParkingSpot {\n  public HandicappedSpot() {\n    super(ParkingSpotType.HANDICAPPED);\n  }\n}\n\npublic class CompactSpot extends ParkingSpot {\n  public CompactSpot() {\n    super(ParkingSpotType.COMPACT);\n  }\n}\n\npublic class LargeSpot extends ParkingSpot {\n  public LargeSpot() {\n    super(ParkingSpotType.LARGE);\n  }\n}\n\npublic class MotorbikeSpot extends ParkingSpot {\n  public MotorbikeSpot() {\n    super(ParkingSpotType.MOTORBIKE);\n  }\n}\n\npublic class ElectricSpot extends ParkingSpot {\n  public ElectricSpot() {\n    super(ParkingSpotType.ELECTRIC);\n  }\n}",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class ParkingSpot(ABC):\n  def __init__(self, number, parking_spot_type):\n    self.__number = number\n    self.__free = True\n    self.__vehicle = None\n    self.__parking_spot_type = parking_spot_type\n\n  def is_free(self):\n    return self.__free\n\n  def assign_vehicle(self, vehicle):\n    self.__vehicle = vehicle\n    free = False\n\n  def remove_vehicle(self):\n    self.__vehicle = None\n    free = True\n\n\nclass HandicappedSpot(ParkingSpot):\n  def __init__(self, number):\n    super().__init__(number, ParkingSpotType.HANDICAPPED)\n\n\nclass CompactSpot(ParkingSpot):\n  def __init__(self, number):\n    super().__init__(number, ParkingSpotType.COMPACT)\n\n\nclass LargeSpot(ParkingSpot):\n  def __init__(self, number):\n    super().__init__(number, ParkingSpotType.LARGE)\n\n\nclass MotorbikeSpot(ParkingSpot):\n  def __init__(self, number):\n    super().__init__(number, ParkingSpotType.MOTORBIKE)\n\n\nclass ElectricSpot(ParkingSpot):\n  def __init__(self, number):\n    super().__init__(number, ParkingSpotType.ELECTRIC)\n",
                                        "entryFileName": "main.py",
                                        "onlyCodeChanged": true,
                                        "key": 1
                                    }
                                ],
                                "comp_id": "15eb31a6-7390-48c1-8d34-17d6aa7d551e"
                            },
                            "hash": "15",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Vehicle:** Here is the definition for Vehicle and all of its child classes:",
                                "mdHtml": "<p><strong>Vehicle:</strong> Here is the definition for Vehicle and all of its child classes:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "814fa64a-2275-49b3-9a43-bc9d37e3f78e"
                            },
                            "hash": "16",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public abstract class Vehicle {\n  private String licenseNumber;\n  private final VehicleType type;\n  private ParkingTicket ticket;\n\n  public Vehicle(VehicleType type) {\n    this.type = type;\n  }\n\n  public void assignTicket(ParkingTicket ticket) {\n    this.ticket = ticket;\n  }\n}\n\npublic class Car extends Vehicle {\n  public Car() {\n    super(VehicleType.CAR);\n  }\n}\n\npublic class Van extends Vehicle {\n  public Van() {\n    super(VehicleType.VAN);\n  }\n}\n\npublic class Truck extends Vehicle {\n  public Truck() {\n    super(VehicleType.TRUCK);\n  }\n}\n\n// Similarly we can define classes for Motorcycle and Electric vehicles\n",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "from abc import ABC, abstractmethod\n\nclass Vehicle(ABC):\n  def __init__(self, license_number, vehicle_type, ticket=None):\n    self.__license_number = license_number\n    self.__type = vehicle_type\n    self.__ticket = ticket\n\n  def assign_ticket(self, ticket):\n    self.__ticket = ticket\n\n\nclass Car(Vehicle):\n  def __init__(self, license_number, ticket=None):\n    super().__init__(license_number, VehicleType.CAR, ticket)\n\n\nclass Van(Vehicle):\n  def __init__(self, license_number, ticket=None):\n    super().__init__(license_number, VehicleType.VAN, ticket)\n\n\nclass Truck(Vehicle):\n  def __init__(self, license_number, ticket=None):\n    super().__init__(license_number, VehicleType.TRUCK, ticket)\n\n\n# Similarly we can define classes for Motorcycle and Electric vehicles",
                                        "entryFileName": "main.py",
                                        "onlyCodeChanged": true,
                                        "key": 1
                                    }
                                ],
                                "comp_id": "706d8aaf-8ec9-4cad-8511-4b38ae0f033d"
                            },
                            "hash": "17",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**ParkingFloor:** This class encapsulates a parking floor:",
                                "mdHtml": "<p><strong>ParkingFloor:</strong> This class encapsulates a parking floor:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "89e48c18-3f97-4dc2-a968-28bcb893bc2e"
                            },
                            "hash": "18",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "edit",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public class ParkingFloor {\n  private String name;\n  private HashMap<String, HandicappedSpot> handicappedSpots;\n  private HashMap<String, CompactSpot> compactSpots;\n  private HashMap<String, LargeSpot> largeSpots;\n  private HashMap<String, MotorbikeSpot> motorbikeSpots;\n  private HashMap<String, ElectricSpot> electricSpots;\n  private HashMap<String, CustomerInfoPortal> infoPortals;\n  private ParkingDisplayBoard displayBoard;\n\n  public ParkingFloor(String name) {\n    this.name = name;\n  }\n\n  public void addParkingSpot(ParkingSpot spot) {\n    switch (spot.getType()) {\n    case ParkingSpotType.HANDICAPPED:\n      handicappedSpots.put(spot.getNumber(), spot);\n      break;\n    case ParkingSpotType.COMPACT:\n      compactSpots.put(spot.getNumber(), spot);\n      break;\n    case ParkingSpotType.LARGE:\n      largeSpots.put(spot.getNumber(), spot);\n      break;\n    case ParkingSpotType.MOTORBIKE:\n      motorbikeSpots.put(spot.getNumber(), spot);\n      break;\n    case ParkingSpotType.ELECTRIC:\n      electricSpots.put(spot.getNumber(), spot);\n      break;\n    default:\n      print(\"Wrong parking spot type!\");\n    }\n  }\n\n  public void assignVehicleToSpot(Vehicle vehicle, ParkingSpot spot) {\n    spot.assignVehicle(vehicle);\n    switch (spot.getType()) {\n    case ParkingSpotType.HANDICAPPED:\n      updateDisplayBoardForHandicapped(spot);\n      break;\n    case ParkingSpotType.COMPACT:\n      updateDisplayBoardForCompact(spot);\n      break;\n    case ParkingSpotType.LARGE:\n      updateDisplayBoardForLarge(spot);\n      break;\n    case ParkingSpotType.MOTORBIKE:\n      updateDisplayBoardForMotorbike(spot);\n      break;\n    case ParkingSpotType.ELECTRIC:\n      updateDisplayBoardForElectric(spot);\n      break;\n    default:\n      print(\"Wrong parking spot type!\");\n    }\n  }\n\n  private void updateDisplayBoardForHandicapped(ParkingSpot spot) {\n    if (this.displayBoard.getHandicappedFreeSpot().getNumber() == spot.getNumber()) {\n      // find another free handicapped parking and assign to displayBoard\n      for (String key : handicappedSpots.keySet()) {\n        if (handicappedSpots.get(key).isFree()) {\n          this.displayBoard.setHandicappedFreeSpot(handicappedSpots.get(key));\n        }\n      }\n      this.displayBoard.showEmptySpotNumber();\n    }\n  }\n\n  private void updateDisplayBoardForCompact(ParkingSpot spot) {\n    if (this.displayBoard.getCompactFreeSpot().getNumber() == spot.getNumber()) {\n      // find another free compact parking and assign to displayBoard\n      for (String key : compactSpots.keySet()) {\n        if (compactSpots.get(key).isFree()) {\n          this.displayBoard.setCompactFreeSpot(compactSpots.get(key));\n        }\n      }\n      this.displayBoard.showEmptySpotNumber();\n    }\n  }\n\n  public void freeSpot(ParkingSpot spot) {\n    spot.removeVehicle();\n    switch (spot.getType()) {\n    case ParkingSpotType.HANDICAPPED:\n      freeHandicappedSpotCount++;\n      break;\n    case ParkingSpotType.COMPACT:\n      freeCompactSpotCount++;\n      break;\n    case ParkingSpotType.LARGE:\n      freeLargeSpotCount++;\n      break;\n    case ParkingSpotType.MOTORBIKE:\n      freeMotorbikeSpotCount++;\n      break;\n    case ParkingSpotType.ELECTRIC:\n      freeElectricSpotCount++;\n      break;\n    default:\n      print(\"Wrong parking spot type!\");\n    }\n  }\n}",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class ParkingFloor:\n  def __init__(self, name):\n    self.__name = name\n    self.__handicapped_spots = {}\n    self.__compact_spots = {}\n    self.__large_spots = {}\n    self.__motorbike_spots = {}\n    self.__electric_spots = {}\n    self.__info_portals = {}\n    self.__display_board = ParkingDisplayBoard()\n\n  def add_parking_spot(self, spot):\n    switcher = {\n      ParkingSpotType.HANDICAPPED: self.__handicapped_spots.put(spot.get_number(), spot),\n      ParkingSpotType.COMPACT: __compact_spots.put(spot.get_number(), spot),\n      ParkingSpotType.LARGE: __large_spots.put(spot.get_number(), spot),\n      ParkingSpotType.MOTORBIKE: __motorbike_spots.put(spot.get_number(), spot),\n      ParkingSpotType.ELECTRIC: __electric_spots.put(spot.get_number(), spot),\n    }\n    switcher.get(spot.get_type(), 'Wrong parking spot type')\n\n  def assign_vehicleToSpot(self, vehicle, spot):\n    spot.assign_vehicle(vehicle)\n    switcher = {\n      ParkingSpotType.HANDICAPPED: self.update_display_board_for_handicapped(spot),\n      ParkingSpotType.COMPACT: self.update_display_board_for_compact(spot),\n      ParkingSpotType.LARGE: self.update_display_board_for_large(spot),\n      ParkingSpotType.MOTORBIKE: self.update_display_board_for_motorbike(spot),\n      ParkingSpotType.ELECTRIC: self.update_display_board_for_electric(spot),\n    }\n    switcher(spot.get_type(), 'Wrong parking spot type!')\n\n  def update_display_board_for_handicapped(self, spot):\n    if self.__display_board.get_handicapped_free_spot().get_number() == spot.get_number():\n      # find another free handicapped parking and assign to display_board\n      for key in self.__handicapped_spots:\n        if self.__handicapped_spots.get(key).is_free():\n          self.__display_board.set_handicapped_free_spot(\n            self.__handicapped_spots.get(key))\n\n      self.__display_board.show_empty_spot_number()\n\n  def update_display_board_for_compact(self, spot):\n    if self.__display_board.get_compact_free_spot().get_number() == spot.get_number():\n      # find another free compact parking and assign to display_board\n      for key in self.__compact_spots.key_set():\n        if self.__compact_spots.get(key).is_free():\n          self.__display_board.set_compact_free_spot(\n            self.__compact_spots.get(key))\n\n      self.__display_board.show_empty_spot_number()\n\n  def free_spot(self, spot):\n    spot.remove_vehicle()\n    switcher = {\n      ParkingSpotType.HANDICAPPED: self.__free_handicapped_spot_count += 1,\n      ParkingSpotType.COMPACT: self.__free_compact_spot_count += 1,\n      ParkingSpotType.LARGE: self.__free_large_spot_count += 1,\n      ParkingSpotType.MOTORBIKE: self.__free_motorbike_spot_count += 1,\n      ParkingSpotType.ELECTRIC: self.__free_electric_spot_count += 1,\n    }\n\n    switcher(spot.get_type(), 'Wrong parking spot type!')",
                                        "entryFileName": "main.py",
                                        "onlyCodeChanged": true,
                                        "key": 1
                                    }
                                ],
                                "comp_id": "6f4bed3c-9ed3-446a-ba4e-ea478a8b1491"
                            },
                            "hash": "19",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**ParkingDisplayBoard:** This class encapsulates a parking display board:",
                                "mdHtml": "<p><strong>ParkingDisplayBoard:</strong> This class encapsulates a parking display board:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "644bda90-bbc7-4351-9be2-a40a67ffdc54"
                            },
                            "hash": "20",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public class ParkingDisplayBoard {\n  private String id;\n  private HandicappedSpot handicappedFreeSpot;\n  private CompactSpot compactFreeSpot;\n  private LargeSpot largeFreeSpot;\n  private MotorbikeSpot motorbikeFreeSpot;\n  private ElectricSpot electricFreeSpot;\n\n  public void showEmptySpotNumber() {\n    String message = \"\";\n    if(handicappedFreeSpot.IsFree()){\n      message += \"Free Handicapped: \" + handicappedFreeSpot.getNumber();\n    } else {\n      message += \"Handicapped is full\";\n    }\n    message += System.lineSeparator();\n\n    if(compactFreeSpot.IsFree()){\n      message += \"Free Compact: \" + compactFreeSpot.getNumber();\n    } else {\n      message += \"Compact is full\";\n    }\n    message += System.lineSeparator();\n\n    if(largeFreeSpot.IsFree()){\n      message += \"Free Large: \" + largeFreeSpot.getNumber();\n    } else {\n      message += \"Large is full\";\n    }\n    message += System.lineSeparator();\n\n    if(motorbikeFreeSpot.IsFree()){\n      message += \"Free Motorbike: \" + motorbikeFreeSpot.getNumber();\n    } else {\n      message += \"Motorbike is full\";\n    }\n    message += System.lineSeparator();\n\n    if(electricFreeSpot.IsFree()){\n      message += \"Free Electric: \" + electricFreeSpot.getNumber();\n    } else {\n      message += \"Electric is full\";\n    }\n\n    Show(message);\n  }\n}\n",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class ParkingDisplayBoard:\n  def __init__(self, id):\n    self.__id = id\n    self.__handicapped_free_spot = None\n    self.__compact_free_spot = None\n    self.__large_free_spot = None\n    self.__motorbike_free_spot = None\n    self.__electric_free_spot = None\n\n  def show_empty_spot_number(self):\n    message = \"\"\n    if self.__handicapped_free_spot.is_free():\n      message += \"Free Handicapped: \" + self.__handicapped_free_spot.get_number()\n    else:\n      message += \"Handicapped is full\"\n    message += \"\\n\"\n\n    if self.__compact_free_spot.is_free():\n      message += \"Free Compact: \" + self.__compact_free_spot.get_number()\n    else:\n      message += \"Compact is full\"\n    message += \"\\n\"\n\n    if self.__large_free_spot.is_free():\n      message += \"Free Large: \" + self.__large_free_spot.get_number()\n    else:\n      message += \"Large is full\"\n    message += \"\\n\"\n\n    if self.__motorbike_free_spot.is_free():\n      message += \"Free Motorbike: \" + self.__motorbike_free_spot.get_number()\n    else:\n      message += \"Motorbike is full\"\n    message += \"\\n\"\n\n    if self.__electric_free_spot.is_free():\n      message += \"Free Electric: \" + self.__electric_free_spot.get_number()\n    else:\n      message += \"Electric is full\"\n\n    print(message)",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "3ce559f7-124f-42d4-ba33-dff23bf7a165"
                            },
                            "hash": "21",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**ParkingLot:** Our system will have only one object of this class. This can be enforced by using the [Singleton](https://en.wikipedia.org/wiki/Singleton_pattern) pattern. In software engineering, the singleton pattern is a software design pattern that restricts the instantiation of a class to only one object. ",
                                "mdHtml": "<p><strong>ParkingLot:</strong> Our system will have only one object of this class. This can be enforced by using the <a href=\"https://en.wikipedia.org/wiki/Singleton_pattern\">Singleton</a> pattern. In software engineering, the singleton pattern is a software design pattern that restricts the instantiation of a class to only one object.</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "850b1c30-3cf8-4b35-bb31-6371a823a652"
                            },
                            "hash": "22",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public class ParkingLot {\n  private String name;\n  private Location address;\n  private ParkingRate parkingRate;\n\n  private int compactSpotCount;\n  private int largeSpotCount;\n  private int motorbikeSpotCount;\n  private int electricSpotCount;\n  private final int maxCompactCount;\n  private final int maxLargeCount;\n  private final int maxMotorbikeCount;\n  private final int maxElectricCount;\n\n  private HashMap<String, EntrancePanel> entrancePanels;\n  private HashMap<String, ExitPanel> exitPanels;\n  private HashMap<String, ParkingFloor> parkingFloors;\n\n  // all active parking tickets, identified by their ticketNumber\n  private HashMap<String, ParkingTicket> activeTickets;\n\n  // singleton ParkingLot to ensure only one object of ParkingLot in the system,\n  // all entrance panels will use this object to create new parking ticket: getNewParkingTicket(),\n  // similarly exit panels will also use this object to close parking tickets\n  private static ParkingLot parkingLot = null;\n\n  // private constructor to restrict for singleton\n  private ParkingLot() {\n    // 1. initialize variables: read name, address and parkingRate from database\n    // 2. initialize parking floors: read the parking floor map from database,\n    //  this map should tell how many parking spots are there on each floor. This\n    //  should also initialize max spot counts too.\n    // 3. initialize parking spot counts by reading all active tickets from database\n    // 4. initialize entrance and exit panels: read from database\n  }\n\n  // static method to get the singleton instance of ParkingLot\n  public static ParkingLot getInstance() {\n    if (parkingLot == null) {\n      parkingLot = new ParkingLot();\n    }\n    return parkingLot;\n  }\n\n  // note that the following method is 'synchronized' to allow multiple entrances\n  // panels to issue a new parking ticket without interfering with each other\n  public synchronized ParkingTicket getNewParkingTicket(Vehicle vehicle) throws ParkingFullException {\n    if (this.isFull(vehicle.getType())) {\n      throw new ParkingFullException();\n    }\n    ParkingTicket ticket = new ParkingTicket();\n    vehicle.assignTicket(ticket);\n    ticket.saveInDB();\n    // if the ticket is successfully saved in the database, we can increment the parking spot count\n    this.incrementSpotCount(vehicle.getType());\n    this.activeTickets.put(ticket.getTicketNumber(), ticket);\n    return ticket;\n  }\n\n  public boolean isFull(VehicleType type) {\n    // trucks and vans can only be parked in LargeSpot\n    if (type == VehicleType.Truck || type == VehicleType.Van) {\n      return largeSpotCount >= maxLargeCount;\n    }\n\n    // motorbikes can only be parked at motorbike spots\n    if (type == VehicleType.Motorbike) {\n      return motorbikeSpotCount >= maxMotorbikeCount;\n    }\n\n    // cars can be parked at compact or large spots\n    if (type == VehicleType.Car) {\n      return (compactSpotCount + largeSpotCount) >= (maxCompactCount + maxLargeCount);\n    }\n\n    // electric car can be parked at compact, large or electric spots\n    return (compactSpotCount + largeSpotCount + electricSpotCount) >= (maxCompactCount + maxLargeCount\n        + maxElectricCount);\n  }\n\n  // increment the parking spot count based on the vehicle type\n  private boolean incrementSpotCount(VehicleType type) {\n    if (type == VehicleType.Truck || type == VehicleType.Van) {\n      largeSpotCount++;\n    } else if (type == VehicleType.Motorbike) {\n      motorbikeSpotCount++;\n    } else if (type == VehicleType.Car) {\n      if (compactSpotCount < maxCompactCount) {\n        compactSpotCount++;\n      } else {\n        largeSpotCount++;\n      }\n    } else { // electric car\n      if (electricSpotCount < maxElectricCount) {\n        electricSpotCount++;\n      } else if (compactSpotCount < maxCompactCount) {\n        compactSpotCount++;\n      } else {\n        largeSpotCount++;\n      }\n    }\n  }\n\n  public boolean isFull() {\n    for (String key : parkingFloors.keySet()) {\n      if (!parkingFloors.get(key).isFull()) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public void addParkingFloor(ParkingFloor floor) {\n    /* store in database */ }\n\n  public void addEntrancePanel(EntrancePanel entrancePanel) {\n    /* store in database */ }\n\n  public void addExitPanel(ExitPanel exitPanel) {\n    /* store in database */ }\n}\n",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0,
                                        "onlyCodeChanged": true
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "import threading\n\nclass ParkingLot:\n  # singleton ParkingLot to ensure only one object of ParkingLot in the system,\n  # all entrance panels will use this object to create new parking ticket: get_new_parking_ticket(),\n  # similarly exit panels will also use this object to close parking tickets\n  instance = None\n\n  class __OnlyOne:\n    def __init__(self, name, address):\n      # 1. initialize variables: read name, address and parking_rate from database\n      # 2. initialize parking floors: read the parking floor map from database,\n      #    this map should tell how many parking spots are there on each floor. This\n      #    should also initialize max spot counts too.\n      # 3. initialize parking spot counts by reading all active tickets from database\n      # 4. initialize entrance and exit panels: read from database\n\n      self.__name = name\n      self.__address = address\n      self.__parking_rate = ParkingRate()\n\n      self.__compact_spot_count = 0\n      self.__large_spot_count = 0\n      self.__motorbike_spot_count = 0\n      self.__electric_spot_count = 0\n      self.__max_compact_count = 0\n      self.__max_large_count = 0\n      self.__max_motorbike_count = 0\n      self.__max_electric_count = 0\n\n      self.__entrance_panels = {}\n      self.__exit_panels = {}\n      self.__parking_floors = {}\n\n      # all active parking tickets, identified by their ticket_number\n      self.__active_tickets = {}\n\n      self.__lock = threading.Lock()\n\n  def __init__(self, name, address):\n    if not ParkingLot.instance:\n      ParkingLot.instance = ParkingLot.__OnlyOne(name, address)\n    else:\n      ParkingLot.instance.__name = name\n      ParkingLot.instance.__address = address\n\n  def __getattr__(self, name):\n    return getattr(self.instance, name)\n\n  def get_new_parking_ticket(self, vehicle):\n    if self.is_full(vehicle.get_type()):\n      raise Exception('Parking full!')\n    # synchronizing to allow multiple entrances panels to issue a new\n    # parking ticket without interfering with each other\n    self.__lock.acquire()\n    ticket = ParkingTicket()\n    vehicle.assign_ticket(ticket)\n    ticket.save_in_DB()\n    # if the ticket is successfully saved in the database, we can increment the parking spot count\n    self.__increment_spot_count(vehicle.get_type())\n    self.__active_tickets.put(ticket.get_ticket_number(), ticket)\n    self.__lock.release()\n    return ticket\n\n  def is_full(self, type):\n    # trucks and vans can only be parked in LargeSpot\n    if type == VehicleType.Truck or type == VehicleType.Van:\n      return self.__large_spot_count >= self.__max_large_count\n\n    # motorbikes can only be parked at motorbike spots\n    if type == VehicleType.Motorbike:\n      return self.__motorbike_spot_count >= self.__max_motorbike_count\n\n    # cars can be parked at compact or large spots\n    if type == VehicleType.Car:\n      return (self.__compact_spot_count + self.__large_spot_count) >= (self.__max_compact_count + self.__max_large_count)\n\n    # electric car can be parked at compact, large or electric spots\n    return (self.__compact_spot_count + self.__large_spot_count + self.__electric_spot_count) >= (self.__max_compact_count + self.__max_large_count\n                                                                                                  + self.__max_electric_count)\n\n  # increment the parking spot count based on the vehicle type\n  def increment_spot_count(self, type):\n    if type == VehicleType.Truck or type == VehicleType.Van:\n      large_spot_count += 1\n    elif type == VehicleType.Motorbike:\n      motorbike_spot_count += 1\n    elif type == VehicleType.Car:\n      if self.__compact_spot_count < self.__max_compact_count:\n        compact_spot_count += 1\n      else:\n        large_spot_count += 1\n    else:  # electric car\n      if self.__electric_spot_count < self.__max_electric_count:\n        electric_spot_count += 1\n      elif self.__compact_spot_count < self.__max_compact_count:\n        compact_spot_count += 1\n      else:\n        large_spot_count += 1\n\n  def is_full(self):\n    for key in self.__parking_floors:\n      if not self.__parking_floors.get(key).is_full():\n        return False\n    return True\n\n  def add_parking_floor(self, floor):\n    # store in database\n    None\n\n  def add_entrance_panel(self, entrance_panel):\n    # store in database\n    None\n\n  def add_exit_panel(self,  exit_panel):\n    # store in database\n    None\n",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "0af749cd-c661-44ae-84ce-f31d0aed9ba0"
                            },
                            "hash": "23",
                            "iteration": 1,
                            "saveVersion": 1
                        }
                    ],
                    "summary": {
                        "description": "Let's make an object-oriented design for a multi-floor parking lot.",
                        "title": "Design a Parking Lot",
                        "titleUpdated": true
                    }
                },
                {
                    "components": [
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "Amazon (amazon.com) is the world\u2019s largest online retailer. The company was originally a bookseller but has expanded to sell a wide variety of consumer goods and digital media. For the sake of this problem, we will focus on their online retail business where users can sell/buy their products.",
                                "mdHtml": "<p>Amazon (<a href=\"http://amazon.com\">amazon.com</a>) is the world\u2019s largest online retailer. The company was originally a bookseller but has expanded to sell a wide variety of consumer goods and digital media. For the sake of this problem, we will focus on their online retail business where users can sell/buy their products.</p>\n",
                                "comp_id": "c0042f66-fa4c-49ea-9e48-a015676e0691",
                                "cursorPosition": {
                                    "line": 27,
                                    "ch": 0,
                                    "sticky": "before",
                                    "xRel": 1
                                }
                            },
                            "hash": "1",
                            "iteration": 1,
                            "saveVersion": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5708573640228864,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 822,
                                    "height": 410,
                                    "sizeInBytes": 46457,
                                    "name": "amazon.png"
                                },
                                "comp_id": "d3baa834-56cf-4284-84c4-d91641912374"
                            },
                            "hash": "2",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## Requirements and Goals of the System\n\nWe will be designing a system with the following requirements:\n\n1. Users should be able to add new products to sell.\n2. Users should be able to search for products by their name or category.\n3. Users can search and view all the products, but they will have to become a registered member to buy a product. \n4. Users should be able to add/remove/modify product items in their shopping cart.\n5. Users can check out and buy items in the shopping cart.\n6. Users can rate and add a review for a product.\n7. The user should be able to specify a shipping address where their order will be delivered.\n8. Users can cancel an order if it has not shipped.\n9. Users should get notifications whenever there is a change in the order or shipping status.\n10. Users should be able to pay through credit cards or electronic bank transfer.\n11. Users should be able to track their shipment to see the current state of their order.\n\n## Use case Diagram\n\n\nWe have four main Actors in our system:\n\n* **Admin:** Mainly responsible for account management and adding or modifying new product categories.\n* **Guest:** All guests can search the catalog, add/remove items to the shopping cart, as well as become registered members.\n* **Member:** Members can perform all the activities that guests can, in addition to which, they can place orders and add new products to sell.\n* **System:** Mainly responsible for sending notifications for orders and shipping updates.\n\nHere are the top use cases of the Online Shopping System:\n\n1. Add/update products; whenever a product is added or modified, we will update the catalog.\n2. Search for products by their name or category.\n3. Add/remove product items in the shopping cart. \n4. Check-out to buy product items in the shopping cart.\n5. Make a payment to place an order.\n6. Add a new product category.\n7. Send notifications to members with shipment updates.",
                                "mdHtml": "<h2>Requirements and Goals of the System</h2>\n<p>We will be designing a system with the following requirements:</p>\n<ol>\n<li>Users should be able to add new products to sell.</li>\n<li>Users should be able to search for products by their name or category.</li>\n<li>Users can search and view all the products, but they will have to become a registered member to buy a product.</li>\n<li>Users should be able to add/remove/modify product items in their shopping cart.</li>\n<li>Users can check out and buy items in the shopping cart.</li>\n<li>Users can rate and add a review for a product.</li>\n<li>The user should be able to specify a shipping address where their order will be delivered.</li>\n<li>Users can cancel an order if it has not shipped.</li>\n<li>Users should get notifications whenever there is a change in the order or shipping status.</li>\n<li>Users should be able to pay through credit cards or electronic bank transfer.</li>\n<li>Users should be able to track their shipment to see the current state of their order.</li>\n</ol>\n<h2>Use case Diagram</h2>\n<p>We have four main Actors in our system:</p>\n<ul>\n<li><strong>Admin:</strong> Mainly responsible for account management and adding or modifying new product categories.</li>\n<li><strong>Guest:</strong> All guests can search the catalog, add/remove items to the shopping cart, as well as become registered members.</li>\n<li><strong>Member:</strong> Members can perform all the activities that guests can, in addition to which, they can place orders and add new products to sell.</li>\n<li><strong>System:</strong> Mainly responsible for sending notifications for orders and shipping updates.</li>\n</ul>\n<p>Here are the top use cases of the Online Shopping System:</p>\n<ol>\n<li>Add/update products; whenever a product is added or modified, we will update the catalog.</li>\n<li>Search for products by their name or category.</li>\n<li>Add/remove product items in the shopping cart.</li>\n<li>Check-out to buy product items in the shopping cart.</li>\n<li>Make a payment to place an order.</li>\n<li>Add a new product category.</li>\n<li>Send notifications to members with shipment updates.</li>\n</ol>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "105c9390-d5b3-4650-83b0-c895b0334c03"
                            },
                            "hash": "3",
                            "iteration": 2,
                            "saveVersion": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5680423082393600,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 926,
                                    "height": 904,
                                    "sizeInBytes": 38087,
                                    "name": "usecase(30).svg"
                                },
                                "comp_id": "fa73cfb8-615d-4ff4-8728-25decab9c4d4"
                            },
                            "hash": "4",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## Class diagram\n\nHere are the descriptions of the different classes of our Online Shopping System:\n\n* **Account:** There are two types of registered accounts in the system: one will be an Admin, who is responsible for adding new product categories and blocking/unblocking members; the other, a Member, who can buy/sell products.\n\n* **Guest:** Guests can search for and view products, and add them in the shopping cart. To place an order they have to become a registered member.\n\n* **Catalog:** Users of our system can search for products by their name or category. This class will keep an index of all products for faster search.\n\n* **ProductCategory:** This will encapsulate the different categories of products, such as books, electronics, etc. \n\n* **Product:** This class will encapsulate the entity that the users of our system will be buying and selling. Each Product will belong to a ProductCategory.\n\n* **ProductReview:** Any registered member can add a review about a product.\n\n* **ShoppingCart:** Users will add product items that they intend to buy to the shopping cart.\n\n* **Item:** This class will encapsulate a product item that the users will be buying or placing in the shopping cart. For example, a pen could be a product and if there are 10 pens in the inventory, each of these 10 pens will be considered a product item.\n\n* **Order:** This will encapsulate a buying order to buy everything in the shopping cart.\n\n* **OrderLog:** Will keep a track of the status of orders, such as unshipped, pending, complete, canceled, etc. \n\n* **ShipmentLog:** Will keep a track of the status of shipments, such as pending, shipped, delivered, etc. \n\n* **Notification:** This class will take care of sending notifications to customers.\n\n* **Payment:** This class will encapsulate the payment for an order. Members can pay through credit card or electronic bank transfer.",
                                "mdHtml": "<h2>Class diagram</h2>\n<p>Here are the descriptions of the different classes of our Online Shopping System:</p>\n<ul>\n<li>\n<p><strong>Account:</strong> There are two types of registered accounts in the system: one will be an Admin, who is responsible for adding new product categories and blocking/unblocking members; the other, a Member, who can buy/sell products.</p>\n</li>\n<li>\n<p><strong>Guest:</strong> Guests can search for and view products, and add them in the shopping cart. To place an order they have to become a registered member.</p>\n</li>\n<li>\n<p><strong>Catalog:</strong> Users of our system can search for products by their name or category. This class will keep an index of all products for faster search.</p>\n</li>\n<li>\n<p><strong>ProductCategory:</strong> This will encapsulate the different categories of products, such as books, electronics, etc.</p>\n</li>\n<li>\n<p><strong>Product:</strong> This class will encapsulate the entity that the users of our system will be buying and selling. Each Product will belong to a ProductCategory.</p>\n</li>\n<li>\n<p><strong>ProductReview:</strong> Any registered member can add a review about a product.</p>\n</li>\n<li>\n<p><strong>ShoppingCart:</strong> Users will add product items that they intend to buy to the shopping cart.</p>\n</li>\n<li>\n<p><strong>Item:</strong> This class will encapsulate a product item that the users will be buying or placing in the shopping cart. For example, a pen could be a product and if there are 10 pens in the inventory, each of these 10 pens will be considered a product item.</p>\n</li>\n<li>\n<p><strong>Order:</strong> This will encapsulate a buying order to buy everything in the shopping cart.</p>\n</li>\n<li>\n<p><strong>OrderLog:</strong> Will keep a track of the status of orders, such as unshipped, pending, complete, canceled, etc.</p>\n</li>\n<li>\n<p><strong>ShipmentLog:</strong> Will keep a track of the status of shipments, such as pending, shipped, delivered, etc.</p>\n</li>\n<li>\n<p><strong>Notification:</strong> This class will take care of sending notifications to customers.</p>\n</li>\n<li>\n<p><strong>Payment:</strong> This class will encapsulate the payment for an order. Members can pay through credit card or electronic bank transfer.</p>\n</li>\n</ul>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "52e565f7-2cd2-4d20-b071-0b88ac46dbff"
                            },
                            "hash": "5",
                            "iteration": 2,
                            "saveVersion": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 6293405585899520,
                                "style": "original",
                                "caption": "Class diagram for Online Shopping System",
                                "metadata": {
                                    "width": 1024,
                                    "height": 1164,
                                    "sizeInBytes": 276921,
                                    "name": "Online Shopping.png"
                                },
                                "comp_id": "0dd6741c-3b42-4dca-8bc3-5ea737652afa"
                            },
                            "hash": "6",
                            "iteration": 0
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 4587573546582016,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 571,
                                    "height": 511,
                                    "sizeInBytes": 25589,
                                    "name": "uml cheat sheet (1).svg"
                                },
                                "comp_id": "41c31b7c-9965-45bf-90c8-da4db5ae4e98"
                            },
                            "hash": "7",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## Activity Diagram\n\nFollowing is the activity diagram for a user performing online shopping:\n\n",
                                "mdHtml": "<h2>Activity Diagram</h2>\n<p>Following is the activity diagram for a user performing online shopping:</p>\n",
                                "cursorPosition": {
                                    "line": 4,
                                    "ch": 70,
                                    "sticky": null
                                },
                                "comp_id": "ad69fbf9-549d-469f-b4ee-e42f8973ee68"
                            },
                            "hash": "8",
                            "iteration": 2,
                            "saveVersion": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5761934313914368,
                                "style": "original",
                                "caption": "",
                                "metadata": {
                                    "width": 485,
                                    "height": 879,
                                    "sizeInBytes": 24598,
                                    "name": "Activity Diagram(3).svg"
                                },
                                "comp_id": "b3d0779e-82c6-4e1e-b667-26f616dc5afa"
                            },
                            "hash": "9",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## Sequence Diagram\n\n1) Here is the sequence diagram for searching from the catalog:",
                                "mdHtml": "<h2>Sequence Diagram</h2>\n<ol>\n<li>Here is the sequence diagram for searching from the catalog:</li>\n</ol>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 107,
                                    "sticky": null
                                },
                                "comp_id": "e45871c3-9e30-462f-b06f-dff4960f0de4"
                            },
                            "hash": "10",
                            "iteration": 2,
                            "saveVersion": 1
                        },
                        {
                            "type": "SequenceDiagrams",
                            "mode": "view",
                            "content": {
                                "version": "1.0",
                                "caption": "",
                                "text": "Title: Search Catalog\nCustomer->Catalog: searchProducts(string)\nCatalog->Product: getInfo(string)\nProduct-->Catalog: Full Product Info\nCatalog-->Customer: Matching Products Info",
                                "svg_string": "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?><!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 20010904//EN\" \"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"546\" height=\"316\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><source><![CDATA[Title: Search Catalog\nCustomer->Catalog: searchProducts(string)\nCatalog->Product: getInfo(string)\nProduct-->Catalog: Full Product Info\nCatalog-->Customer: Matching Products Info]]></source><desc>Search Catalog</desc><defs><marker viewBox=\"0 0 5 5\" markerWidth=\"5\" markerHeight=\"5\" orient=\"auto\" refX=\"5\" refY=\"2.5\" id=\"markerArrowBlock\"><path d=\"M 0 0 L 5 2.5 L 0 5 z\"></path></marker><marker viewBox=\"0 0 9.6 16\" markerWidth=\"4\" markerHeight=\"16\" orient=\"auto\" refX=\"9.6\" refY=\"8\" id=\"markerArrowOpen\"><path d=\"M 9.6,8 1.92,16 0,13.7 5.76,8 0,2.286 1.92,0 9.6,8 z\"></path></marker></defs><g class=\"title\"><rect x=\"10\" y=\"10\" width=\"144.421875\" height=\"28\" stroke=\"#000000\" fill=\"#ffffff\" style=\"stroke-width: 2;\"></rect><text x=\"15\" y=\"29.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"15\">Search Catalog</tspan></text></g><g class=\"actor\"><rect x=\"10\" y=\"48\" width=\"96.8125\" height=\"38\" stroke=\"#000000\" fill=\"#ffffff\" style=\"stroke-width: 2;\"></rect><text x=\"20\" y=\"72.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"20\">Customer</tspan></text></g><g class=\"actor\"><rect x=\"10\" y=\"258\" width=\"96.8125\" height=\"38\" stroke=\"#000000\" fill=\"#ffffff\" style=\"stroke-width: 2;\"></rect><text x=\"20\" y=\"282.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"20\">Customer</tspan></text></g><line x1=\"58.40625\" x2=\"58.40625\" y1=\"86\" y2=\"258\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2;\"></line><g class=\"actor\"><rect x=\"246.0390625\" y=\"48\" width=\"87.203125\" height=\"38\" stroke=\"#000000\" fill=\"#ffffff\" style=\"stroke-width: 2;\"></rect><text x=\"256.0390625\" y=\"72.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"256.0390625\">Catalog</tspan></text></g><g class=\"actor\"><rect x=\"246.0390625\" y=\"258\" width=\"87.203125\" height=\"38\" stroke=\"#000000\" fill=\"#ffffff\" style=\"stroke-width: 2;\"></rect><text x=\"256.0390625\" y=\"282.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"256.0390625\">Catalog</tspan></text></g><line x1=\"289.640625\" x2=\"289.640625\" y1=\"86\" y2=\"258\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2;\"></line><g class=\"actor\"><rect x=\"429.2578125\" y=\"48\" width=\"87.203125\" height=\"38\" stroke=\"#000000\" fill=\"#ffffff\" style=\"stroke-width: 2;\"></rect><text x=\"439.2578125\" y=\"72.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"439.2578125\">Product</tspan></text></g><g class=\"actor\"><rect x=\"429.2578125\" y=\"258\" width=\"87.203125\" height=\"38\" stroke=\"#000000\" fill=\"#ffffff\" style=\"stroke-width: 2;\"></rect><text x=\"439.2578125\" y=\"282.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"439.2578125\">Product</tspan></text></g><line x1=\"472.859375\" x2=\"472.859375\" y1=\"86\" y2=\"258\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2;\"></line><g class=\"signal\"><text x=\"68.40625\" y=\"116.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"68.40625\">searchProducts(string)</tspan></text><line x1=\"58.40625\" x2=\"289.640625\" y1=\"124\" y2=\"124\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2; marker-end: url(&quot;#markerArrowBlock&quot;);\"></line></g><g class=\"signal\"><text x=\"309.2421875\" y=\"154.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"309.2421875\">getInfo(string)</tspan></text><line x1=\"289.640625\" x2=\"472.859375\" y1=\"162\" y2=\"162\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2; marker-end: url(&quot;#markerArrowBlock&quot;);\"></line></g><g class=\"signal\"><text x=\"299.640625\" y=\"192.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"299.640625\">Full Product Info</tspan></text><line x1=\"472.859375\" x2=\"289.640625\" y1=\"200\" y2=\"200\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2; stroke-dasharray: 6, 2; marker-end: url(&quot;#markerArrowBlock&quot;);\"></line></g><g class=\"signal\"><text x=\"68.40625\" y=\"230.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"68.40625\">Matching Products Info</tspan></text><line x1=\"289.640625\" x2=\"58.40625\" y1=\"238\" y2=\"238\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2; stroke-dasharray: 6, 2; marker-end: url(&quot;#markerArrowBlock&quot;);\"></line></g></svg>",
                                "diagram_type": "simple",
                                "comp_id": "1f977e09-9a2f-42f3-9b5f-9f092f58097d"
                            },
                            "hash": "11",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "2) Here is the sequence diagram for adding an item to the shopping cart:",
                                "mdHtml": "<ol start=\"2\">\n<li>Here is the sequence diagram for adding an item to the shopping cart:</li>\n</ol>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "0ad14493-2faf-4e07-b629-ad7dc6f5a91c"
                            },
                            "hash": "12",
                            "iteration": 0
                        },
                        {
                            "type": "SequenceDiagrams",
                            "mode": "view",
                            "content": {
                                "version": "1.0",
                                "caption": "",
                                "text": "Title: Add Items in the ShoppingCart\nCustomer->ShoppingCart: addItem(productId, quantity)\nShoppingCart-->Customer: Error (e.g. Out of Stock)\nShoppingCart->Item: verifyItem()\nItem->ShoppingCart: Verification Status\nShoppingCart-->Customer: Operation success/fail",
                                "svg_string": "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?><!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 20010904//EN\" \"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"608\" height=\"355\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><source><![CDATA[Title: Add Items in the ShoppingCart\nCustomer->ShoppingCart: addItem(productId, quantity)\nShoppingCart-->Customer: Error (e.g. Out of Stock)\nShoppingCart->Item: verifyItem()\nItem->ShoppingCart: Verification Status\nShoppingCart-->Customer: Operation success/fail]]></source><desc>Add Items in the ShoppingCart</desc><defs><marker viewBox=\"0 0 5 5\" markerWidth=\"5\" markerHeight=\"5\" orient=\"auto\" refX=\"5\" refY=\"2.5\" id=\"markerArrowBlock\"><path d=\"M 0 0 L 5 2.5 L 0 5 z\"></path></marker><marker viewBox=\"0 0 9.6 16\" markerWidth=\"4\" markerHeight=\"16\" orient=\"auto\" refX=\"9.6\" refY=\"8\" id=\"markerArrowOpen\"><path d=\"M 9.6,8 1.92,16 0,13.7 5.76,8 0,2.286 1.92,0 9.6,8 z\"></path></marker></defs><g class=\"title\"><rect x=\"10\" y=\"10\" width=\"288.4375\" height=\"28.21875\" stroke=\"#000000\" fill=\"#ffffff\" style=\"stroke-width: 2;\"></rect><text x=\"15\" y=\"30\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"15\">Add Items in the ShoppingCart</tspan></text></g><g class=\"actor\"><rect x=\"10\" y=\"48.21875\" width=\"96.8125\" height=\"38.21875\" stroke=\"#000000\" fill=\"#ffffff\" style=\"stroke-width: 2;\"></rect><text x=\"20\" y=\"73.328125\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"20\">Customer</tspan></text></g><g class=\"actor\"><rect x=\"10\" y=\"297.3125\" width=\"96.8125\" height=\"38.21875\" stroke=\"#000000\" fill=\"#ffffff\" style=\"stroke-width: 2;\"></rect><text x=\"20\" y=\"322.421875\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"20\">Customer</tspan></text></g><line x1=\"58.40625\" x2=\"58.40625\" y1=\"86.4375\" y2=\"297.3125\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2;\"></line><g class=\"actor\"><rect x=\"279.640625\" y=\"48.21875\" width=\"135.21875\" height=\"38.21875\" stroke=\"#000000\" fill=\"#ffffff\" style=\"stroke-width: 2;\"></rect><text x=\"289.640625\" y=\"73.21875\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"289.640625\">ShoppingCart</tspan></text></g><g class=\"actor\"><rect x=\"279.640625\" y=\"297.3125\" width=\"135.21875\" height=\"38.21875\" stroke=\"#000000\" fill=\"#ffffff\" style=\"stroke-width: 2;\"></rect><text x=\"289.640625\" y=\"322.3125\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"289.640625\">ShoppingCart</tspan></text></g><line x1=\"347.25\" x2=\"347.25\" y1=\"86.4375\" y2=\"297.3125\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2;\"></line><g class=\"actor\"><rect x=\"520.46875\" y=\"48.21875\" width=\"58.40625\" height=\"38.21875\" stroke=\"#000000\" fill=\"#ffffff\" style=\"stroke-width: 2;\"></rect><text x=\"530.46875\" y=\"73.328125\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"530.46875\">Item</tspan></text></g><g class=\"actor\"><rect x=\"520.46875\" y=\"297.3125\" width=\"58.40625\" height=\"38.21875\" stroke=\"#000000\" fill=\"#ffffff\" style=\"stroke-width: 2;\"></rect><text x=\"530.46875\" y=\"322.421875\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"530.46875\">Item</tspan></text></g><line x1=\"549.671875\" x2=\"549.671875\" y1=\"86.4375\" y2=\"297.3125\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2;\"></line><g class=\"signal\"><text x=\"68.40625\" y=\"117.328125\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"68.40625\">addItem(productId, quantity)</tspan></text><line x1=\"58.40625\" x2=\"347.25\" y1=\"124.65625\" y2=\"124.65625\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2; marker-end: url(&quot;#markerArrowBlock&quot;);\"></line></g><g class=\"signal\"><text x=\"82.8125\" y=\"155.546875\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"82.8125\">Error (e.g. Out of Stock)</tspan></text><line x1=\"347.25\" x2=\"58.40625\" y1=\"162.875\" y2=\"162.875\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2; stroke-dasharray: 6, 2; marker-end: url(&quot;#markerArrowBlock&quot;);\"></line></g><g class=\"signal\"><text x=\"390.8515625\" y=\"193.765625\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"390.8515625\">verifyItem()</tspan></text><line x1=\"347.25\" x2=\"549.671875\" y1=\"201.09375\" y2=\"201.09375\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2; marker-end: url(&quot;#markerArrowBlock&quot;);\"></line></g><g class=\"signal\"><text x=\"357.25\" y=\"232.09375\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"357.25\">Verification Status</tspan></text><line x1=\"549.671875\" x2=\"347.25\" y1=\"239.09375\" y2=\"239.09375\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2; marker-end: url(&quot;#markerArrowBlock&quot;);\"></line></g><g class=\"signal\"><text x=\"97.2109375\" y=\"269.984375\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"97.2109375\">Operation success/fail</tspan></text><line x1=\"347.25\" x2=\"58.40625\" y1=\"277.3125\" y2=\"277.3125\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2; stroke-dasharray: 6, 2; marker-end: url(&quot;#markerArrowBlock&quot;);\"></line></g></svg>",
                                "diagram_type": "simple",
                                "comp_id": "efd5e7a3-8243-4b77-95e1-ed542b5049c8"
                            },
                            "hash": "13",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "3) Here is the sequence diagram for checking out to place an order:",
                                "mdHtml": "<ol start=\"3\">\n<li>Here is the sequence diagram for checking out to place an order:</li>\n</ol>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "a6de90a3-16e4-453c-a588-e9c45007facd"
                            },
                            "hash": "14",
                            "iteration": 0
                        },
                        {
                            "type": "SequenceDiagrams",
                            "mode": "view",
                            "content": {
                                "version": "1.0",
                                "caption": "",
                                "text": "Title: Checkout and Place an Order\nCustomer->ShoppingCart: getItems()\nShoppingCart-->Customer: Items\nCustomer->Customer: getBillingInfo()\nCustomer->Customer: getShippingInfo()\nCustomer->Order: createOrder(Items, billingInfo, address)\nOrder->Item: verifyItem()\nItem-->Order: verification Status\nOrder-->Customer: Error (e.g Item not available)\nOrder->Payment: processPayment(billingInfo, amount)\nPayment-->Order: paymentStatus\nOrder-->Customer: Error (e.g. Payment failed)\nOrder->Shipment: processShipment(address)\nShipment-->Order: Shipment Status\nOrder-->Customer: Order Status\n\n",
                                "svg_string": "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?><!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 20010904//EN\" \"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1008\" height=\"696\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><source><![CDATA[Title: Checkout and Place an Order\nCustomer->ShoppingCart: getItems()\nShoppingCart-->Customer: Items\nCustomer->Customer: getBillingInfo()\nCustomer->Customer: getShippingInfo()\nCustomer->Order: createOrder(Items, billingInfo, address)\nOrder->Item: verifyItem()\nItem-->Order: verification Status\nOrder-->Customer: Error (e.g Item not available)\nOrder->Payment: processPayment(billingInfo, amount)\nPayment-->Order: paymentStatus\nOrder-->Customer: Error (e.g. Payment failed)\nOrder->Shipment: processShipment(address)\nShipment-->Order: Shipment Status\nOrder-->Customer: Order Status\n\n]]></source><desc>Checkout and Place an Order</desc><defs><marker viewBox=\"0 0 5 5\" markerWidth=\"5\" markerHeight=\"5\" orient=\"auto\" refX=\"5\" refY=\"2.5\" id=\"markerArrowBlock\"><path d=\"M 0 0 L 5 2.5 L 0 5 z\"></path></marker><marker viewBox=\"0 0 9.6 16\" markerWidth=\"4\" markerHeight=\"16\" orient=\"auto\" refX=\"9.6\" refY=\"8\" id=\"markerArrowOpen\"><path d=\"M 9.6,8 1.92,16 0,13.7 5.76,8 0,2.286 1.92,0 9.6,8 z\"></path></marker></defs><g class=\"title\"><rect x=\"10\" y=\"10\" width=\"269.234375\" height=\"28\" stroke=\"#000000\" fill=\"#ffffff\" style=\"stroke-width: 2;\"></rect><text x=\"15\" y=\"29.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"15\">Checkout and Place an Order</tspan></text></g><g class=\"actor\"><rect x=\"10\" y=\"48\" width=\"96.8125\" height=\"38\" stroke=\"#000000\" fill=\"#ffffff\" style=\"stroke-width: 2;\"></rect><text x=\"20\" y=\"72.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"20\">Customer</tspan></text></g><g class=\"actor\"><rect x=\"10\" y=\"638\" width=\"96.8125\" height=\"38\" stroke=\"#000000\" fill=\"#ffffff\" style=\"stroke-width: 2;\"></rect><text x=\"20\" y=\"662.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"20\">Customer</tspan></text></g><line x1=\"58.40625\" x2=\"58.40625\" y1=\"86\" y2=\"638\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2;\"></line><g class=\"actor\"><rect x=\"194.015625\" y=\"48\" width=\"135.21875\" height=\"38\" stroke=\"#000000\" fill=\"#ffffff\" style=\"stroke-width: 2;\"></rect><text x=\"204.015625\" y=\"72.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"204.015625\">ShoppingCart</tspan></text></g><g class=\"actor\"><rect x=\"194.015625\" y=\"638\" width=\"135.21875\" height=\"38\" stroke=\"#000000\" fill=\"#ffffff\" style=\"stroke-width: 2;\"></rect><text x=\"204.015625\" y=\"662.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"204.015625\">ShoppingCart</tspan></text></g><line x1=\"261.625\" x2=\"261.625\" y1=\"86\" y2=\"638\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2;\"></line><g class=\"actor\"><rect x=\"428.46875\" y=\"48\" width=\"68\" height=\"38\" stroke=\"#000000\" fill=\"#ffffff\" style=\"stroke-width: 2;\"></rect><text x=\"438.46875\" y=\"72.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"438.46875\">Order</tspan></text></g><g class=\"actor\"><rect x=\"428.46875\" y=\"638\" width=\"68\" height=\"38\" stroke=\"#000000\" fill=\"#ffffff\" style=\"stroke-width: 2;\"></rect><text x=\"438.46875\" y=\"662.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"438.46875\">Order</tspan></text></g><line x1=\"462.46875\" x2=\"462.46875\" y1=\"86\" y2=\"638\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2;\"></line><g class=\"actor\"><rect x=\"635.6875\" y=\"48\" width=\"58.40625\" height=\"38\" stroke=\"#000000\" fill=\"#ffffff\" style=\"stroke-width: 2;\"></rect><text x=\"645.6875\" y=\"72.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"645.6875\">Item</tspan></text></g><g class=\"actor\"><rect x=\"635.6875\" y=\"638\" width=\"58.40625\" height=\"38\" stroke=\"#000000\" fill=\"#ffffff\" style=\"stroke-width: 2;\"></rect><text x=\"645.6875\" y=\"662.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"645.6875\">Item</tspan></text></g><line x1=\"664.890625\" x2=\"664.890625\" y1=\"86\" y2=\"638\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2;\"></line><g class=\"actor\"><rect x=\"774.9140625\" y=\"48\" width=\"87.203125\" height=\"38\" stroke=\"#000000\" fill=\"#ffffff\" style=\"stroke-width: 2;\"></rect><text x=\"784.9140625\" y=\"72.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"784.9140625\">Payment</tspan></text></g><g class=\"actor\"><rect x=\"774.9140625\" y=\"638\" width=\"87.203125\" height=\"38\" stroke=\"#000000\" fill=\"#ffffff\" style=\"stroke-width: 2;\"></rect><text x=\"784.9140625\" y=\"662.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"784.9140625\">Payment</tspan></text></g><line x1=\"818.515625\" x2=\"818.515625\" y1=\"86\" y2=\"638\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2;\"></line><g class=\"actor\"><rect x=\"882.1171875\" y=\"48\" width=\"96.8125\" height=\"38\" stroke=\"#000000\" fill=\"#ffffff\" style=\"stroke-width: 2;\"></rect><text x=\"892.1171875\" y=\"72.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"892.1171875\">Shipment</tspan></text></g><g class=\"actor\"><rect x=\"882.1171875\" y=\"638\" width=\"96.8125\" height=\"38\" stroke=\"#000000\" fill=\"#ffffff\" style=\"stroke-width: 2;\"></rect><text x=\"892.1171875\" y=\"662.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"892.1171875\">Shipment</tspan></text></g><line x1=\"930.5234375\" x2=\"930.5234375\" y1=\"86\" y2=\"638\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2;\"></line><g class=\"signal\"><text x=\"112.0078125\" y=\"116.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"112.0078125\">getItems()</tspan></text><line x1=\"58.40625\" x2=\"261.625\" y1=\"124\" y2=\"124\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2; marker-end: url(&quot;#markerArrowBlock&quot;);\"></line></g><g class=\"signal\"><text x=\"136.015625\" y=\"154.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"136.015625\">Items</tspan></text><line x1=\"261.625\" x2=\"58.40625\" y1=\"162\" y2=\"162\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2; stroke-dasharray: 6, 2; marker-end: url(&quot;#markerArrowBlock&quot;);\"></line></g><g class=\"signal\"><text x=\"83.40625\" y=\"196\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"83.40625\">getBillingInfo()</tspan></text><line x1=\"58.40625\" x2=\"78.40625\" y1=\"182\" y2=\"182\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2;\"></line><line x1=\"78.40625\" x2=\"78.40625\" y1=\"182\" y2=\"205\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2;\"></line><line x1=\"78.40625\" x2=\"58.40625\" y1=\"205\" y2=\"205\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2; marker-end: url(&quot;#markerArrowBlock&quot;);\"></line></g><g class=\"signal\"><text x=\"83.40625\" y=\"234\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"83.40625\">getShippingInfo()</tspan></text><line x1=\"58.40625\" x2=\"78.40625\" y1=\"220\" y2=\"220\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2;\"></line><line x1=\"78.40625\" x2=\"78.40625\" y1=\"220\" y2=\"243\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2;\"></line><line x1=\"78.40625\" x2=\"58.40625\" y1=\"243\" y2=\"243\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2; marker-end: url(&quot;#markerArrowBlock&quot;);\"></line></g><g class=\"signal\"><text x=\"68.40625\" y=\"268.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"68.40625\">createOrder(Items, billingInfo, address)</tspan></text><line x1=\"58.40625\" x2=\"462.46875\" y1=\"276\" y2=\"276\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2; marker-end: url(&quot;#markerArrowBlock&quot;);\"></line></g><g class=\"signal\"><text x=\"506.0703125\" y=\"306.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"506.0703125\">verifyItem()</tspan></text><line x1=\"462.46875\" x2=\"664.890625\" y1=\"314\" y2=\"314\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2; marker-end: url(&quot;#markerArrowBlock&quot;);\"></line></g><g class=\"signal\"><text x=\"472.46875\" y=\"344.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"472.46875\">verification Status</tspan></text><line x1=\"664.890625\" x2=\"462.46875\" y1=\"352\" y2=\"352\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2; stroke-dasharray: 6, 2; marker-end: url(&quot;#markerArrowBlock&quot;);\"></line></g><g class=\"signal\"><text x=\"116.4140625\" y=\"382.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"116.4140625\">Error (e.g Item not available)</tspan></text><line x1=\"462.46875\" x2=\"58.40625\" y1=\"390\" y2=\"390\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2; stroke-dasharray: 6, 2; marker-end: url(&quot;#markerArrowBlock&quot;);\"></line></g><g class=\"signal\"><text x=\"472.46875\" y=\"420.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"472.46875\">processPayment(billingInfo, amount)</tspan></text><line x1=\"462.46875\" x2=\"818.515625\" y1=\"428\" y2=\"428\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2; marker-end: url(&quot;#markerArrowBlock&quot;);\"></line></g><g class=\"signal\"><text x=\"578.0859375\" y=\"458.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"578.0859375\">paymentStatus</tspan></text><line x1=\"818.515625\" x2=\"462.46875\" y1=\"466\" y2=\"466\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2; stroke-dasharray: 6, 2; marker-end: url(&quot;#markerArrowBlock&quot;);\"></line></g><g class=\"signal\"><text x=\"130.8203125\" y=\"496.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"130.8203125\">Error (e.g. Payment failed)</tspan></text><line x1=\"462.46875\" x2=\"58.40625\" y1=\"504\" y2=\"504\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2; stroke-dasharray: 6, 2; marker-end: url(&quot;#markerArrowBlock&quot;);\"></line></g><g class=\"signal\"><text x=\"581.27734375\" y=\"534.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"581.27734375\">processShipment(address)</tspan></text><line x1=\"462.46875\" x2=\"930.5234375\" y1=\"542\" y2=\"542\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2; marker-end: url(&quot;#markerArrowBlock&quot;);\"></line></g><g class=\"signal\"><text x=\"624.48828125\" y=\"572.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"624.48828125\">Shipment Status</tspan></text><line x1=\"930.5234375\" x2=\"462.46875\" y1=\"580\" y2=\"580\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2; stroke-dasharray: 6, 2; marker-end: url(&quot;#markerArrowBlock&quot;);\"></line></g><g class=\"signal\"><text x=\"202.828125\" y=\"610.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"202.828125\">Order Status</tspan></text><line x1=\"462.46875\" x2=\"58.40625\" y1=\"618\" y2=\"618\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2; stroke-dasharray: 6, 2; marker-end: url(&quot;#markerArrowBlock&quot;);\"></line></g></svg>",
                                "diagram_type": "simple",
                                "comp_id": "d10e44d6-ef02-40f5-93bb-e3ca31f66a73"
                            },
                            "hash": "15",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## Code\n\nHere is the high-level definition for the classes described above.\n\n**Enums, data types, and constants:** Here are the required enums, data types, and constants:",
                                "mdHtml": "<h2>Code</h2>\n<p>Here is the high-level definition for the classes described above.</p>\n<p><strong>Enums, data types, and constants:</strong> Here are the required enums, data types, and constants:</p>\n",
                                "cursorPosition": 7,
                                "comp_id": "f87af90d-e0b1-485f-9cd8-c7ec92acebf4"
                            },
                            "hash": "16",
                            "iteration": 1,
                            "saveVersion": 1
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public class Address {\n  private String streetAddress;\n  private String city;\n  private String state;\n  private String zipCode;\n  private String country;\n}\n\npublic enum OrderStatus {\n  UNSHIPPED, PENDING, SHIPPED, COMPLETED, CANCELED, REFUND_APPLIED\n}\n\npublic enum AccountStatus {\n  ACTIVE, BLOCKED, BANNED, COMPROMISED, ARCHIVED, UNKNOWN\n}\n\npublic enum ShipmentStatus {\n  PENDING, SHIPPED, DELIVERED, ON_HOLD,\n}\n\npublic enum PaymentStatus {\n  UNPAID, PENDING, COMPLETED, FILLED, DECLINED, CANCELLED, ABANDONED, SETTLING, SETTLED, REFUNDED\n}",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class Address:\n  def __init__(self, street, city, state, zip_code, country):\n    self.__street_address = street\n    self.__city = city\n    self.__state = state\n    self.__zip_code = zip_code\n    self.__country = country\n\n\nclass OrderStatus(Enum):\n  UNSHIPPED, PENDING, SHIPPED, COMPLETED, CANCELED, REFUND_APPLIED = 1, 2, 3, 4, 5, 6\n\n\nclass AccountStatus(Enum):\n  ACTIVE, BLOCKED, BANNED, COMPROMISED, ARCHIVED, UNKNOWN = 1, 2, 3, 4, 5, 6\n\n\nclass ShipmentStatus(Enum):\n  PENDING, SHIPPED, DELIVERED, ON_HOLD = 1, 2, 3, 4\n\n\nclass PaymentStatus(Enum):\n  UNPAID, PENDING, COMPLETED, FILLED, DECLINED, CANCELLED, ABANDONED, SETTLING, SETTLED, REFUNDED = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "f1f026e3-f02e-4e9f-bab5-8f77a6bb072e"
                            },
                            "hash": "17",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Account, Customer, Admin, and Guest:** These classes represent different people that interact with our system:",
                                "mdHtml": "<p><strong>Account, Customer, Admin, and Guest:</strong> These classes represent different people that interact with our system:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "87cb39e8-7fd8-429a-b108-8dd40558ce72"
                            },
                            "hash": "18",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "// For simplicity, we are not defining getter and setter functions. The reader can\n// assume that all class attributes are private and accessed through their respective\n// public getter methods and modified only through their public methods function.\n\npublic class Account {\n  private String userName;\n  private String password;\n  private AccountStatus status;\n  private String name;\n  private Address shippingAddress;\n  private String email;\n  private String phone;\n\n  private List<CreditCard> creditCards;\n  private List<ElectronicBankTransfer> bankAccounts;\n\n  public boolean addProduct(Product product);\n  public boolean addProductReview(ProductReview review);\n  public boolean resetPassword();\n}\n\npublic abstract class Customer {\n  private ShoppingCart cart;\n  private Order order;\n\n  public ShoppingCart getShoppingCart();\n  public bool addItemToCart(Item item);\n  public bool removeItemFromCart(Item item);\n}\n\npublic class Guest extends Customer {\n  public bool registerAccount();\n}\n\npublic class Member extends Customer {\n  private Account account;\n  public OrderStatus placeOrder(Order order);\n}",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "# For simplicity, we are not defining getter and setter functions. The reader can\n# assume that all class attributes are private and accessed through their respective\n# public getter methods and modified only through their public methods function.\n\n\nclass Account:\n  def __init__(self, user_name, password, name, email, phone, shipping_address, status=AccountStatus):\n    self.__user_name = user_name\n    self.__password = password\n    self.__name = name\n    self.__email = email\n    self.__phone = phone\n    self.__shipping_address = shipping_address\n    self.__status = status.ACTIVE\n    self.__credit_cards = []\n    self.__bank_accounts = []\n\n  def add_product(self, product):\n    None\n\n  def add_productReview(self, review):\n    None\n\n  def reset_password(self):\n    None\n\n\nfrom abc import ABC, abstractmethod\n\nclass Customer(ABC):\n  def __init__(self, cart, order):\n    self.__cart = cart\n    self.__order = order\n\n  def get_shopping_cart(self):\n    return self.__cart\n\n  def add_item_to_cart(self, item):\n    None\n\n  def remove_item_from_cart(self, item):\n    None\n\n\nclass Guest(Customer):\n  def register_account(self):\n    None\n\n\nclass Member(Customer):\n  def __init__(self, account):\n    self.__account = account\n\n  def place_order(self, order):\n    None\n",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "b31b4432-e9e5-4ad6-9a92-c7840c246015"
                            },
                            "hash": "19",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**ProductCategory, Product, and ProductReview:** Here are the classes related to a product:",
                                "mdHtml": "<p><strong>ProductCategory, Product, and ProductReview:</strong> Here are the classes related to a product:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "65785615-8489-477f-818b-b895c07c6c9c"
                            },
                            "hash": "20",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public class ProductCategory {\n  private String name;\n  private String description;\n}\n\npublic class ProductReview {\n  private int rating;\n  private String review;\n\n  private Member reviewer;\n}\n\npublic class Product {\n  private String productID;\n  private String name;\n  private String description;\n  private double price;\n  private ProductCategory category;\n  private int availableItemCount;\n\n  private Account seller;\n\n  public int getAvailableCount();\n  public boolean updatePrice(double newPrice);\n}\n",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class ProductCategory:\n  def __init__(self, name, description):\n    self.__name = name\n    self.__description = description\n\n\nclass ProductReview:\n  def __init__(self, rating, review, reviewer):\n    self.__rating = rating\n    self.__review = review\n    self.__reviewer = reviewer\n\n\nclass Product:\n  def __init__(self, id, name, description, price, category, seller_account):\n    self.__product_id = id\n    self.__name = name\n    self.__description = description\n    self.__price = price\n    self.__category = category\n    self.__available_item_count = 0\n\n    self.__seller = seller_account\n\n  def get_available_count(self):\n    return self.__available_item_count\n\n  def update_price(self, new_price):\n    None",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "403053fb-84e5-461f-a735-da9ea002a145"
                            },
                            "hash": "21",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**ShoppingCart, Item, Order, and OrderLog:** Users will add items to the shopping cart and place an order to buy all the items in the cart.",
                                "mdHtml": "<p><strong>ShoppingCart, Item, Order, and OrderLog:</strong> Users will add items to the shopping cart and place an order to buy all the items in the cart.</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "0f5f1aae-4369-4017-8432-11f9ba88f9a7"
                            },
                            "hash": "22",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public class Item {\n  private String productID;\n  private int quantity;\n  private double price;\n\n  public boolean updateQuantity(int quantity);\n}\n\npublic class ShoppingCart {\n  private List<Items> items;\n\n  public boolean addItem(Item item);\n  public boolean removeItem(Item item);\n  public boolean updateItemQuantity(Item item, int quantity);\n  public List<Item> getItems();\n  public boolean checkout();\n}\n\npublic class OrderLog {\n  private String orderNumber;\n  private Date creationDate;\n  private OrderStatus status;\n}\n\npublic class Order {\n  private String orderNumber;\n  private OrderStatus status;\n  private Date orderDate;\n  private List<OrderLog> orderLog;\n\n  public boolean sendForShipment();\n  public boolean makePayment(Payment payment);\n  public boolean addOrderLog(OrderLog orderLog);\n}",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class Item:\n  def __init__(self, id, quantity, price):\n    self.__product_id = id\n    self.__quantity = quantity\n    self.__price = price\n\n  def update_quantity(self, quantity):\n    None\n\n\nclass ShoppingCart:\n  def __init__(self):\n    self.__items = []\n\n  def add_item(self, item):\n    None\n\n  def remove_item(self, item):\n    None\n\n  def update_item_quantity(self, item, quantity):\n    None\n\n  def get_items(self):\n    return self.__items\n\n  def checkout(self):\n    None\n\n\nclass OrderLog:\n  def __init__(self, order_number, status=OrderStatus.PENDING):\n    self.__order_number = order_number\n    self.__creation_date = datetime.date.today()\n    self.__status = status\n\n\nclass Order:\n  def __init__(self, order_number, status=OrderStatus.PENDING):\n    self.__order_number = 0\n    self.__status = status\n    self.__order_date = datetime.date.today()\n    self.__order_log = []\n\n  def send_for_shipment(self):\n    None\n\n  def make_payment(self, payment):\n    None\n\n  def add_order_log(self, order_log):\n    None",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "17d5807c-9eda-4bac-9c82-d3d877a49f59"
                            },
                            "hash": "23",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Shipment, ShipmentLog, and Notification:** After successfully placing an order, a shipment record will be created:",
                                "mdHtml": "<p><strong>Shipment, ShipmentLog, and Notification:</strong> After successfully placing an order, a shipment record will be created:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "e4753d4d-70a6-4385-84a8-3fdada1d2c19"
                            },
                            "hash": "24",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "edit",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public class ShipmentLog {\n  private String shipmentNumber;\n  private ShipmentStatus status;\n  private Date creationDate;\n}\n\npublic class Shipment {\n  private String shipmentNumber;\n  private Date shipmentDate;\n  private Date estimatedArrival;\n  private String shipmentMethod;\n  private List<ShipmentLog> shipmentLogs;\n\n  public boolean addShipmentLog(ShipmentLog shipmentLog);\n}\n\npublic abstract class Notification {\n  private int notificationId;\n  private Date createdOn;\n  private String content;\n\n  public boolean sendNotification(Account account);\n}\n",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "onlyCodeChanged": true,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class ShipmentLog:\n  def __init__(self, shipment_number, status=ShipmentStatus.PENDING):\n    self.__shipment_number = shipment_number\n    self.__status = status\n    self.__creation_date = datetime.date.today()\n\n\nclass Shipment:\n  def __init__(self, shipment_numbe, shipment_methodr):\n    self.__shipment_number = shipment_number\n    self.__shipment_date = datetime.date.today()\n    self.__estimated_arrival = datetime.date.today()\n    self.__shipment_method = shipment_method\n    self.__shipmentLogs = []\n\n  def add_shipment_log(self, shipment_log):\n    None\n\n\n# from abc import ABC, abstractmethod\nclass Notification(ABC):\n  def __init__(self, id, content):\n    self.__notification_id = id\n    self.__created_on = datetime.date.today()\n    self.__content = content\n\n  def send_notification(self, account):\n    None\n",
                                        "entryFileName": "main.py",
                                        "onlyCodeChanged": true,
                                        "key": 1
                                    }
                                ],
                                "comp_id": "c5ac70a9-2991-47b1-8d9a-22374d2b88b5"
                            },
                            "hash": "25",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "\n**Search interface and Catalog:** Catalog will implement Search to facilitate searching of products.\n",
                                "mdHtml": "<p><strong>Search interface and Catalog:</strong> Catalog will implement Search to facilitate searching of products.</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "1b065576-ff8f-4992-a089-a2a16ce8581c"
                            },
                            "hash": "26",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public interface Search {\n  public List<Product> searchProductsByName(String name);\n  public List<Product> searchProductsByCategory(String category);\n}\n\npublic class Catalog implements Search {\n   HashMap<String, List<Product>> productNames;\n   HashMap<String, List<Product>> productCategories;\n\n  public List<Product> searchProductsByName(String name) {\n    return productNames.get(name);\n  }\n\n  public List<Product> searchProductsByCategory(String category) {\n    return productCategories.get(category);\n  }\n}\n",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "from abc import ABC, abstractmethod\n\nclass Search(ABC):\n  def search_products_by_name(self, name):\n    None\n\n  def search_products_by_category(self, category):\n    None\n\n\nclass Catalog(Search):\n  def __init__(self):\n    self.__product_names = {}\n    self.__product_categories = {}\n\n  def search_products_by_name(self, name):\n    return self.product_names.get(name)\n\n  def search_products_by_category(self, category):\n    return self.product_categories.get(category)",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "6f0f1bba-3f5b-480f-8c4f-346f7d22a0b4"
                            },
                            "hash": "27",
                            "iteration": 1
                        }
                    ],
                    "summary": {
                        "title": "Design Amazon - Online Shopping System",
                        "description": "Let's design an online retail store.",
                        "titleUpdated": true
                    }
                },
                {
                    "components": [
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "Stack Overflow is one of the largest online communities for developers to learn and share their knowledge. The website provides a platform for its users to ask and answer questions, and through membership and active participation, to vote questions and answers up or down. Users can edit questions and answers in a fashion similar to a [wiki](https://en.wikipedia.org/wiki/Wiki).\n\nUsers of Stack Overflow can earn reputation points and badges. For example, a person is awarded ten reputation points for receiving an \"up\" vote on an answer and five points for the \"up\" vote of a question. The can also receive badges for their valued contributions. A higher reputation lets users unlock new privileges like the ability to vote, comment on, and even edit other people's posts.",
                                "mdHtml": "<p>Stack Overflow is one of the largest online communities for developers to learn and share their knowledge. The website provides a platform for its users to ask and answer questions, and through membership and active participation, to vote questions and answers up or down. Users can edit questions and answers in a fashion similar to a <a href=\"https://en.wikipedia.org/wiki/Wiki\">wiki</a>.</p>\n<p>Users of Stack Overflow can earn reputation points and badges. For example, a person is awarded ten reputation points for receiving an \u201cup\u201d vote on an answer and five points for the \u201cup\u201d vote of a question. The can also receive badges for their valued contributions. A higher reputation lets users unlock new privileges like the ability to vote, comment on, and even edit other people\u2019s posts.</p>\n",
                                "comp_id": "93471d3a-65f2-44d0-bc89-a256871e2568",
                                "cursorPosition": {
                                    "line": 27,
                                    "ch": 0,
                                    "sticky": null
                                }
                            },
                            "hash": "1",
                            "iteration": 1,
                            "saveVersion": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5741129492332544,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 880,
                                    "height": 221,
                                    "sizeInBytes": 16127,
                                    "name": "stack overflow.png"
                                },
                                "comp_id": "4c616abf-6cb8-4f26-8001-9a1172e6cc88"
                            },
                            "hash": "2",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## Requirements and Goals of the System\n\nWe will be designing a system with the following requirements:\n\n1. Any non-member (guest) can search and view questions. However, to add or upvote a question, they have to become a member.\n2. Members should be able to post new questions.\n3. Members should be able to add an answer to an open question.\n4. Members can add comments to any question or answer.\n5. A member can upvote a question, answer or comment.\n6. Members can flag a question, answer or comment, for serious problems or moderator attention.\n7. Any member can add a [bounty](https://stackoverflow.com/help/bounty) to their question to draw attention.\n8. Members will earn [badges](https://stackoverflow.com/help/badges) for being helpful.\n9. Members can vote to [close](https://stackoverflow.com/help/closed-questions) a question; Moderators can close or reopen any question.\n10. Members can add [tags](https://stackoverflow.com/help/tagging) to their questions. A tag is a word or phrase that describes the topic of the question.\n11. Members can vote to [delete](https://stackoverflow.com/help/deleted-questions) extremely off-topic or very low-quality questions. \n12. Moderators can close a question or undelete an already deleted question.\n13. The system should also be able to identify most frequently used tags in the questions.\n\n## Use-case Diagram\n\nWe have five main actors in our system:\n\n* **Admin:** Mainly responsible for blocking or unblocking members.\n* **Guest:** All guests can search and view questions.\n* **Member:** Members can perform all activities that guests can, in addition to which they can add/remove questions, answers, and comments. Members can delete and un-delete their questions, answers or comments.\n* **Moderator:** In addition to all the activities that members can perform, moderators can close/delete/undelete any question.\n* **System:** Mainly responsible for sending notifications and assigning badges to members.\n\nHere are the top use cases for Stack Overflow:\n1. Search questions.\n2. Create a new question with bounty and tags.\n3. Add/modify answers to questions. \n4. Add comments to questions or answers.\n5. Moderators can close, delete, and un-delete any question.",
                                "mdHtml": "<h2>Requirements and Goals of the System</h2>\n<p>We will be designing a system with the following requirements:</p>\n<ol>\n<li>Any non-member (guest) can search and view questions. However, to add or upvote a question, they have to become a member.</li>\n<li>Members should be able to post new questions.</li>\n<li>Members should be able to add an answer to an open question.</li>\n<li>Members can add comments to any question or answer.</li>\n<li>A member can upvote a question, answer or comment.</li>\n<li>Members can flag a question, answer or comment, for serious problems or moderator attention.</li>\n<li>Any member can add a <a href=\"https://stackoverflow.com/help/bounty\">bounty</a> to their question to draw attention.</li>\n<li>Members will earn <a href=\"https://stackoverflow.com/help/badges\">badges</a> for being helpful.</li>\n<li>Members can vote to <a href=\"https://stackoverflow.com/help/closed-questions\">close</a> a question; Moderators can close or reopen any question.</li>\n<li>Members can add <a href=\"https://stackoverflow.com/help/tagging\">tags</a> to their questions. A tag is a word or phrase that describes the topic of the question.</li>\n<li>Members can vote to <a href=\"https://stackoverflow.com/help/deleted-questions\">delete</a> extremely off-topic or very low-quality questions.</li>\n<li>Moderators can close a question or undelete an already deleted question.</li>\n<li>The system should also be able to identify most frequently used tags in the questions.</li>\n</ol>\n<h2>Use-case Diagram</h2>\n<p>We have five main actors in our system:</p>\n<ul>\n<li><strong>Admin:</strong> Mainly responsible for blocking or unblocking members.</li>\n<li><strong>Guest:</strong> All guests can search and view questions.</li>\n<li><strong>Member:</strong> Members can perform all activities that guests can, in addition to which they can add/remove questions, answers, and comments. Members can delete and un-delete their questions, answers or comments.</li>\n<li><strong>Moderator:</strong> In addition to all the activities that members can perform, moderators can close/delete/undelete any question.</li>\n<li><strong>System:</strong> Mainly responsible for sending notifications and assigning badges to members.</li>\n</ul>\n<p>Here are the top use cases for Stack Overflow:</p>\n<ol>\n<li>Search questions.</li>\n<li>Create a new question with bounty and tags.</li>\n<li>Add/modify answers to questions.</li>\n<li>Add comments to questions or answers.</li>\n<li>Moderators can close, delete, and un-delete any question.</li>\n</ol>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "71f49523-3ad2-4be8-ae17-c055e4e691e8"
                            },
                            "hash": "3",
                            "iteration": 2,
                            "saveVersion": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5710453493727232,
                                "style": "original",
                                "caption": "Use case diagram",
                                "borderColor": "#ccc",
                                "hasBorder": true,
                                "metadata": {
                                    "width": 928,
                                    "height": 964,
                                    "sizeInBytes": 37322,
                                    "name": "usecase(29).svg"
                                },
                                "comp_id": "4023002e-de40-4d3d-9901-b422daac2cc0"
                            },
                            "hash": "4",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## Class diagram\n\nHere are the main classes of Stack Overflow System:\n\n* **Question:**  This class is the central part of our system. It has attributes like Title and Description to define the question. In addition to this, we will track the number of times a question has been viewed or voted on. We should also track the status of a question, as well as closing remarks if the question is closed.\n\n* **Answer:** The most important attributes of any answer will be the text and the view count. In addition to that, we will also track the number of times an answer is voted on or flagged. We should also track if the question owner has accepted an answer.\n\n* **Comment:** Similar to answer, comments will have text, and view, vote, and flag counts. Members can add comments to questions and answers.\n\n* **Tag:** Tags will be identified by their names and will have a field for a description to define them. We will also track daily and weekly frequencies at which tags are associated with questions.\n\n* **Badge:** Similar to tags, badges will have a name and description.\n\n* **Photo:** Questions or answers can have photos.\n\n* **Bounty:** Each member, while asking a question, can place a bounty to draw attention. Bounties will have a total reputation and an expiry date.\n\n* **Account:** We will have four types of accounts in the system, guest, member, admin, and moderator. Guests can search and view questions. Members can ask questions and earn reputation by answering questions and from bounties.\n\n* **Notification:** This class will be responsible for sending notifications to members and assigning badges to members based on their reputations.",
                                "mdHtml": "<h2>Class diagram</h2>\n<p>Here are the main classes of Stack Overflow System:</p>\n<ul>\n<li>\n<p><strong>Question:</strong>  This class is the central part of our system. It has attributes like Title and Description to define the question. In addition to this, we will track the number of times a question has been viewed or voted on. We should also track the status of a question, as well as closing remarks if the question is closed.</p>\n</li>\n<li>\n<p><strong>Answer:</strong> The most important attributes of any answer will be the text and the view count. In addition to that, we will also track the number of times an answer is voted on or flagged. We should also track if the question owner has accepted an answer.</p>\n</li>\n<li>\n<p><strong>Comment:</strong> Similar to answer, comments will have text, and view, vote, and flag counts. Members can add comments to questions and answers.</p>\n</li>\n<li>\n<p><strong>Tag:</strong> Tags will be identified by their names and will have a field for a description to define them. We will also track daily and weekly frequencies at which tags are associated with questions.</p>\n</li>\n<li>\n<p><strong>Badge:</strong> Similar to tags, badges will have a name and description.</p>\n</li>\n<li>\n<p><strong>Photo:</strong> Questions or answers can have photos.</p>\n</li>\n<li>\n<p><strong>Bounty:</strong> Each member, while asking a question, can place a bounty to draw attention. Bounties will have a total reputation and an expiry date.</p>\n</li>\n<li>\n<p><strong>Account:</strong> We will have four types of accounts in the system, guest, member, admin, and moderator. Guests can search and view questions. Members can ask questions and earn reputation by answering questions and from bounties.</p>\n</li>\n<li>\n<p><strong>Notification:</strong> This class will be responsible for sending notifications to members and assigning badges to members based on their reputations.</p>\n</li>\n</ul>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "316aba9a-ac08-43a5-b3b2-24c302a0e4b4"
                            },
                            "hash": "5",
                            "iteration": 2,
                            "saveVersion": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5672135942995968,
                                "style": "original",
                                "caption": "Class diagram",
                                "metadata": {
                                    "width": 818,
                                    "height": 1084,
                                    "sizeInBytes": 76791,
                                    "name": "Stackoverflow class diagram(5).svg"
                                },
                                "comp_id": "870b47d2-231a-4994-8b34-d9915cc459c6"
                            },
                            "hash": "6",
                            "iteration": 0
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 4912871483899904,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 571,
                                    "height": 511,
                                    "sizeInBytes": 25589,
                                    "name": "uml cheat sheet (1).svg"
                                },
                                "comp_id": "af236664-b984-4e36-9e9d-66bfbab30779"
                            },
                            "hash": "7",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## Activity diagrams\n\n**Post a new question:** Any member or moderator can perform this activity. Here are the steps to post a question:",
                                "mdHtml": "<h2>Activity diagrams</h2>\n<p><strong>Post a new question:</strong> Any member or moderator can perform this activity. Here are the steps to post a question:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "c555ecb7-a453-452c-b6ab-e7c9c4db0701"
                            },
                            "hash": "8",
                            "iteration": 2,
                            "saveVersion": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5679128418189312,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 551,
                                    "height": 967,
                                    "sizeInBytes": 25583,
                                    "name": "AD- Post New Question(1).svg"
                                },
                                "comp_id": "a8a01ed4-3850-4400-8a49-e3073a16c4cd"
                            },
                            "hash": "9",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## Sequence Diagram\n\nFollowing is the sequence diagram for creating a new question:",
                                "mdHtml": "<h2>Sequence Diagram</h2>\n<p>Following is the sequence diagram for creating a new question:</p>\n",
                                "cursorPosition": {
                                    "line": 2,
                                    "ch": 107,
                                    "sticky": null
                                },
                                "comp_id": "9fb037bd-9315-429d-943b-62905008dcd6"
                            },
                            "hash": "10",
                            "iteration": 2,
                            "saveVersion": 1
                        },
                        {
                            "type": "SequenceDiagrams",
                            "mode": "view",
                            "content": {
                                "version": "1.0",
                                "caption": "",
                                "text": "Title: Create a new Question\nMember->Question: setTitle()\nMember->Question: setBody()\nMember->Tag: getTags(tagText)\nTag-->Member: tagId/Error\nMember->Tag: createTag(tagText, tagDescription)\nMember->Question: addTag(tag)\nMember->Question: createQuestion(questionText, tagId, bountyValue)\nQuestion->Bounty: createBounty(bountyValue)\nBounty-->Question: bounty\nMember->Question: publishQuestion()\n\n\n\n\n\n",
                                "svg_string": "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?><!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 20010904//EN\" \"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"858\" height=\"544\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><source><![CDATA[Title: Create a new Question\nMember->Question: setTitle()\nMember->Question: setBody()\nMember->Tag: getTags(tagText)\nTag-->Member: tagId/Error\nMember->Tag: createTag(tagText, tagDescription)\nMember->Question: addTag(tag)\nMember->Question: createQuestion(questionText, tagId, bountyValue)\nQuestion->Bounty: createBounty(bountyValue)\nBounty-->Question: bounty\nMember->Question: publishQuestion()\n\n\n\n\n\n]]></source><desc>Create a new Question</desc><defs><marker viewBox=\"0 0 5 5\" markerWidth=\"5\" markerHeight=\"5\" orient=\"auto\" refX=\"5\" refY=\"2.5\" id=\"markerArrowBlock\"><path d=\"M 0 0 L 5 2.5 L 0 5 z\"></path></marker><marker viewBox=\"0 0 9.6 16\" markerWidth=\"4\" markerHeight=\"16\" orient=\"auto\" refX=\"9.6\" refY=\"8\" id=\"markerArrowOpen\"><path d=\"M 9.6,8 1.92,16 0,13.7 5.76,8 0,2.286 1.92,0 9.6,8 z\"></path></marker></defs><g class=\"title\"><rect x=\"10\" y=\"10\" width=\"211.625\" height=\"28\" stroke=\"#000000\" fill=\"#ffffff\" style=\"stroke-width: 2;\"></rect><text x=\"15\" y=\"29.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"15\">Create a new Question</tspan></text></g><g class=\"actor\"><rect x=\"10\" y=\"48\" width=\"77.609375\" height=\"38\" stroke=\"#000000\" fill=\"#ffffff\" style=\"stroke-width: 2;\"></rect><text x=\"20\" y=\"72.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"20\">Member</tspan></text></g><g class=\"actor\"><rect x=\"10\" y=\"486\" width=\"77.609375\" height=\"38\" stroke=\"#000000\" fill=\"#ffffff\" style=\"stroke-width: 2;\"></rect><text x=\"20\" y=\"510.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"20\">Member</tspan></text></g><line x1=\"48.8046875\" x2=\"48.8046875\" y1=\"86\" y2=\"486\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2;\"></line><g class=\"actor\"><rect x=\"481.2734375\" y=\"48\" width=\"96.8125\" height=\"38\" stroke=\"#000000\" fill=\"#ffffff\" style=\"stroke-width: 2;\"></rect><text x=\"491.2734375\" y=\"72.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"491.2734375\">Question</tspan></text></g><g class=\"actor\"><rect x=\"481.2734375\" y=\"486\" width=\"96.8125\" height=\"38\" stroke=\"#000000\" fill=\"#ffffff\" style=\"stroke-width: 2;\"></rect><text x=\"491.2734375\" y=\"510.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"491.2734375\">Question</tspan></text></g><line x1=\"529.6796875\" x2=\"529.6796875\" y1=\"86\" y2=\"486\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2;\"></line><g class=\"actor\"><rect x=\"598.0859375\" y=\"48\" width=\"48.796875\" height=\"38\" stroke=\"#000000\" fill=\"#ffffff\" style=\"stroke-width: 2;\"></rect><text x=\"608.0859375\" y=\"72.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"608.0859375\">Tag</tspan></text></g><g class=\"actor\"><rect x=\"598.0859375\" y=\"486\" width=\"48.796875\" height=\"38\" stroke=\"#000000\" fill=\"#ffffff\" style=\"stroke-width: 2;\"></rect><text x=\"608.0859375\" y=\"510.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"608.0859375\">Tag</tspan></text></g><line x1=\"622.484375\" x2=\"622.484375\" y1=\"86\" y2=\"486\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2;\"></line><g class=\"actor\"><rect x=\"750.90625\" y=\"48\" width=\"77.609375\" height=\"38\" stroke=\"#000000\" fill=\"#ffffff\" style=\"stroke-width: 2;\"></rect><text x=\"760.90625\" y=\"72.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"760.90625\">Bounty</tspan></text></g><g class=\"actor\"><rect x=\"750.90625\" y=\"486\" width=\"77.609375\" height=\"38\" stroke=\"#000000\" fill=\"#ffffff\" style=\"stroke-width: 2;\"></rect><text x=\"760.90625\" y=\"510.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"760.90625\">Bounty</tspan></text></g><line x1=\"789.7109375\" x2=\"789.7109375\" y1=\"86\" y2=\"486\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2;\"></line><g class=\"signal\"><text x=\"241.234375\" y=\"116.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"241.234375\">setTitle()</tspan></text><line x1=\"48.8046875\" x2=\"529.6796875\" y1=\"124\" y2=\"124\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2; marker-end: url(&quot;#markerArrowBlock&quot;);\"></line></g><g class=\"signal\"><text x=\"246.0390625\" y=\"154.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"246.0390625\">setBody()</tspan></text><line x1=\"48.8046875\" x2=\"529.6796875\" y1=\"162\" y2=\"162\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2; marker-end: url(&quot;#markerArrowBlock&quot;);\"></line></g><g class=\"signal\"><text x=\"258.83203125\" y=\"192.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"258.83203125\">getTags(tagText)</tspan></text><line x1=\"48.8046875\" x2=\"622.484375\" y1=\"200\" y2=\"200\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2; marker-end: url(&quot;#markerArrowBlock&quot;);\"></line></g><g class=\"signal\"><text x=\"282.83984375\" y=\"230.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"282.83984375\">tagId/Error</tspan></text><line x1=\"622.484375\" x2=\"48.8046875\" y1=\"238\" y2=\"238\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2; stroke-dasharray: 6, 2; marker-end: url(&quot;#markerArrowBlock&quot;);\"></line></g><g class=\"signal\"><text x=\"172.41796875\" y=\"268.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"172.41796875\">createTag(tagText, tagDescription)</tspan></text><line x1=\"48.8046875\" x2=\"622.484375\" y1=\"276\" y2=\"276\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2; marker-end: url(&quot;#markerArrowBlock&quot;);\"></line></g><g class=\"signal\"><text x=\"236.4375\" y=\"306.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"236.4375\">addTag(tag)</tspan></text><line x1=\"48.8046875\" x2=\"529.6796875\" y1=\"314\" y2=\"314\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2; marker-end: url(&quot;#markerArrowBlock&quot;);\"></line></g><g class=\"signal\"><text x=\"58.8046875\" y=\"344.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"58.8046875\">createQuestion(questionText, tagId, bountyValue)</tspan></text><line x1=\"48.8046875\" x2=\"529.6796875\" y1=\"352\" y2=\"352\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2; marker-end: url(&quot;#markerArrowBlock&quot;);\"></line></g><g class=\"signal\"><text x=\"539.6796875\" y=\"382.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"539.6796875\">createBounty(bountyValue)</tspan></text><line x1=\"529.6796875\" x2=\"789.7109375\" y1=\"390\" y2=\"390\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2; marker-end: url(&quot;#markerArrowBlock&quot;);\"></line></g><g class=\"signal\"><text x=\"630.890625\" y=\"420.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"630.890625\">bounty</tspan></text><line x1=\"789.7109375\" x2=\"529.6796875\" y1=\"428\" y2=\"428\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2; stroke-dasharray: 6, 2; marker-end: url(&quot;#markerArrowBlock&quot;);\"></line></g><g class=\"signal\"><text x=\"207.6328125\" y=\"458.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"207.6328125\">publishQuestion()</tspan></text><line x1=\"48.8046875\" x2=\"529.6796875\" y1=\"466\" y2=\"466\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2; marker-end: url(&quot;#markerArrowBlock&quot;);\"></line></g></svg>",
                                "diagram_type": "simple",
                                "comp_id": "72d0ec1f-f680-4b29-9727-47638b716dca"
                            },
                            "hash": "11",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## Code\n\nHere is the high-level definition for the classes described above.\n\n**Enums, data types, and constants:** Here are the required enums, data types, and constants:",
                                "mdHtml": "<h2>Code</h2>\n<p>Here is the high-level definition for the classes described above.</p>\n<p><strong>Enums, data types, and constants:</strong> Here are the required enums, data types, and constants:</p>\n",
                                "cursorPosition": 7,
                                "comp_id": "ccf16e42-1e3c-468c-ac6f-04da4be0f575"
                            },
                            "hash": "12",
                            "iteration": 1,
                            "saveVersion": 1
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public enum QuestionStatus{\n  OPEN,\n  CLOSED,\n  ON_HOLD,\n  DELETED\n}\n\npublic enum QuestionClosingRemark{\n  DUPLICATE,\n  OFF_TOPIC,\n  TOO_BROAD,\n  NOT_CONSTRUCTIVE,\n  NOT_A_REAL_QUESTION,\n  PRIMARILY_OPINION_BASED\n}\n\npublic enum AccountStatus{\n  ACTIVE,\n  CLOSED,\n  CANCELED,\n  BLACKLISTED,\n  BLOCKED\n}",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class QuestionStatus(Enum):\n  OPEN, CLOSED, ON_HOLD, DELETED = 1, 2, 3, 4\n\n\nclass QuestionClosingRemark(Enum):\n  DUPLICATE, OFF_TOPIC, TOO_BROAD, NOT_CONSTRUCTIVE, NOT_A_REAL_QUESTION, PRIMARILY_OPINION_BASED = 1, 2, 3, 4, 5, 6\n\n\nclass AccountStatus(Enum):\n  ACTIVE, CLOSED, CANCELED, BLACKLISTED, BLOCKED = 1, 2, 3, 4, 5",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "f683004b-b47f-4185-8222-d8f51e9c896d"
                            },
                            "hash": "22",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Account, Member, Admin, and Moderator:** These classes represent the different people that interact with our system:",
                                "mdHtml": "<p><strong>Account, Member, Admin, and Moderator:</strong> These classes represent the different people that interact with our system:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "42769258-c911-4380-b98a-defe3eeeef26"
                            },
                            "hash": "14",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "// For simplicity, we are not defining getter and setter functions. The reader can\n// assume that all class attributes are private and accessed through their respective\n// public getter methods and modified only through their public methods function.\n\npublic class Account {\n  private String id;\n  private String password;\n  private AccountStatus status;\n  private String name;\n  private Address address;\n  private String email;\n  private String phone;\n  private int reputation;\n\n  public boolean resetPassword();\n}\n\npublic class Member {\n  private Account account;\n  private List<Badge> badges;\n\n  public int getReputation();\n  public String getEmail();\n  public boolean createQuestion(Question question);\n  public boolean createTag(Tag tag);\n}\n\npublic class Admin extends Member {\n  public boolean blockMember(Member member);\n  public boolean unblockMember(Member member);\n}\n\npublic class Moderator extends Member {\n  public boolean closeQuestion(Question question);\n  public boolean undeleteQuestion(Question question);\n}",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "# For simplicity, we are not defining getter and setter functions. The reader can\n# assume that all class attributes are private and accessed through their respective\n# public getter methods and modified only through their public methods function.\n\n\nclass Account:\n  def __init__(self, id, password, name, address, email, phone, status=AccountStatus.Active):\n    self.__id = id\n    self.__password = password\n    self.__name = name\n    self.__address = address\n    self.__email = email\n    self.__phone = phone\n    self.__status = status\n    self.__reputation = 0\n\n  def reset_password(self):\n    None\n\n\nclass Member:\n  def __init__(self, account):\n    self.__account = account\n    self.__badges = []\n\n  def get_reputation(self):\n    return self.__account.get_reputation()\n\n  def get_email(self):\n    return self.__account.get_email()\n\n  def create_question(self, question):\n    None\n\n  def create_tag(self, tag):\n    None\n\n\nclass Admin(Member):\n  def block_member(self, member):\n    None\n\n  def unblock_member(self, member):\n    None\n\n\nclass Moderator(Member):\n  def close_question(self, question):\n    None\n\n  def undelete_question(self, question):\n    None\n",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "8bad9a88-14b2-4d79-8bd6-7c71019e04d9"
                            },
                            "hash": "23",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Badge, Tag, and Notification:** Members have badges, questions have tags and notifications:",
                                "mdHtml": "<p><strong>Badge, Tag, and Notification:</strong> Members have badges, questions have tags and notifications:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "0320f2c6-6ff2-42ed-a06d-97238e0ad322"
                            },
                            "hash": "16",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public class Badge {\n  private String name;\n  private String description;\n}\n\npublic class Tag {\n  private String name;\n  private String description;\n  private long dailyAskedFrequency;\n  private long weeklyAskedFrequency;\n}\n\npublic class Notification {\n  private int notificationId;\n  private Date createdOn;\n  private String content;\n\n  public boolean sendNotification();\n}\n",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class Badge:\n  def __init__(self, name, description):\n    self.__name = name\n    self.__description = description\n\n\nclass Tag:\n  def __init__(self, name, description):\n    self.__name = name\n    self.__description = description\n    self.__daily_asked_frequency = 0\n    self.__weekly_asked_frequency = 0\n\n# import datetime\n\n\nclass Notification:\n  def __init__(self, id, content):\n    self.__notification_id = id\n    self.__created_on = datetime.datetime.now()\n    self.__content = content\n\n  def send_notification(self):\n    None",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "666afdf1-d459-4263-b7f6-1c72b5092b64"
                            },
                            "hash": "24",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Photo and Bounty:** Members can put bounties on questions. Answers and Questions can have multiple photos:",
                                "mdHtml": "<p><strong>Photo and Bounty:</strong> Members can put bounties on questions. Answers and Questions can have multiple photos:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "dcf65bb1-aa76-4944-a385-a7f869a1b593"
                            },
                            "hash": "18",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public class Photo {\n  private int photoId;\n  private String photoPath;\n  private Date creationDate;\n\n  private Member creatingMember;\n\n  public boolean delete();\n}\n\npublic class Bounty {\n  private int reputation;\n  private Date expiry;\n\n  public boolean modifyReputation(int reputation);\n}\n",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "import datetime\n\nclass Photo:\n  def __init__(self, id, path, member):\n    self.__photo_id = id\n    self.__photo_path = path\n    self.__creation_date = datetime.datetime.now()\n    self.__creating_member = member\n\n  def delete(self):\n    None\n\n# import datetime\n\n\nclass Bounty:\n  def __init__(self, reputation, expiry):\n    self.__reputation = reputation\n    self.__expiry = expiry\n\n  def modify_reputation(self, reputation):\n    None\n\n",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "ed2423b3-7e82-4375-ba5c-4acb907f584d"
                            },
                            "hash": "25",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Question, Comment and Answer:** Members can ask questions, as well as add an answer to any question. All members can add comments to all open questions or answers:",
                                "mdHtml": "<p><strong>Question, Comment and Answer:</strong> Members can ask questions, as well as add an answer to any question. All members can add comments to all open questions or answers:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "e2e62b4d-71f7-4aba-a3e6-738cde3ffb78"
                            },
                            "hash": "20",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "edit",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public interface Search {\n  public static List<Question> search(String query);\n}\n\npublic class Question implements Search {\n  private String title;\n  private String description;\n  private int viewCount;\n  private int voteCount;\n  private Date creationTime;\n  private Date updateTime;\n  private QuestionStatus status;\n  private QuestionClosingRemark closingRemark;\n\n  private Member askingMember;\n  private Bounty bounty;\n  private List<Photo> photos;\n  private List<Comment> comments;\n  private List<Answer> answers;\n\n  public boolean close();\n  public boolean undelete();\n  public boolean addComment(Comment comment);\n  public boolean addBounty(Bounty bounty);\n\n  public static List<Question> search(String query) {\n    // return all questions containing the string query in their title or description.\n  }\n}\n\npublic class Comment {\n  private String text;\n  private Date creationTime;\n  private int flagCount;\n  private int voteCount;\n\n  private Member askingMember;\n\n  public boolean incrementVoteCount();\n}\n\npublic class Answer {\n  private String answerText;\n  private boolean accepted;\n  private int voteCount;\n  private int flagCount;\n  private Date creationTime;\n\n  private Member creatingMember;\n  private List<Photo> photos;\n\n  public boolean incrementVoteCount();\n}\n",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "from abc import ABC, abstractmethod\n\nclass Search(ABC):\n  def search(self, query):\n    None\n\nimport datetime\n\nclass Question(Search):\n  def __init__(self, title, description, bounty, asking_member):\n    self.__title = title\n    self.__description = description\n    self.__view_count = 0\n    self.__vote_count = 0\n    self.__creation_time = datetime.datetime.now()\n    self.__update_time = datetime.datetime.now()\n    self.__status = QuestionStatus.OPEN\n    self.__closing_remark = QuestionClosingRemark.DUPLICATE\n\n    self.__bounty = bounty\n    self.__asking_member = asking_member\n    self.__photos = []\n    self.__comments = []\n    self.__answers = []\n\n  def close(self):\n    None\n\n  def undelete(self):\n    None\n\n  def add_comment(self, comment):\n    None\n\n  def add_bounty(self, bounty):\n    None\n\n  def search(self, query):\n    # return all questions containing the string query in their title or description.\n    None\n\n\nclass Comment:\n  def __init__(self, text, member):\n    self.__text = text\n    self.__creation_time = datetime.datetime.now()\n    self.__flag_count = 0\n    self.__vote_count = 0\n    self.__asking_member = member\n\n  def increment_vote_count(self):\n    None\n\n\nclass Answer:\n  def __init__(self, text, member):\n    self.__answer_text = text\n    self.__accepted = False\n    self.__vote_count = 0\n    self.__flag_count = 0\n    self.__creation_time = datetime.datetime.now()\n    self.__creating_member = member\n    self.__photos = []\n\n  def increment_vote_count(self):\n    None\n",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "d6170004-cecf-43f6-8045-c0b59006758a"
                            },
                            "hash": "26",
                            "iteration": 1
                        }
                    ],
                    "summary": {
                        "title": "Design Stack Overflow"
                    }
                },
                {
                    "components": [
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "An online movie ticket booking system facilitates the purchasing of movie tickets to its customers. E-ticketing systems allow customers to browse through movies currently playing and book seats, anywhere and anytime.",
                                "mdHtml": "<p>An online movie ticket booking system facilitates the purchasing of movie tickets to its customers. E-ticketing systems allow customers to browse through movies currently playing and book seats, anywhere and anytime.</p>\n",
                                "comp_id": "3cb1ecc6-d0fe-4add-be6c-fa371048a27c"
                            },
                            "hash": "1",
                            "iteration": 1,
                            "saveVersion": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5648633076645888,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 540,
                                    "height": 360,
                                    "sizeInBytes": 68281,
                                    "name": "movie-918655_1920.jpg"
                                },
                                "comp_id": "b2d78131-ef0b-4489-8ad4-b08d712fbc0b"
                            },
                            "hash": "2",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## Requirements and Goals of the System\n\nOur ticket booking service should meet the following requirements:\n\n1.    It should be able to list the cities where affiliate cinemas are located.\n2. Each cinema can have multiple halls and each hall can run one movie show at a time.\n3. Each Movie will have multiple shows. \n4.    Customers should be able to search movies by their title, language, genre, release date, and city name.\n5.    Once the customer selects a movie, the service should display the cinemas running that movie and its available shows.\n6.    The customer should be able to select a show at a particular cinema and book their tickets.\n7.    The service should show the customer the seating arrangement of the cinema hall. The customer should be able to select multiple seats according to their preference.\n8.    The customer should be able to distinguish between available seats and booked ones.\n9. The system should send notifications whenever there is a new movie, as well as when a booking is made or canceled.\n10. Customers of our system should be able to pay with credit cards or cash.\n11. The system should ensure that no two customers can reserve the same seat.\n12. Customers should be able to add a discount coupon to their payment.\n\n## Use case diagram\n\nWe have five main Actors in our system:\n* **Admin:** Responsible for adding new movies and their shows, canceling any movie or show, blocking/unblocking customers, etc.\n* **FrontDeskOfficer:** Can book/cancel tickets.\n* **Customer:** Can view movie schedules, book, and cancel tickets.\n* **Guest:** All guests can search movies but to book seats they have to become a registered member.\n* **System:** Mainly responsible for sending notifications for new movies, bookings, cancellations, etc.\n\n\nHere are the top use cases of the Movie Ticket Booking System:\n* **Search movies:** To search movies by title, genre, language, release date, and city name.\n* **Create/Modify/View booking:** To book a movie show ticket, cancel it or view details about the show.\n* **Make payment for booking:** To pay for the booking.\n* **Add a coupon to the payment:** To add a discount coupon to the payment.\n* **Assign Seat:** Customers will be shown a seat map to let them select seats for their booking.\n* **Refund payment:** Upon cancellation, customers will be refunded the payment amount as long as the cancellation occurs within the allowed time frame.",
                                "mdHtml": "<h2>Requirements and Goals of the System</h2>\n<p>Our ticket booking service should meet the following requirements:</p>\n<ol>\n<li>It should be able to list the cities where affiliate cinemas are located.</li>\n<li>Each cinema can have multiple halls and each hall can run one movie show at a time.</li>\n<li>Each Movie will have multiple shows.</li>\n<li>Customers should be able to search movies by their title, language, genre, release date, and city name.</li>\n<li>Once the customer selects a movie, the service should display the cinemas running that movie and its available shows.</li>\n<li>The customer should be able to select a show at a particular cinema and book their tickets.</li>\n<li>The service should show the customer the seating arrangement of the cinema hall. The customer should be able to select multiple seats according to their preference.</li>\n<li>The customer should be able to distinguish between available seats and booked ones.</li>\n<li>The system should send notifications whenever there is a new movie, as well as when a booking is made or canceled.</li>\n<li>Customers of our system should be able to pay with credit cards or cash.</li>\n<li>The system should ensure that no two customers can reserve the same seat.</li>\n<li>Customers should be able to add a discount coupon to their payment.</li>\n</ol>\n<h2>Use case diagram</h2>\n<p>We have five main Actors in our system:</p>\n<ul>\n<li><strong>Admin:</strong> Responsible for adding new movies and their shows, canceling any movie or show, blocking/unblocking customers, etc.</li>\n<li><strong>FrontDeskOfficer:</strong> Can book/cancel tickets.</li>\n<li><strong>Customer:</strong> Can view movie schedules, book, and cancel tickets.</li>\n<li><strong>Guest:</strong> All guests can search movies but to book seats they have to become a registered member.</li>\n<li><strong>System:</strong> Mainly responsible for sending notifications for new movies, bookings, cancellations, etc.</li>\n</ul>\n<p>Here are the top use cases of the Movie Ticket Booking System:</p>\n<ul>\n<li><strong>Search movies:</strong> To search movies by title, genre, language, release date, and city name.</li>\n<li><strong>Create/Modify/View booking:</strong> To book a movie show ticket, cancel it or view details about the show.</li>\n<li><strong>Make payment for booking:</strong> To pay for the booking.</li>\n<li><strong>Add a coupon to the payment:</strong> To add a discount coupon to the payment.</li>\n<li><strong>Assign Seat:</strong> Customers will be shown a seat map to let them select seats for their booking.</li>\n<li><strong>Refund payment:</strong> Upon cancellation, customers will be refunded the payment amount as long as the cancellation occurs within the allowed time frame.</li>\n</ul>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "73117f9b-f449-415d-a2be-24ef3e9928cb"
                            },
                            "hash": "3",
                            "iteration": 2,
                            "saveVersion": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5643795601293312,
                                "style": "original",
                                "caption": "Use case diagram",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 995,
                                    "height": 934,
                                    "sizeInBytes": 47038,
                                    "name": "usecase(28).svg"
                                },
                                "comp_id": "31217b51-130b-406e-bf84-b25481d0c6d3"
                            },
                            "hash": "4",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## Class diagram\n\nHere are the main classes of the Movie Ticket Booking System:\n\n* **Account:** Admin will be able to add/remove movies and shows, as well as block/unblock accounts. Customers can search for movies and make bookings for shows. FrontDeskOffice can book tickets for movie shows.\n\n* **Guest:** Guests can search and view movies descriptions. To make a booking for a show they have to become a registered member.\n\n* **Cinema:** The main part of the organization for which this software has been designed. It has attributes like \u2018name\u2019 to distinguish it from other cinemas.\n\n* **CinemaHall:** Each cinema will have multiple halls containing multiple seats.\n\n* **City:** Each city can have multiple cinemas.\n\n* **Movie:** The main entity of the system. Movies have attributes like title, description, language, genre, release date, city name, etc. \n\n* **Show:** Each movie can have many shows; each show will be played in a cinema hall.\n\n* **CinemaHallSeat:** Each cinema hall will have many seats.\n\n* **ShowSeat:** Each ShowSeat will correspond to a movie Show and a CinemaHallSeat. Customers will make a booking against a ShowSeat.\n\n\n* **Booking:** A booking is against a movie show and has attributes like a unique booking number, number of seats, and status.\n\n* **Payment:** Responsible for collecting payments from customers.\n\n* **Notification:** Will take care of sending notifications to customers.\n",
                                "mdHtml": "<h2>Class diagram</h2>\n<p>Here are the main classes of the Movie Ticket Booking System:</p>\n<ul>\n<li>\n<p><strong>Account:</strong> Admin will be able to add/remove movies and shows, as well as block/unblock accounts. Customers can search for movies and make bookings for shows. FrontDeskOffice can book tickets for movie shows.</p>\n</li>\n<li>\n<p><strong>Guest:</strong> Guests can search and view movies descriptions. To make a booking for a show they have to become a registered member.</p>\n</li>\n<li>\n<p><strong>Cinema:</strong> The main part of the organization for which this software has been designed. It has attributes like \u2018name\u2019 to distinguish it from other cinemas.</p>\n</li>\n<li>\n<p><strong>CinemaHall:</strong> Each cinema will have multiple halls containing multiple seats.</p>\n</li>\n<li>\n<p><strong>City:</strong> Each city can have multiple cinemas.</p>\n</li>\n<li>\n<p><strong>Movie:</strong> The main entity of the system. Movies have attributes like title, description, language, genre, release date, city name, etc.</p>\n</li>\n<li>\n<p><strong>Show:</strong> Each movie can have many shows; each show will be played in a cinema hall.</p>\n</li>\n<li>\n<p><strong>CinemaHallSeat:</strong> Each cinema hall will have many seats.</p>\n</li>\n<li>\n<p><strong>ShowSeat:</strong> Each ShowSeat will correspond to a movie Show and a CinemaHallSeat. Customers will make a booking against a ShowSeat.</p>\n</li>\n<li>\n<p><strong>Booking:</strong> A booking is against a movie show and has attributes like a unique booking number, number of seats, and status.</p>\n</li>\n<li>\n<p><strong>Payment:</strong> Responsible for collecting payments from customers.</p>\n</li>\n<li>\n<p><strong>Notification:</strong> Will take care of sending notifications to customers.</p>\n</li>\n</ul>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "ab57e931-a936-44a7-95fe-59fe1655d998"
                            },
                            "hash": "5",
                            "iteration": 2,
                            "saveVersion": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5383953642946560,
                                "style": "original",
                                "caption": "Class diagram",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 1035,
                                    "height": 1103,
                                    "sizeInBytes": 271172,
                                    "name": "Class Diagram (9).png"
                                },
                                "comp_id": "49847a17-3879-49a2-a915-93d86126a930"
                            },
                            "hash": "6",
                            "iteration": 0
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 6116543115034624,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 571,
                                    "height": 511,
                                    "sizeInBytes": 25589,
                                    "name": "uml cheat sheet (1).svg"
                                },
                                "comp_id": "0944a994-d934-4293-a318-feec4c2bae55"
                            },
                            "hash": "7",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## Activity Diagram\n\n* **Make a booking:** Any customer can perform this activity. Here are the steps to book a ticket for a show:",
                                "mdHtml": "<h2>Activity Diagram</h2>\n<ul>\n<li><strong>Make a booking:</strong> Any customer can perform this activity. Here are the steps to book a ticket for a show:</li>\n</ul>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "70582846-16a3-4ebd-9cc2-52e0f101e69e"
                            },
                            "hash": "8",
                            "iteration": 2,
                            "saveVersion": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5657230527430656,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 533,
                                    "height": 1454,
                                    "sizeInBytes": 36216,
                                    "name": "Make reservation - Activity Diagram(3).svg"
                                },
                                "comp_id": "461a391d-bc04-44cc-9049-78b2d6bb9a5b"
                            },
                            "hash": "9",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "* **Cancel a booking:** Customer can cancel their bookings. Here are the steps to cancel a booking:",
                                "mdHtml": "<ul>\n<li><strong>Cancel a booking:</strong> Customer can cancel their bookings. Here are the steps to cancel a booking:</li>\n</ul>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "39b28a2b-60f1-44b9-a818-4be62768d311"
                            },
                            "hash": "10",
                            "iteration": 0
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5733423247261696,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 513,
                                    "height": 1137,
                                    "sizeInBytes": 22821,
                                    "name": "Cancel reservation - Activity Diagram(2).svg"
                                },
                                "comp_id": "ebd059f0-d2cb-494d-b284-d2541ad0fcfd"
                            },
                            "hash": "11",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## Code\n\nHere are the high-level definitions for the classes described above.\n\n**Enums, data types, and constants:** Here are the required enums, data types, and constants:",
                                "mdHtml": "<h2>Code</h2>\n<p>Here are the high-level definitions for the classes described above.</p>\n<p><strong>Enums, data types, and constants:</strong> Here are the required enums, data types, and constants:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "a99d732c-0335-4352-92d1-6eb0206de4df"
                            },
                            "hash": "12",
                            "iteration": 2,
                            "saveVersion": 1
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public enum BookingStatus {\n  REQUESTED, PENDING, CONFIRMED, CHECKED_IN, CANCELED, ABANDONED\n}\n\npublic enum SeatType {\n  REGULAR, PREMIUM, ACCESSIBLE, SHIPPED, EMERGENCY_EXIT, OTHER\n}\n\npublic enum AccountStatus {\n  ACTIVE, BLOCKED, BANNED, COMPROMISED, ARCHIVED, UNKNOWN\n}\n\npublic enum PaymentStatus {\n  UNPAID, PENDING, COMPLETED, FILLED, DECLINED, CANCELLED, ABANDONED, SETTLING, SETTLED, REFUNDED\n}\n\npublic class Address {\n  private String streetAddress;\n  private String city;\n  private String state;\n  private String zipCode;\n  private String country;\n}\n",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class BookingStatus(Enum):\n  REQUESTED, PENDING, CONFIRMED, CHECKED_IN, CANCELED, ABANDONED = 1, 2, 3, 4, 5, 6\n\n\nclass SeatType(Enum):\n  REGULAR, PREMIUM, ACCESSIBLE, SHIPPED, EMERGENCY_EXIT, OTHER = 1, 2, 3, 4, 5, 6\n\n\nclass AccountStatus(Enum):\n  ACTIVE, BLOCKED, BANNED, COMPROMISED, ARCHIVED, UNKNOWN = 1, 2, 3, 4, 5, 6\n\n\nclass PaymentStatus(Enum):\n  UNPAID, PENDING, COMPLETED, FILLED, DECLINED, CANCELLED, ABANDONED, SETTLING, SETTLED, REFUNDED = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n\n\nclass Address:\n  def __init__(self, street, city, state, zip_code, country):\n    self.__street_address = street\n    self.__city = city\n    self.__state = state\n    self.__zip_code = zip_code\n    self.__country = country\n",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "f537d233-3483-4434-bf1f-c51850dc85e0"
                            },
                            "hash": "27",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Account, Customer, Admin, FrontDeskOfficer, and Guest:** These classes represent the different people that interact with our system:",
                                "mdHtml": "<p><strong>Account, Customer, Admin, FrontDeskOfficer, and Guest:</strong> These classes represent the different people that interact with our system:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "d0a7e71f-627b-48e5-b588-195bcc572b9d"
                            },
                            "hash": "14",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "// For simplicity, we are not defining getter and setter functions. The reader can\n// assume that all class attributes are private and accessed through their respective\n// public getter method and modified only through their public setter method.\n\npublic class Account {\n  private String id;\n  private String password;\n  private AccountStatus status;\n\n  public boolean resetPassword();\n}\n\npublic abstract class Person {\n  private String name;\n  private Address address;\n  private String email;\n  private String phone;\n\n  private Account account;\n}\n\npublic class Customer extends Person {\n  public boolean makeBooking(Booking booking);\n  public List<Booking> getBookings();\n}\n\npublic class Admin extends Person {\n  public boolean addMovie(Movie movie);\n  public boolean addShow(Show show);\n  public boolean blockUser(Customer customer);\n}\n\npublic class FrontDeskOfficer extends Person {\n  public boolean createBooking(Booking booking);\n}\n\npublic class Guest {\n  public bool registerAccount();\n}",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "# For simplicity, we are not defining getter and setter functions. The reader can\n# assume that all class attributes are private and accessed through their respective\n# public getter methods and modified only through their public methods function.\n\n\nclass Account:\n  def __init__(self, id, password, status=AccountStatus.Active):\n    self.__id = id\n    self.__password = password\n    self.__status = status\n\n  def reset_password(self):\n    None\n\n\n# from abc import ABC, abstractmethod\nclass Person(ABC):\n  def __init__(self, name, address, email, phone, account):\n    self.__name = name\n    self.__address = address\n    self.__email = email\n    self.__phone = phone\n    self.__account = account\n\n\nclass Customer(Person):\n  def make_booking(self, booking):\n    None\n\n  def get_bookings(self):\n    None\n\n\nclass Admin(Person):\n  def add_movie(self, movie):\n    None\n\n  def add_show(self, show):\n    None\n\n  def block_user(self, customer):\n    None\n\n\nclass FrontDeskOfficer(Person):\n  def create_booking(self, booking):\n    None\n\n\nclass Guest:\n  def register_account(self):\n    None\n",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "6fc90a4b-8cc1-4975-850d-5a35b704ed0f"
                            },
                            "hash": "28",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Show and Movie:** A movie will have many shows:",
                                "mdHtml": "<p><strong>Show and Movie:</strong> A movie will have many shows:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "5cd3f48f-8a03-4de9-b52d-42eaa42a276c"
                            },
                            "hash": "16",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public class Show {\n  private int showId;\n  private Date createdOn;\n  private Date startTime;\n  private Date endTime;\n  private CinemaHall playedAt;\n  private Movie movie;\n}\n\npublic class Movie {\n  private String title;\n  private String description;\n  private int durationInMins;\n  private String language;\n  private Date releaseDate;\n  private String country;\n  private String genre;\n  private Admin movieAddedBy;\n\n  private List<Show> shows;\n  public List<Show> getShows();\n}\n",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class Show:\n  def __init__(self, id, played_at, movie, start_time, end_time):\n    self.__show_id = id\n    self.__created_on = datetime.date.today()\n    self.__start_time = start_time\n    self.__end_time = end_time\n    self.__played_at = played_at\n    self.__movie = movie\n\n\nclass Movie:\n  def __init__(self, title, description, duration_in_mins, language, release_date, country, genre, added_by):\n    self.__title = title\n    self.__description = description\n    self.__duration_in_mins = duration_in_mins\n    self.__language = language\n    self.__release_date = release_date\n    self.__country = country\n    self.__genre = genre\n    self.__movie_added_by = added_by\n\n    self.__shows = []\n\n  def get_shows(self):\n    None",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "9b0d4d5f-14b8-48e7-bc2b-b97d7f541935"
                            },
                            "hash": "29",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Booking, ShowSeat, and Payment:** Customers will reserve seats with a booking and make a payment:",
                                "mdHtml": "<p><strong>Booking, ShowSeat, and Payment:</strong> Customers will reserve seats with a booking and make a payment:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "61fb6488-02e6-4e1f-82d0-badfe7c0c740"
                            },
                            "hash": "18",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public class Booking {\n  private String bookingNumber;\n  private int numberOfSeats;\n  private Date createdOn;\n  private BookingStatus status;\n\n  private Show show;\n  private List<ShowSeat> seats;\n  private Payment payment;\n\n  public boolean makePayment(Payment payment);\n  public boolean cancel();\n  public boolean assignSeats(List<ShowSeat> seats);\n}\n\npublic class ShowSeat extends CinemaHallSeat{\n  private int showSeatId;\n  private boolean isReserved;\n  private double price;\n}\n\npublic class Payment {\n  private double amount;\n  private Date createdOn;\n  private int transactionId;\n  private PaymentStatus status;\n}\n",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class Booking:\n  def __init__(self, booking_number, number_of_seats, status, show, show_seats, payment):\n    self.__booking_number = booking_number\n    self.__number_of_seats = number_of_seats\n    self.__created_on = datetime.date.today()\n    self.__status = status\n    self.__show = show\n    self.__seats = show_seats\n    self.__payment = payment\n\n  def make_payment(self, payment):\n    None\n\n  def cancel(self):\n    None\n\n  def assign_seats(self, seats):\n    None\n\n\nclass ShowSeat(CinemaHallSeat):\n  def __init__(self, id, is_reserved, price):\n    self.__show_seat_id = id\n    self.__is_reserved = is_reserved\n    self.__price = price\n\n\nclass Payment:\n  def __init__(self, amount, transaction_id, payment_status):\n    self.__amount = amount\n    self.__created_on = datetime.date.today()\n    self.__transaction_id = transaction_id\n    self.__status = payment_status",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "8e082c76-481d-4622-8192-b21dbae93492"
                            },
                            "hash": "30",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**City, Cinema, and CinemaHall:** Each city can have many cinemas and each cinema can have many cinema halls:",
                                "mdHtml": "<p><strong>City, Cinema, and CinemaHall:</strong> Each city can have many cinemas and each cinema can have many cinema halls:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "b640f1d6-8db8-4f09-8b61-e061f7b8ef2e"
                            },
                            "hash": "20",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public class City {\n  private String name;\n  private String state;\n  private String zipCode;\n}\n\npublic class Cinema {\n  private String name;\n  private int totalCinemaHalls;\n  private Address location;\n\n  private List<CinemaHall> halls;\n}\n\npublic class CinemaHall {\n  private String name;\n  private int totalSeats;\n\n  private List<CinemaHallSeat> seats;\n  private List<Show> shows;\n}",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class City:\n  def __init__(self, name, state, zip_code):\n    self.__name = name\n    self.__state = state\n    self.__zip_code = zip_code\n\n\nclass Cinema:\n  def __init__(self, name, total_cinema_halls, address, halls):\n    self.__name = name\n    self.__total_cinema_halls = total_cinema_halls\n    self.__location = address\n\n    self.__halls = halls\n\n\nclass CinemaHall:\n  def __init__(self, name, total_seats, seats, shows):\n    self.__name = name\n    self.__total_seats = total_seats\n\n    self.__seats = seats\n    self.__shows = shows",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "1cb7ca64-f44c-421b-a9b7-628c23479809"
                            },
                            "hash": "31",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "\n**Search interface and Catalog:** Catalog will implement Search to facilitate searching of products.\n",
                                "mdHtml": "<p><strong>Search interface and Catalog:</strong> Catalog will implement Search to facilitate searching of products.</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "02b8c6fa-58cd-4590-8980-5abd5096a415"
                            },
                            "hash": "22",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "edit",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public interface Search {\n  public List<Movie> searchByTitle(String title);\n  public List<Movie> searchByLanguage(String language);\n  public List<Movie> searchByGenre(String genre);\n  public List<Movie> searchByReleaseDate(Date relDate);\n  public List<Movie> searchByCity(String cityName);\n}\n\npublic class Catalog implements Search {\n   HashMap<String, List<Movie>> movieTitles;\n   HashMap<String, List<Movie>> movieLanguages;\n   HashMap<String, List<Movie>> movieGenres;\n   HashMap<Date, List<Movie>> movieReleaseDates;\n   HashMap<String, List<Movie>> movieCities;\n\n  public List<Movie> searchByTitle(String title) {\n    return movieTitles.get(title);\n  }\n\n  public List<Movie> searchByLanguage(String language) {\n    return movieLanguages.get(language);\n  }\n\n  //...\n\n  public List<Movie> searchByCity(String cityName) {\n    return movieCities.get(cityName);\n  }\n}\n",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "from abc import ABC, abstractmethod\n\nclass Search(ABC):\n  def search_by_title(self, title):\n    None\n\n  def search_by_language(self, language):\n    None\n\n  def search_by_genre(self, genre):\n    None\n\n  def search_by_release_date(self, rel_date):\n    None\n\n  def search_by_city(self, city_name):\n    None\n\n\nclass Catalog(Search):\n  def __init__(self):\n    self.__movie_titles = {}\n    self.__movie_languages = {}\n    self.__movie_genres = {}\n    self.__movie_release_dates = {}\n    self.__movie_cities = {}\n\n    def search_by_title(self, title):\n      return self.__movie_titles.get(title)\n\n    def search_by_language(self, language):\n      return self.__movie_languages.get(language)\n\n    # ...\n\n    def search_by_city(self, city_name):\n      return self.__movie_cities.get(city_name)\n",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "9119f950-3251-4667-bc63-5baae4a1299f"
                            },
                            "hash": "32",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## Concurrency\n**How to handle concurrency; such that no two users are able to book the same seat?**\nWe can use transactions in SQL databases to avoid any clashes. For example, if we are using SQL server we can utilize\u00a0[Transaction Isolation Levels](https://docs.microsoft.com/en-us/sql/odbc/reference/develop-app/transaction-isolation-levels) to lock the rows before we update them. Note: within a transaction, if we read rows we get a write-lock on them so that they can't be updated by anyone else. Here is the sample code:\n\n```\nSET TRANSACTION ISOLATION LEVEL SERIALIZABLE;\n\nBEGIN TRANSACTION;\n\n    -- Suppose we intend to reserve three seats (IDs: 54, 55, 56) for ShowID=99 \n    Select * From ShowSeat where ShowID=99 && ShowSeatID in (54, 55, 56) && isReserved=0 \n\n    -- if the number of rows returned by the above statement is NOT three, we can return failure to the user.\n    update ShowSeat table...\n    update Booking table ...\n\nCOMMIT TRANSACTION;\n```\n\n'Serializable' is the highest isolation level and guarantees safety from [Dirty](https://en.wikipedia.org/wiki/Isolation_(database_systems)#Dirty_reads), [Nonrepeatable](https://en.wikipedia.org/wiki/Isolation_(database_systems)#Non-repeatable_reads), and [Phantoms](https://en.wikipedia.org/wiki/Isolation_(database_systems)#Phantom_reads) reads.\n\nOnce the above database transaction is successful, we can safely assume that the reservation has been marked successfully and no two customers will be able to reserve the same seat.\n\nHere is the sample Java code:",
                                "mdHtml": "<h2>Concurrency</h2>\n<p><strong>How to handle concurrency; such that no two users are able to book the same seat?</strong>\nWe can use transactions in SQL databases to avoid any clashes. For example, if we are using SQL server we can utilize\u00a0<a href=\"https://docs.microsoft.com/en-us/sql/odbc/reference/develop-app/transaction-isolation-levels\">Transaction Isolation Levels</a> to lock the rows before we update them. Note: within a transaction, if we read rows we get a write-lock on them so that they can\u2019t be updated by anyone else. Here is the sample code:</p>\n<pre><code>SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;\n\nBEGIN TRANSACTION;\n\n    -- Suppose we intend to reserve three seats (IDs: 54, 55, 56) for ShowID=99 \n    Select * From ShowSeat where ShowID=99 &amp;&amp; ShowSeatID in (54, 55, 56) &amp;&amp; isReserved=0 \n\n    -- if the number of rows returned by the above statement is NOT three, we can return failure to the user.\n    update ShowSeat table...\n    update Booking table ...\n\nCOMMIT TRANSACTION;\n</code></pre>\n<p>\u2018Serializable\u2019 is the highest isolation level and guarantees safety from <a href=\"https://en.wikipedia.org/wiki/Isolation_(database_systems)#Dirty_reads\">Dirty</a>, <a href=\"https://en.wikipedia.org/wiki/Isolation_(database_systems)#Non-repeatable_reads\">Nonrepeatable</a>, and <a href=\"https://en.wikipedia.org/wiki/Isolation_(database_systems)#Phantom_reads\">Phantoms</a> reads.</p>\n<p>Once the above database transaction is successful, we can safely assume that the reservation has been marked successfully and no two customers will be able to reserve the same seat.</p>\n<p>Here is the sample Java code:</p>\n",
                                "cursorPosition": 14,
                                "comp_id": "b1e0acf2-c8e8-4ea6-85ea-ebaf91478e3b"
                            },
                            "hash": "24",
                            "iteration": 1,
                            "saveVersion": 1
                        },
                        {
                            "type": "Code",
                            "mode": "view",
                            "content": {
                                "solutionContent": "\n\n\n",
                                "docker": {
                                    "envs": [],
                                    "jobs": [],
                                    "version": 3,
                                    "container": {
                                        "imageName": "",
                                        "file": {},
                                        "buildStatusUrl": "",
                                        "liveInstance": {
                                            "url": "https://55llq1jkv32yx.educative.run",
                                            "id": "55llq1jkv32yx"
                                        },
                                        "track": false
                                    },
                                    "userVariables": []
                                },
                                "judgeContent": null,
                                "hiddenCodeContent": {
                                    "prependCode": "\n\n",
                                    "appendCode": "\n\n",
                                    "codeSelection": "prependCode"
                                },
                                "enableStdin": false,
                                "caption": "",
                                "theme": "default",
                                "evaluateWithoutExecution": false,
                                "comp_id": "c0411a8f-afec-4b84-8ac0-d3b225a9f26e",
                                "judgeContentPrepend": "\n\n\n",
                                "allowDownload": false,
                                "evaluateLanguage": "java",
                                "additionalContent": [],
                                "judgeHints": null,
                                "showSolution": false,
                                "selectedIndex": 0,
                                "judge": false,
                                "treatOutputAsHTML": false,
                                "version": "7.0",
                                "title": "",
                                "language": "java",
                                "content": "import java.sql.DriverManager;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\nimport java.sql.ResultSet;\n\npublic class Customer extends Person {\n\n  public boolean makeBooking(Booking booking) {\n    List<ShowSeat> seats = booking.getSeats();\n    Integer seatIds[] = new Integer[seats.size()];\n    int index = 0;\n    for(ShowSeat seat : seats) {\n      seatIds[index++] = seat.getShowSeatId();\n    }\n\n    Connection dbConnection = null;\n    try {\n      dbConnection = getDBConnection();\n      dbConnection.setAutoCommit(false);\n      // \u2018Serializable\u2019 is the highest isolation level and guarantees safety from\n      // Dirty, Nonrepeatable, and Phantoms reads\n      dbConnection.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);\n\n      Statement st = dbConnection.createStatement();\n      String selectSQL = \"Select * From ShowSeat where ShowID=? && ShowSeatID in (?) && isReserved=0\";\n      PreparedStatement preparedStatement = dbConnection.prepareStatement(selectSQL);\n      preparedStatement.setInt(1, booking.getShow().getShowId());\n      Array array = dbConnection.createArrayOf(\"INTEGER\", seatIds);\n      preparedStatement.setArray(2, array);\n\n      ResultSet rs = preparedStatement.executeQuery();\n      // With TRANSACTION_SERIALIZABLE all the read rows will have the write lock, so we can\n      // safely assume that no one else is modifying them.\n      if (rs.next()) {\n        rs.last(); // move to the last row, to calculate the row count\n        int rowCount = rs.getRow();\n        // check if we have expected number of rows, if not, this means another process is\n        // trying to process at least one of the same row, if that is the case we\n        // should not process this booking.\n        if(rowCount == seats.size()) {\n          // update ShowSeat table...\n          // update Booking table ...\n          dbConnection.commit();\n          return true;\n        }\n      }\n    } catch (SQLException e) {\n      dbConnection.rollback();\n      System.out.println(e.getMessage());\n    }\n    return false;\n  }\n}\n",
                                "entryFileName": "main.java",
                                "enableHiddenCode": false,
                                "dockerJob": {
                                    "key": ""
                                },
                                "runnable": false
                            },
                            "hash": "25",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "Read [JDBC Transaction Isolation Levels](https://docs.microsoft.com/en-us/sql/connect/jdbc/understanding-isolation-levels?view=sql-server-2017) for details.",
                                "mdHtml": "<p>Read <a href=\"https://docs.microsoft.com/en-us/sql/connect/jdbc/understanding-isolation-levels?view=sql-server-2017\">JDBC Transaction Isolation Levels</a> for details.</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "151c2749-7874-41a1-b1dc-ab49987bb5d2"
                            },
                            "hash": "26",
                            "iteration": 0
                        }
                    ],
                    "summary": {
                        "title": "Design a Movie Ticket Booking System"
                    }
                },
                {
                    "components": [
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "An automated teller machine (ATM) is an electronic telecommunications instrument that provides the clients of a financial institution with access to financial transactions in a public space without the need for a cashier or bank teller. ATMs are necessary as not all the bank branches are open every day of the week, and some customers may not be in a position to visit a bank each time they want to withdraw or deposit money.\n\n",
                                "mdHtml": "<p>An automated teller machine (ATM) is an electronic telecommunications instrument that provides the clients of a financial institution with access to financial transactions in a public space without the need for a cashier or bank teller. ATMs are necessary as not all the bank branches are open every day of the week, and some customers may not be in a position to visit a bank each time they want to withdraw or deposit money.</p>\n",
                                "comp_id": "f1523dd6-384d-4597-a64b-f278eeb8bf64",
                                "cursorPosition": {
                                    "line": 61,
                                    "ch": 47,
                                    "sticky": null
                                }
                            },
                            "hash": "1",
                            "iteration": 1,
                            "saveVersion": 2
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5166378042523648,
                                "style": "original",
                                "caption": "ATM",
                                "borderColor": "#93c47d",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 480,
                                    "height": 320,
                                    "sizeInBytes": 33646,
                                    "name": "atm-1524870_1920.jpg"
                                },
                                "comp_id": "37665c80-d494-4237-9942-364d923dff5d"
                            },
                            "hash": "2",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## Requirements and Goals of the System\n\nThe main components of the ATM that will affect\ninteractions between the ATM and its users are:\n\n1. **Card reader:** to read the users' ATM cards.  \n2. **Keypad:** to enter information into the ATM e.g. PIN.\ncards.  \n3. **Screen:** to display messages to the users.  \n4. **Cash dispenser:** for dispensing cash.  \n5. **Deposit slot:** For users to deposit cash or checks.  \n6. **Printer:** for printing receipts.  \n7. **Communication/Network Infrastructure:** it is assumed that the ATM has a communication infrastructure to communicate with the bank upon any transaction or activity.\n\nThe user can have two types of accounts: 1) Checking, and 2) Savings, and should be able to perform the following five transactions on the ATM:\n  \n1. **Balance inquiry:** To see the amount of funds in each account.  \n2. **Deposit cash:** To deposit cash.  \n3. **Deposit check:** To deposit checks.  \n4. **Withdraw cash** To withdraw money from their checking account.  \n5. **Transfer funds:** To transfer funds to another account. \n\n## How ATM works?\n\nThe ATM will be managed by an operator, who operates the ATM and refills it with cash and receipts. The ATM will serve one customer at a time and should not shut down while serving. To begin a transaction in the ATM, the user should insert their ATM card, which will contain their account information. Then, the user should enter their Personal Identification Number (PIN) for authentication. The ATM will send the user's information to the bank for authentication; without authentication, the user cannot perform any transaction/service. \n\nThe user's ATM card will be kept in the ATM until the user ends a session. For example, the user can end a session at any time by pressing the cancel button, and the ATM Card will be ejected. The ATM will maintain an internal log of transactions that contains information about hardware failures; this log will be used by the ATM operator to resolve any issues.\n\n1. Identify the system user through their PIN.\n2. In the case of depositing checks, the amount of the check will not be added instantly to the user account; it is subject to manual verification and bank approval.\n3. It is assumed that the bank manager will have access to the ATM's system information stored in the bank database.\n4. It is assumed that user deposits will not be added to their account immediately because it will be subject to verification by the bank.\n5. It is assumed the ATM card is the main player when it comes to security; users will authenticate themselves with their debit card and security pin.\n\n## Use cases\n\nHere are the actors of the ATM system and their use cases:\n\n**Operator:** The operator will be responsible for the following operations:\n1. Turning the ATM ON/OFF using the designated Key-Switch.\n2. Refilling the ATM with cash.\n3. Refilling the ATM's printer with receipts.\n4. Refilling the ATM's printer with INK.\n5. Take out deposited cash and checks.\n\n**Customer:** \nThe ATM  customer can perform the following operations:\n\n1. Balance inquiry: the user can view his/her account balance.\n2. Cash withdrawal: the user can withdraw a certain amount of cash.\n3. Deposit funds: the user can deposit cash or checks.\n4. Transfer funds: the user can transfer funds to other accounts.\n\n**Bank Manager:** The Bank Manager can perform the following operations:\n1. Generate a report to check total deposits.\n2. Generate a report to check total withdrawals.\n3. Print total deposits/withdrawal reports.\n4. Checks the remaining cash in the ATM.\n\nHere is the use case diagram of our ATM system:",
                                "mdHtml": "<h2>Requirements and Goals of the System</h2>\n<p>The main components of the ATM that will affect\ninteractions between the ATM and its users are:</p>\n<ol>\n<li><strong>Card reader:</strong> to read the users\u2019 ATM cards.</li>\n<li><strong>Keypad:</strong> to enter information into the ATM e.g. PIN.\ncards.</li>\n<li><strong>Screen:</strong> to display messages to the users.</li>\n<li><strong>Cash dispenser:</strong> for dispensing cash.</li>\n<li><strong>Deposit slot:</strong> For users to deposit cash or checks.</li>\n<li><strong>Printer:</strong> for printing receipts.</li>\n<li><strong>Communication/Network Infrastructure:</strong> it is assumed that the ATM has a communication infrastructure to communicate with the bank upon any transaction or activity.</li>\n</ol>\n<p>The user can have two types of accounts: 1) Checking, and 2) Savings, and should be able to perform the following five transactions on the ATM:</p>\n<ol>\n<li><strong>Balance inquiry:</strong> To see the amount of funds in each account.</li>\n<li><strong>Deposit cash:</strong> To deposit cash.</li>\n<li><strong>Deposit check:</strong> To deposit checks.</li>\n<li><strong>Withdraw cash</strong> To withdraw money from their checking account.</li>\n<li><strong>Transfer funds:</strong> To transfer funds to another account.</li>\n</ol>\n<h2>How ATM works?</h2>\n<p>The ATM will be managed by an operator, who operates the ATM and refills it with cash and receipts. The ATM will serve one customer at a time and should not shut down while serving. To begin a transaction in the ATM, the user should insert their ATM card, which will contain their account information. Then, the user should enter their Personal Identification Number (PIN) for authentication. The ATM will send the user\u2019s information to the bank for authentication; without authentication, the user cannot perform any transaction/service.</p>\n<p>The user\u2019s ATM card will be kept in the ATM until the user ends a session. For example, the user can end a session at any time by pressing the cancel button, and the ATM Card will be ejected. The ATM will maintain an internal log of transactions that contains information about hardware failures; this log will be used by the ATM operator to resolve any issues.</p>\n<ol>\n<li>Identify the system user through their PIN.</li>\n<li>In the case of depositing checks, the amount of the check will not be added instantly to the user account; it is subject to manual verification and bank approval.</li>\n<li>It is assumed that the bank manager will have access to the ATM\u2019s system information stored in the bank database.</li>\n<li>It is assumed that user deposits will not be added to their account immediately because it will be subject to verification by the bank.</li>\n<li>It is assumed the ATM card is the main player when it comes to security; users will authenticate themselves with their debit card and security pin.</li>\n</ol>\n<h2>Use cases</h2>\n<p>Here are the actors of the ATM system and their use cases:</p>\n<p><strong>Operator:</strong> The operator will be responsible for the following operations:</p>\n<ol>\n<li>Turning the ATM ON/OFF using the designated Key-Switch.</li>\n<li>Refilling the ATM with cash.</li>\n<li>Refilling the ATM\u2019s printer with receipts.</li>\n<li>Refilling the ATM\u2019s printer with INK.</li>\n<li>Take out deposited cash and checks.</li>\n</ol>\n<p><strong>Customer:</strong>\nThe ATM  customer can perform the following operations:</p>\n<ol>\n<li>Balance inquiry: the user can view his/her account balance.</li>\n<li>Cash withdrawal: the user can withdraw a certain amount of cash.</li>\n<li>Deposit funds: the user can deposit cash or checks.</li>\n<li>Transfer funds: the user can transfer funds to other accounts.</li>\n</ol>\n<p><strong>Bank Manager:</strong> The Bank Manager can perform the following operations:</p>\n<ol>\n<li>Generate a report to check total deposits.</li>\n<li>Generate a report to check total withdrawals.</li>\n<li>Print total deposits/withdrawal reports.</li>\n<li>Checks the remaining cash in the ATM.</li>\n</ol>\n<p>Here is the use case diagram of our ATM system:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "7d60648e-1741-4ecf-b59a-5aaa17a8e714"
                            },
                            "hash": "3",
                            "iteration": 2,
                            "saveVersion": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5747080974827520,
                                "style": "original",
                                "caption": "ATM use case diagram",
                                "metadata": {
                                    "width": 840,
                                    "height": 834,
                                    "sizeInBytes": 32241,
                                    "name": "ATM - usecase(2).svg"
                                },
                                "comp_id": "c62a5718-84ea-40e9-b69e-2bc799ac5ccb"
                            },
                            "hash": "4",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "edit",
                            "content": {
                                "version": "2.0",
                                "text": "## Class diagram\n\nHere are the main classes of the ATM System:\n\n* **ATM:**  The main part of the system for which this software has been designed. It has attributes like 'atmID' to distinguish it from other available ATMs, and 'location' which defines the physical address of the ATM.\n\n* **CardReader:** To encapsulate the ATM's card reader used for user authentication. \n\n* **CashDispenser:** To encapsulate the ATM component which will dispense cash. \n\n* **Keypad:** The user will use the ATM's keypad to enter their PIN or amounts. \n\n* **Screen:** Users will be shown all messages on the screen and they will select different transactions by touching the screen. \n\n* **Printer:** To print receipts. \n\n* **DepositSlot:** User can deposit checks or cash through the deposit slot.\n\n* **Bank:** To encapsulate the bank which ownns the ATM. The bank will hold all the account information and the ATM will communicate with the bank to perform customer transactions.\n\n* **Account:** We'll have two types of accounts in the system: 1)Checking and 2)Saving.\n\n* **Customer:** This class will encapsulate the ATM's customer. It will have the customer's basic information like name, email, etc.\n\n* **Card:** Encapsulating the ATM card that the customer will use to authenticate themselves. Each customer can have one card.\n\n* **Transaction:** Encapsulating all transactions that the customer can perform on the ATM, like BalanceInquiry, Deposit, Withdraw, etc.\n\n\n\n\n",
                                "mdHtml": "<h2>Class diagram</h2>\n<p>Here are the main classes of the ATM System:</p>\n<ul>\n<li>\n<p><strong>ATM:</strong>  The main part of the system for which this software has been designed. It has attributes like \u2018atmID\u2019 to distinguish it from other available ATMs, and \u2018location\u2019 which defines the physical address of the ATM.</p>\n</li>\n<li>\n<p><strong>CardReader:</strong> To encapsulate the ATM\u2019s card reader used for user authentication.</p>\n</li>\n<li>\n<p><strong>CashDispenser:</strong> To encapsulate the ATM component which will dispense cash.</p>\n</li>\n<li>\n<p><strong>Keypad:</strong> The user will use the ATM\u2019s keypad to enter their PIN or amounts.</p>\n</li>\n<li>\n<p><strong>Screen:</strong> Users will be shown all messages on the screen and they will select different transactions by touching the screen.</p>\n</li>\n<li>\n<p><strong>Printer:</strong> To print receipts.</p>\n</li>\n<li>\n<p><strong>DepositSlot:</strong> User can deposit checks or cash through the deposit slot.</p>\n</li>\n<li>\n<p><strong>Bank:</strong> To encapsulate the bank which ownns the ATM. The bank will hold all the account information and the ATM will communicate with the bank to perform customer transactions.</p>\n</li>\n<li>\n<p><strong>Account:</strong> We\u2019ll have two types of accounts in the system: 1)Checking and 2)Saving.</p>\n</li>\n<li>\n<p><strong>Customer:</strong> This class will encapsulate the ATM\u2019s customer. It will have the customer\u2019s basic information like name, email, etc.</p>\n</li>\n<li>\n<p><strong>Card:</strong> Encapsulating the ATM card that the customer will use to authenticate themselves. Each customer can have one card.</p>\n</li>\n<li>\n<p><strong>Transaction:</strong> Encapsulating all transactions that the customer can perform on the ATM, like BalanceInquiry, Deposit, Withdraw, etc.</p>\n</li>\n</ul>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "2cf84ca9-89e9-4a63-9dd2-26e8d4d35e92"
                            },
                            "hash": "5",
                            "iteration": 2,
                            "saveVersion": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 6700100736778240,
                                "style": "original",
                                "caption": "Class diagram for ATM",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 1000,
                                    "height": 978,
                                    "sizeInBytes": 221068,
                                    "name": "atm.png"
                                },
                                "comp_id": "9bc4f71d-55b6-48b1-8b80-48a85e2335ce"
                            },
                            "hash": "6",
                            "iteration": 0
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 4967772406677504,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 571,
                                    "height": 511,
                                    "sizeInBytes": 25589,
                                    "name": "uml cheat sheet (1).svg"
                                },
                                "comp_id": "f76950af-ab6f-49ce-ae5a-e5196ba06edd"
                            },
                            "hash": "7",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## Activity Diagram\n\n**Customer authentication:** Following is the activity diagram for a customer authenticating themselves to perform an ATM transaction:",
                                "mdHtml": "<h2>Activity Diagram</h2>\n<p><strong>Customer authentication:</strong> Following is the activity diagram for a customer authenticating themselves to perform an ATM transaction:</p>\n",
                                "cursorPosition": {
                                    "line": 2,
                                    "ch": 0,
                                    "sticky": "after",
                                    "xRel": 0
                                },
                                "comp_id": "4e0c1c5a-692e-4c4d-b8b9-a776d6c3fd35"
                            },
                            "hash": "8",
                            "iteration": 2,
                            "saveVersion": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5729327995944960,
                                "style": "original",
                                "caption": "Activity Diagram - Customer Authentication",
                                "metadata": {
                                    "width": 532,
                                    "height": 822,
                                    "sizeInBytes": 23540,
                                    "name": "Validate Customer - Activity Diagram.svg"
                                },
                                "comp_id": "f2713f7d-a2d1-4332-b035-e43ac723154a"
                            },
                            "hash": "9",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Withdraw:** Following is the activity diagram for a user withdrawing cash:",
                                "mdHtml": "<p><strong>Withdraw:</strong> Following is the activity diagram for a user withdrawing cash:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 69,
                                    "sticky": null
                                },
                                "comp_id": "5b8f9724-73a2-4b88-aa7d-bc285a24939a"
                            },
                            "hash": "10",
                            "iteration": 0
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5695586732867584,
                                "style": "original",
                                "caption": "Activity Diagram - Cash Withdraw",
                                "metadata": {
                                    "width": 560,
                                    "height": 1143,
                                    "sizeInBytes": 32986,
                                    "name": "Withdrwa - Activity Diagram.svg"
                                },
                                "comp_id": "9bd4205e-e702-4c52-bff6-dfd4d392119f"
                            },
                            "hash": "11",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Deposit check:** Following is the activity diagram for the customer depositing a check:",
                                "mdHtml": "<p><strong>Deposit check:</strong> Following is the activity diagram for the customer depositing a check:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 66,
                                    "sticky": null
                                },
                                "comp_id": "d91de368-eb2b-4421-972d-0548dc2783c4"
                            },
                            "hash": "12",
                            "iteration": 0
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5199294671880192,
                                "style": "original",
                                "caption": "Activity Diagram - Deposit Check",
                                "metadata": {
                                    "width": 483,
                                    "height": 1106,
                                    "sizeInBytes": 23255,
                                    "name": "Deposit check - Activity Diagram.svg"
                                },
                                "comp_id": "626e2ef1-17ce-4223-ac17-ca4c53e5be45"
                            },
                            "hash": "13",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Transfer:** Following is the activity diagram for a user transferring funds to another account:",
                                "mdHtml": "<p><strong>Transfer:</strong> Following is the activity diagram for a user transferring funds to another account:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 56,
                                    "sticky": null
                                },
                                "comp_id": "f16e5f9e-9567-4e71-a7ee-c4c0d0e388b6"
                            },
                            "hash": "14",
                            "iteration": 0
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 6305737225535488,
                                "style": "original",
                                "caption": "Activity Diagram - Transfer funds",
                                "metadata": {
                                    "width": 557,
                                    "height": 1141,
                                    "sizeInBytes": 85523,
                                    "name": "Transfer - Activity Diagram.png"
                                },
                                "comp_id": "0e35cd9b-8402-4ca5-b8fe-2dbf333d07d5"
                            },
                            "hash": "15",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## Sequence Diagram\n\nHere is the sequence diagram for balance inquiry transaction:",
                                "mdHtml": "<h2>Sequence Diagram</h2>\n<p>Here is the sequence diagram for balance inquiry transaction:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "ad69a6d3-cac7-42dc-8430-f4ff6fef2ed7"
                            },
                            "hash": "16",
                            "iteration": 2,
                            "saveVersion": 1
                        },
                        {
                            "type": "SequenceDiagrams",
                            "mode": "view",
                            "content": {
                                "version": "1.0",
                                "caption": "",
                                "text": "Title: Balance Inquiry Transaction\nCustomer->ATM: getBalance(Account)\nATM->Transaction: balanceInquiryTransaction(Account)\nTransaction->Account: getBalance()\nAccount->CheckingAccount: getBalance()\nCheckingAccount-->Account: Balance\nAccount-->Transaction: Balance\nTransaction-->ATM: Balance\nATM->Screen: displayMessage(Balance)\nScreen-->Customer: showMessage()",
                                "svg_string": "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?><!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 20010904//EN\" \"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1097\" height=\"506\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><source><![CDATA[Title: Balance Inquiry Transaction\nCustomer->ATM: getBalance(Account)\nATM->Transaction: balanceInquiryTransaction(Account)\nTransaction->Account: getBalance()\nAccount->CheckingAccount: getBalance()\nCheckingAccount-->Account: Balance\nAccount-->Transaction: Balance\nTransaction-->ATM: Balance\nATM->Screen: displayMessage(Balance)\nScreen-->Customer: showMessage()]]></source><desc>Balance Inquiry Transaction</desc><defs><marker viewBox=\"0 0 5 5\" markerWidth=\"5\" markerHeight=\"5\" orient=\"auto\" refX=\"5\" refY=\"2.5\" id=\"markerArrowBlock\"><path d=\"M 0 0 L 5 2.5 L 0 5 z\"></path></marker><marker viewBox=\"0 0 9.6 16\" markerWidth=\"4\" markerHeight=\"16\" orient=\"auto\" refX=\"9.6\" refY=\"8\" id=\"markerArrowOpen\"><path d=\"M 9.6,8 1.92,16 0,13.7 5.76,8 0,2.286 1.92,0 9.6,8 z\"></path></marker></defs><g class=\"title\"><rect x=\"10\" y=\"10\" width=\"269.234375\" height=\"28\" stroke=\"#000000\" fill=\"#ffffff\" style=\"stroke-width: 2;\"></rect><text x=\"15\" y=\"29.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"15\">Balance Inquiry Transaction</tspan></text></g><g class=\"actor\"><rect x=\"10\" y=\"48\" width=\"96.8125\" height=\"38\" stroke=\"#000000\" fill=\"#ffffff\" style=\"stroke-width: 2;\"></rect><text x=\"20\" y=\"72.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"20\">Customer</tspan></text></g><g class=\"actor\"><rect x=\"10\" y=\"448\" width=\"96.8125\" height=\"38\" stroke=\"#000000\" fill=\"#ffffff\" style=\"stroke-width: 2;\"></rect><text x=\"20\" y=\"472.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"20\">Customer</tspan></text></g><line x1=\"58.40625\" x2=\"58.40625\" y1=\"86\" y2=\"448\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2;\"></line><g class=\"actor\"><rect x=\"236.4296875\" y=\"48\" width=\"48.796875\" height=\"38\" stroke=\"#000000\" fill=\"#ffffff\" style=\"stroke-width: 2;\"></rect><text x=\"246.4296875\" y=\"72.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"246.4296875\">ATM</tspan></text></g><g class=\"actor\"><rect x=\"236.4296875\" y=\"448\" width=\"48.796875\" height=\"38\" stroke=\"#000000\" fill=\"#ffffff\" style=\"stroke-width: 2;\"></rect><text x=\"246.4296875\" y=\"472.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"246.4296875\">ATM</tspan></text></g><line x1=\"260.828125\" x2=\"260.828125\" y1=\"86\" y2=\"448\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2;\"></line><g class=\"actor\"><rect x=\"544.4765625\" y=\"48\" width=\"125.609375\" height=\"38\" stroke=\"#000000\" fill=\"#ffffff\" style=\"stroke-width: 2;\"></rect><text x=\"554.4765625\" y=\"72.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"554.4765625\">Transaction</tspan></text></g><g class=\"actor\"><rect x=\"544.4765625\" y=\"448\" width=\"125.609375\" height=\"38\" stroke=\"#000000\" fill=\"#ffffff\" style=\"stroke-width: 2;\"></rect><text x=\"554.4765625\" y=\"472.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"554.4765625\">Transaction</tspan></text></g><line x1=\"607.28125\" x2=\"607.28125\" y1=\"86\" y2=\"448\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2;\"></line><g class=\"actor\"><rect x=\"698.8984375\" y=\"48\" width=\"87.203125\" height=\"38\" stroke=\"#000000\" fill=\"#ffffff\" style=\"stroke-width: 2;\"></rect><text x=\"708.8984375\" y=\"72.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"708.8984375\">Account</tspan></text></g><g class=\"actor\"><rect x=\"698.8984375\" y=\"448\" width=\"87.203125\" height=\"38\" stroke=\"#000000\" fill=\"#ffffff\" style=\"stroke-width: 2;\"></rect><text x=\"708.8984375\" y=\"472.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"708.8984375\">Account</tspan></text></g><line x1=\"742.5\" x2=\"742.5\" y1=\"86\" y2=\"448\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2;\"></line><g class=\"actor\"><rect x=\"806.1015625\" y=\"48\" width=\"164.015625\" height=\"38\" stroke=\"#000000\" fill=\"#ffffff\" style=\"stroke-width: 2;\"></rect><text x=\"816.1015625\" y=\"72.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"816.1015625\">CheckingAccount</tspan></text></g><g class=\"actor\"><rect x=\"806.1015625\" y=\"448\" width=\"164.015625\" height=\"38\" stroke=\"#000000\" fill=\"#ffffff\" style=\"stroke-width: 2;\"></rect><text x=\"816.1015625\" y=\"472.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"816.1015625\">CheckingAccount</tspan></text></g><line x1=\"888.109375\" x2=\"888.109375\" y1=\"86\" y2=\"448\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2;\"></line><g class=\"actor\"><rect x=\"990.1171875\" y=\"48\" width=\"77.609375\" height=\"38\" stroke=\"#000000\" fill=\"#ffffff\" style=\"stroke-width: 2;\"></rect><text x=\"1000.1171875\" y=\"72.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"1000.1171875\">Screen</tspan></text></g><g class=\"actor\"><rect x=\"990.1171875\" y=\"448\" width=\"77.609375\" height=\"38\" stroke=\"#000000\" fill=\"#ffffff\" style=\"stroke-width: 2;\"></rect><text x=\"1000.1171875\" y=\"472.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"1000.1171875\">Screen</tspan></text></g><line x1=\"1028.921875\" x2=\"1028.921875\" y1=\"86\" y2=\"448\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2;\"></line><g class=\"signal\"><text x=\"68.40625\" y=\"116.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"68.40625\">getBalance(Account)</tspan></text><line x1=\"58.40625\" x2=\"260.828125\" y1=\"124\" y2=\"124\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2; marker-end: url(&quot;#markerArrowBlock&quot;);\"></line></g><g class=\"signal\"><text x=\"270.828125\" y=\"154.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"270.828125\">balanceInquiryTransaction(Account)</tspan></text><line x1=\"260.828125\" x2=\"607.28125\" y1=\"162\" y2=\"162\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2; marker-end: url(&quot;#markerArrowBlock&quot;);\"></line></g><g class=\"signal\"><text x=\"617.28125\" y=\"192.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"617.28125\">getBalance()</tspan></text><line x1=\"607.28125\" x2=\"742.5\" y1=\"200\" y2=\"200\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2; marker-end: url(&quot;#markerArrowBlock&quot;);\"></line></g><g class=\"signal\"><text x=\"757.6953125\" y=\"230.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"757.6953125\">getBalance()</tspan></text><line x1=\"742.5\" x2=\"888.109375\" y1=\"238\" y2=\"238\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2; marker-end: url(&quot;#markerArrowBlock&quot;);\"></line></g><g class=\"signal\"><text x=\"781.703125\" y=\"268.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"781.703125\">Balance</tspan></text><line x1=\"888.109375\" x2=\"742.5\" y1=\"276\" y2=\"276\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2; stroke-dasharray: 6, 2; marker-end: url(&quot;#markerArrowBlock&quot;);\"></line></g><g class=\"signal\"><text x=\"641.2890625\" y=\"306.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"641.2890625\">Balance</tspan></text><line x1=\"742.5\" x2=\"607.28125\" y1=\"314\" y2=\"314\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2; stroke-dasharray: 6, 2; marker-end: url(&quot;#markerArrowBlock&quot;);\"></line></g><g class=\"signal\"><text x=\"400.453125\" y=\"344.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"400.453125\">Balance</tspan></text><line x1=\"607.28125\" x2=\"260.828125\" y1=\"352\" y2=\"352\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2; stroke-dasharray: 6, 2; marker-end: url(&quot;#markerArrowBlock&quot;);\"></line></g><g class=\"signal\"><text x=\"534.4609375\" y=\"382.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"534.4609375\">displayMessage(Balance)</tspan></text><line x1=\"260.828125\" x2=\"1028.921875\" y1=\"390\" y2=\"390\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2; marker-end: url(&quot;#markerArrowBlock&quot;);\"></line></g><g class=\"signal\"><text x=\"481.2578125\" y=\"420.5\" style=\"font-size: 16px; font-family: &quot;Andale Mono&quot;, monospace;\"><tspan x=\"481.2578125\">showMessage()</tspan></text><line x1=\"1028.921875\" x2=\"58.40625\" y1=\"428\" y2=\"428\" stroke=\"#000000\" fill=\"none\" style=\"stroke-width: 2; stroke-dasharray: 6, 2; marker-end: url(&quot;#markerArrowBlock&quot;);\"></line></g></svg>",
                                "diagram_type": "simple",
                                "comp_id": "1b682bb9-4c7a-447f-b8eb-a69372a01511"
                            },
                            "hash": "17",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## Code\n\nHere is the skeleton code for the classes defined above:\n\n**Enums and Constants:** Here are the required enums, data types, and constants:",
                                "mdHtml": "<h2>Code</h2>\n<p>Here is the skeleton code for the classes defined above:</p>\n<p><strong>Enums and Constants:</strong> Here are the required enums, data types, and constants:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "9fe4e213-35e1-4d71-bc8a-e2cb3f0e3338"
                            },
                            "hash": "18",
                            "iteration": 2,
                            "saveVersion": 1
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public enum TransactionType {\n  BALANCE_INQUIRY, DEPOSIT_CASH, DEPOSIT_CHECK, WITHDRAW, TRANSFER\n}\n\npublic enum TransactionStatus {\n  SUCCESS, FAILURE, BLOCKED, FULL, PARTIAL, NONE\n}\n\npublic enum CustomerStatus {\n  ACTIVE, BLOCKED, BANNED, COMPROMISED, ARCHIVED, CLOSED, UNKNOWN\n}\n\npublic class Address {\n  private String streetAddress;\n  private String city;\n  private String state;\n  private String zipCode;\n  private String country;\n}\n",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class TransactionType(Enum):\n  BALANCE_INQUIRY, DEPOSIT_CASH, DEPOSIT_CHECK, WITHDRAW, TRANSFER = 1, 2, 3, 4, 5\n\n\nclass TransactionStatus(Enum):\n  SUCCESS, FAILURE, BLOCKED, FULL, PARTIAL, NONE = 1, 2, 3, 4, 5, 6\n\n\nclass CustomerStatus(Enum):\n  ACTIVE, BLOCKED, BANNED, COMPROMISED, ARCHIVED, CLOSED, UNKNOWN = 1, 2, 3, 4, 5, 6, 7\n\n\nclass Address:\n  def __init__(self, street, city, state, zip_code, country):\n    self.__street_address = street\n    self.__city = city\n    self.__state = state\n    self.__zip_code = zip_code\n    self.__country = country",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "a11c2282-d213-476d-9ff7-064afd4156fa"
                            },
                            "hash": "19",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Customer, Card, and Account:** \"Customer\" encapsulates the ATM user, \"Card\" the ATM card, and \"Account\" can be of two types: checking and savings:",
                                "mdHtml": "<p><strong>Customer, Card, and Account:</strong> \u201cCustomer\u201d encapsulates the ATM user, \u201cCard\u201d the ATM card, and \u201cAccount\u201d can be of two types: checking and savings:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "b6653702-8187-4703-bc19-93cd5ab38c14"
                            },
                            "hash": "20",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "// For simplicity, we are not defining getter and setter functions. The reader can\n// assume that all class attributes are private and accessed through their respective\n// public getter method and modified only through their public setter function.\n\npublic class Customer {\n  private String name;\n  private String email;\n  private String phone;\n  private Address address;\n  private CustomerStatus status;\n\n  private Card card;\n  private Account account;\n\n  public boolean makeTransaction(Transaction transaction);\n  public Address getBillingAddress();\n}\n\npublic class Card {\n  private String cardNumber;\n  private String customerName;\n  private Date cardExpiry;\n  private int pin;\n\n  public Address getBillingAddress();\n}\n\npublic class Account {\n  private int accountNumber;\n  private double totalBalance;\n  private double availableBalance;\n\n  public double getAvailableBalance();\n}\n\npublic class SavingAccount extends Account {\n  private double withdrawLimit;\n}\n\npublic class CheckingAccount extends Account {\n  private String debitCardNumber;\n}\n",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "# For simplicity, we are not defining getter and setter functions. The reader can\n# assume that all class attributes are private and accessed through their respective\n# public getter methods and modified only through their public methods function.\n\n\nclass Customer:\n  def __init__(self, name, address, email, phone, status):\n    self.__name = name\n    self.__address = address\n    self.__email = email\n    self.__phone = phone\n    self.__status = status\n    self.__card = Card()\n    self.__account = Account\n\n  def make_transaction(self, transaction):\n    None\n\n  def get_billing_address(self):\n    None\n\n\nclass Card:\n  def __init__(self, number, customer_name, expiry, pin):\n    self.__card_number = number\n    self.__customer_name = customer_name\n    self.__card_expiry = expiry\n    self.__pin = pin\n\n  def get_billing_address(self):\n    None\n\n\nclass Account:\n  def __init__(self, account_number):\n    self.__account_number = account_number\n    self.__total_balance = 0.0\n    self.__available_balance = 0.0\n\n  def get_available_balance(self):\n    return self.__available_balance\n\n\nclass SavingAccount(Account):\n  def __init__(self, withdraw_limit):\n    self.__withdraw_limit = withdraw_limit\n\n\nclass CheckingAccount(Account):\n  def __init__(self, debit_card_number):\n    self.__debit_card_number = debit_card_number",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "659b809c-fabc-4a97-bcce-1fe23a2c3a26"
                            },
                            "hash": "21",
                            "iteration": 1,
                            "saveVersion": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Bank, ATM, CashDispenser, Keypad, Screen, Printer and DepositSlot:** The ATM will have different components like keypad, screen, etc.",
                                "mdHtml": "<p><strong>Bank, ATM, CashDispenser, Keypad, Screen, Printer and DepositSlot:</strong> The ATM will have different components like keypad, screen, etc.</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "9656d5c3-b6ae-4610-8bbf-e28080eba9d0"
                            },
                            "hash": "22",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public class Bank {\n  private String name;\n  private String bankCode;\n\n  public String getBankCode();\n  public boolean addATM();\n}\n\npublic class ATM {\n  private int atmID;\n  private Address location;\n\n  private CashDispenser cashDispenser;\n  private Keypad keypad;\n  private Screen screen;\n  private Printer printer;\n  private CheckDeposit checkDeposit;\n  private CashDeposit cashDeposit;\n\n  public boolean authenticateUser();\n  public boolean makeTransaction(Customer customer, Transaction transaction);\n}\n\npublic class CashDispenser {\n  private int totalFiveDollarBills;\n  private int totalTwentyDollarBills;\n\n  public boolean dispenseCash(double amount);\n  public boolean canDispenseCash();\n}\n\npublic class Keypad {\n  public String getInput();\n}\n\npublic class Screen {\n  public boolean showMessage(String message);\n  public TransactionType getInput();\n}\n\npublic class Printer {\n  public boolean printReceipt(Transaction transaction);\n}\n\npublic abstract class DepositSlot {\n  private double totalAmount;\n  public double getTotalAmount();\n}\n\npublic class CheckDepositSlot extends DepositSlot {\n  public double getCheckAmount();\n}\n\npublic class CashDepositSlot extends DepositSlot {\n  public double receiveDollarBill();\n}\n",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class Bank:\n  def __init__(self, name, bank_code):\n    self.__name = name\n    self.__bank_code = bank_code\n\n  def get_bank_code(self):\n    return self.__bank_code\n\n  def add_atm(self, atm):\n    None\n\n\nclass ATM:\n  def __init__(self, id, location):\n    self.__atm_id = id\n    self.__location = location\n\n    self.__cash_dispenser = CashDispenser()\n    self.__keypad = Keypad()\n    self.__screen = Screen()\n    self.__printer = Printer()\n    self.__check_deposit = CheckDeposit()\n    self.__cash_deposit = CashDeposit()\n\n  def authenticate_user(self):\n    None\n\n  def make_transaction(self, customer, transaction):\n    None\n\n\nclass CashDispenser:\n  def __init__(self):\n    self.__total_five_dollar_bills = 0\n    self.__total_twenty_dollar_bills = 0\n\n  def dispense_cash(self, amount):\n    None\n\n  def can_dispense_cash(self):\n    None\n\n\nclass Keypad:\n  def get_input(self):\n    None\n\n\nclass Screen:\n  def show_message(self, message):\n    None\n\n  def get_input(self):\n    None\n\n\nclass Printer:\n  def print_receipt(self, transaction):\n    None\n\n# from abc import ABC, abstractmethod\n\n\nclass DepositSlot(ABC):\n  def __init__(self):\n    self.__total_amount = 0.0\n\n  def get_total_amount(self):\n    return self.__total_amount\n\n\nclass CheckDepositSlot(DepositSlot):\n  def get_check_amount(self):\n    None\n\n\nclass CashDepositSlot(DepositSlot):\n  def receive_dollar_bill(self):\n    None",
                                        "entryFileName": "main.py",
                                        "key": 1,
                                        "onlyCodeChanged": true
                                    }
                                ],
                                "comp_id": "8fe0c7b1-30ec-4ba6-b790-0e6067c38bf1"
                            },
                            "hash": "23",
                            "iteration": 1,
                            "saveVersion": 2
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Transaction and its subclasses:** Customers can perform different transactions on the ATM, these classes encapsulate them:",
                                "mdHtml": "<p><strong>Transaction and its subclasses:</strong> Customers can perform different transactions on the ATM, these classes encapsulate them:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "3ce94334-4542-4547-b61d-690df758a802"
                            },
                            "hash": "24",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public abstract class Transaction {\n  private int transactionId;\n  private Date creationTime;\n  private TransactionStatus status;\n  public boolean makeTransation();\n}\n\npublic class BalanceInquiry extends Transaction {\n  private int accountId;\n  public double getAccountId();\n}\n\npublic abstract class Deposit extends Transaction {\n  private double amount;\n  public double getAmount();\n}\n\npublic class CheckDeposit extends Deposit {\n  private String checkNumber;\n  private String bankCode;\n\n  public String getCheckNumber();\n}\n\npublic class CashDeposit extends Deposit {\n  private double cashDepositLimit;\n}\n\npublic class Withdraw extends Transaction {\n  private double amount;\n  public double getAmount();\n}\n\npublic class Transfer extends Transaction {\n  private int destinationAccountNumber;\n  public int getDestinationAccount();\n}\n",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "from abc import ABC, abstractmethod\n\nclass Transaction(ABC):\n  def __init__(self, id, creation_date, status):\n    self.__transaction_id = id\n    self.__creation_time = creation_date\n    self.__status = status\n\n  def make_transation(self):\n    None\n\n\nclass BalanceInquiry(Transaction):\n  def __init__(self, account_id):\n    self.__account_id = account_id\n\n  def get_account_id(self):\n    return self.__account_id\n\n\nclass Deposit(Transaction):\n  def __init__(self, amount):\n    self.__amount = amount\n\n  def get_amount(self):\n    return self.__amount\n\n\nclass CheckDeposit(Deposit):\n  def __init__(self, check_number, bank_code):\n    self.__check_number = check_number\n    self.__bank_code = bank_code\n\n  def get_check_number(self):\n    return self.__check_number\n\n\nclass CashDeposit(Deposit):\n  def __init__(self, cash_deposit_limit):\n    self.__cash_deposit_limit = cash_deposit_limit\n\n\nclass Withdraw(Transaction):\n  def __init__(self, amount):\n    self.__amount = amount\n\n  def get_amount(self):\n    return self.__amount\n\n\nclass Transfer(Transaction):\n  def __init__(self, destination_account_number):\n    self.__destination_account_number = destination_account_number\n\n  def get_destination_account(self):\n    return self.__destination_account_number",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "520bf21e-5896-4150-b0cc-1dc25c11c40f"
                            },
                            "hash": "25",
                            "iteration": 1
                        }
                    ],
                    "summary": {
                        "title": "Design an ATM"
                    }
                },
                {
                    "components": [
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "An Airline Management System is a managerial software which targets to control all operations of an airline. Airlines provide transport services for their passengers. They carry or hire aircraft for this purpose. All operations of an airline company are controlled by their airline management system.\n\nThis system involves the scheduling of flights, air ticket reservations, flight cancellations, customer support, and staff management. Daily flights updates can also be retrieved by using the system. ",
                                "mdHtml": "<p>An Airline Management System is a managerial software which targets to control all operations of an airline. Airlines provide transport services for their passengers. They carry or hire aircraft for this purpose. All operations of an airline company are controlled by their airline management system.</p>\n<p>This system involves the scheduling of flights, air ticket reservations, flight cancellations, customer support, and staff management. Daily flights updates can also be retrieved by using the system.</p>\n",
                                "comp_id": "3d9750c3-41fd-4374-8bc9-2c680461ac1d",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0,
                                    "sticky": null
                                }
                            },
                            "hash": "1",
                            "iteration": 1,
                            "saveVersion": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5724980415299584,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 901,
                                    "height": 383,
                                    "sizeInBytes": 67046,
                                    "name": "flight reservation 100.png"
                                },
                                "comp_id": "68657110-36f8-4521-a19d-77a7f928db1b"
                            },
                            "hash": "2",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## System Requirements\n\nWe will focus on the following set of requirements while designing the Airline Management System:\n\n1. Customers should be able to search for flights for a given date and source/destination airport.\n\n2. Customers should be able to reserve a ticket for any scheduled flight. Customers can also build a multi-flight itinerary.\n\n3. Users of the system can check flight schedules, their departure time, available seats, arrival time, and other flight details.\n\n4. Customers can make reservations for multiple passengers under one itinerary. \n\n5. Only the admin of the system can add new aircrafts, flights, and flight schedules. Admin can cancel any pre-scheduled flight (all stakeholders will be notified).\n\n6. Customers can cancel their reservation and itinerary. \n\n7. The system should be able to handle the assignment of pilots and crew members to flights.\n\n8. The system should be able to handle payments for reservations.\n\n9. The system should be able to send notifications to customers whenever a reservation is made/modified or there is an update for their flights.\n\n## Use case diagram\n\nWe have five main Actors in our system:\n* **Admin:** Responsible for adding new flights and their schedules, canceling any flight, maintaining staff-related work, etc.\n* **Front desk officer:** Will be able to reserve/cancel tickets.\n* **Customer:** Can view flight schedule, reserve and cancel tickets.\n* **Pilot/Crew:** Can view their assigned flights and their schedules.\n* **System:** Mainly responsible for sending notifications regarding itinerary changes, flight status updates, etc.\n\n\nHere are the top use cases of the Airline Management System:\n* **Search Flights:** To search the flight schedule to find flights for a suitable date and time.\n* **Create/Modify/View reservation:** To reserve a ticket, cancel it, or view details about the flight or ticket.\n* **Assign seats to passengers:** To assign seats to passengers for a flight instance with their reservation.\n* **Make payment for a reservation:** To pay for the reservation.\n* **Update flight schedule:** To make changes in the flight schedule, and to add or remove any flight. \n* **Assign pilots and crew:** To assign pilots and crews to flights.\n",
                                "mdHtml": "<h2>System Requirements</h2>\n<p>We will focus on the following set of requirements while designing the Airline Management System:</p>\n<ol>\n<li>\n<p>Customers should be able to search for flights for a given date and source/destination airport.</p>\n</li>\n<li>\n<p>Customers should be able to reserve a ticket for any scheduled flight. Customers can also build a multi-flight itinerary.</p>\n</li>\n<li>\n<p>Users of the system can check flight schedules, their departure time, available seats, arrival time, and other flight details.</p>\n</li>\n<li>\n<p>Customers can make reservations for multiple passengers under one itinerary.</p>\n</li>\n<li>\n<p>Only the admin of the system can add new aircrafts, flights, and flight schedules. Admin can cancel any pre-scheduled flight (all stakeholders will be notified).</p>\n</li>\n<li>\n<p>Customers can cancel their reservation and itinerary.</p>\n</li>\n<li>\n<p>The system should be able to handle the assignment of pilots and crew members to flights.</p>\n</li>\n<li>\n<p>The system should be able to handle payments for reservations.</p>\n</li>\n<li>\n<p>The system should be able to send notifications to customers whenever a reservation is made/modified or there is an update for their flights.</p>\n</li>\n</ol>\n<h2>Use case diagram</h2>\n<p>We have five main Actors in our system:</p>\n<ul>\n<li><strong>Admin:</strong> Responsible for adding new flights and their schedules, canceling any flight, maintaining staff-related work, etc.</li>\n<li><strong>Front desk officer:</strong> Will be able to reserve/cancel tickets.</li>\n<li><strong>Customer:</strong> Can view flight schedule, reserve and cancel tickets.</li>\n<li><strong>Pilot/Crew:</strong> Can view their assigned flights and their schedules.</li>\n<li><strong>System:</strong> Mainly responsible for sending notifications regarding itinerary changes, flight status updates, etc.</li>\n</ul>\n<p>Here are the top use cases of the Airline Management System:</p>\n<ul>\n<li><strong>Search Flights:</strong> To search the flight schedule to find flights for a suitable date and time.</li>\n<li><strong>Create/Modify/View reservation:</strong> To reserve a ticket, cancel it, or view details about the flight or ticket.</li>\n<li><strong>Assign seats to passengers:</strong> To assign seats to passengers for a flight instance with their reservation.</li>\n<li><strong>Make payment for a reservation:</strong> To pay for the reservation.</li>\n<li><strong>Update flight schedule:</strong> To make changes in the flight schedule, and to add or remove any flight.</li>\n<li><strong>Assign pilots and crew:</strong> To assign pilots and crews to flights.</li>\n</ul>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "bca5030d-69ec-4852-8090-b355dd8d941c"
                            },
                            "hash": "3",
                            "iteration": 2,
                            "saveVersion": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5660460074401792,
                                "style": "original",
                                "caption": "Use case diagram",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 940,
                                    "height": 1044,
                                    "sizeInBytes": 42170,
                                    "name": "usecase(31).svg"
                                },
                                "comp_id": "ff743b28-9658-4455-9f15-9c234e97bf3d"
                            },
                            "hash": "4",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## Class diagram\n\nHere are the main classes of our Airline Management System:\n\n* **Airline:** The main part of the organization for which this software has been designed. It has attributes like \u2018name\u2019 and an airline code to distinguish the airline from other airlines.\n\n* **Airport:** Each airline operates out of different airports. Each airport has a name, address, and a unique code.\n\n* **Aircraft:** Airlines own or hire aircraft to carry out their flights. Each aircraft has attributes like name, model, manufacturing year, etc.\n\n* **Flight:** The main entity of the system. Each flight will have a flight number, departure and arrival airport, assigned aircraft, etc.\n\n* **FlightInstance:** Each flight can have multiple occurrences; each occurrence will be considered a flight instance in our system. For example, if a British Airways flight from London to Tokyo (flight number: BA212) occurs twice a week, each of these occurrences will be considered a separate flight instance in our system.\n\n* **WeeklySchedule and CustomSchedule:** Flights can have multiple schedules and each schedule will create a flight instance. \n\n* **FlightReservation:** A reservation is made against a flight instance and has attributes like a unique reservation number, list of passengers and their assigned seats, reservation status, etc.\n\n* **Itinerary:** An itinerary can have multiple\nflights.\n\n* **FlightSeat:** This class will represent all seats of an aircraft assigned to a specific flight instance. All reservations of this flight instance will assign seats to passengers through this class.\n\n* **Payment:** Will be responsible for collecting payments from customers.\n\n* **Notification:** This class will be responsible for sending notifications for flight reservations, flight status update, etc.\n\n",
                                "mdHtml": "<h2>Class diagram</h2>\n<p>Here are the main classes of our Airline Management System:</p>\n<ul>\n<li>\n<p><strong>Airline:</strong> The main part of the organization for which this software has been designed. It has attributes like \u2018name\u2019 and an airline code to distinguish the airline from other airlines.</p>\n</li>\n<li>\n<p><strong>Airport:</strong> Each airline operates out of different airports. Each airport has a name, address, and a unique code.</p>\n</li>\n<li>\n<p><strong>Aircraft:</strong> Airlines own or hire aircraft to carry out their flights. Each aircraft has attributes like name, model, manufacturing year, etc.</p>\n</li>\n<li>\n<p><strong>Flight:</strong> The main entity of the system. Each flight will have a flight number, departure and arrival airport, assigned aircraft, etc.</p>\n</li>\n<li>\n<p><strong>FlightInstance:</strong> Each flight can have multiple occurrences; each occurrence will be considered a flight instance in our system. For example, if a British Airways flight from London to Tokyo (flight number: BA212) occurs twice a week, each of these occurrences will be considered a separate flight instance in our system.</p>\n</li>\n<li>\n<p><strong>WeeklySchedule and CustomSchedule:</strong> Flights can have multiple schedules and each schedule will create a flight instance.</p>\n</li>\n<li>\n<p><strong>FlightReservation:</strong> A reservation is made against a flight instance and has attributes like a unique reservation number, list of passengers and their assigned seats, reservation status, etc.</p>\n</li>\n<li>\n<p><strong>Itinerary:</strong> An itinerary can have multiple\nflights.</p>\n</li>\n<li>\n<p><strong>FlightSeat:</strong> This class will represent all seats of an aircraft assigned to a specific flight instance. All reservations of this flight instance will assign seats to passengers through this class.</p>\n</li>\n<li>\n<p><strong>Payment:</strong> Will be responsible for collecting payments from customers.</p>\n</li>\n<li>\n<p><strong>Notification:</strong> This class will be responsible for sending notifications for flight reservations, flight status update, etc.</p>\n</li>\n</ul>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "98a876e7-2c07-4f2d-8bf6-aac8f53c88e3"
                            },
                            "hash": "5",
                            "iteration": 2,
                            "saveVersion": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 4971221781315584,
                                "style": "original",
                                "caption": "Class diagram",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 1089,
                                    "height": 1181,
                                    "sizeInBytes": 320029,
                                    "name": "Class Diagram (11).png"
                                },
                                "comp_id": "33a1f29f-e593-4277-b495-3ee55f51ba51"
                            },
                            "hash": "6",
                            "iteration": 0
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 4876244002799616,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 571,
                                    "height": 511,
                                    "sizeInBytes": 25589,
                                    "name": "uml cheat sheet (1).svg"
                                },
                                "comp_id": "7ab7eb65-3d81-4390-ac4b-df49b0c09c08"
                            },
                            "hash": "7",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## Activity diagrams\n\n* **Reserve a ticket:** Any customer can perform this activity. Here are the steps to reserve a ticket:",
                                "mdHtml": "<h2>Activity diagrams</h2>\n<ul>\n<li><strong>Reserve a ticket:</strong> Any customer can perform this activity. Here are the steps to reserve a ticket:</li>\n</ul>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "9b1d625d-1eae-471b-8fc0-060939d9cc6f"
                            },
                            "hash": "8",
                            "iteration": 2,
                            "saveVersion": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5716279616864256,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 533,
                                    "height": 1686,
                                    "sizeInBytes": 42120,
                                    "name": "Make reservation - Activity Diagram(5).svg"
                                },
                                "comp_id": "77279719-44b1-41da-a3b6-1291aebf7f3a"
                            },
                            "hash": "9",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "* **Cancel a reservation:** Any customer can perform this activity. Here are the set of steps to cancel a reservation:",
                                "mdHtml": "<ul>\n<li><strong>Cancel a reservation:</strong> Any customer can perform this activity. Here are the set of steps to cancel a reservation:</li>\n</ul>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "8fd9831a-ddab-4a1c-905b-805d2a0aeeb5"
                            },
                            "hash": "10",
                            "iteration": 0
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5675941284020224,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 473,
                                    "height": 1208,
                                    "sizeInBytes": 28878,
                                    "name": "Cancel reservation - Activity Diagram(5).svg"
                                },
                                "comp_id": "695c0d8f-3042-4f65-9c47-ac6714ead524"
                            },
                            "hash": "11",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## Code\nHere is the code for major classes.\n\n**Enums and Constants:** Here are the required enums, data types, and constants:",
                                "mdHtml": "<h2>Code</h2>\n<p>Here is the code for major classes.</p>\n<p><strong>Enums and Constants:</strong> Here are the required enums, data types, and constants:</p>\n",
                                "cursorPosition": 7,
                                "comp_id": "dd50a313-a9b1-4d13-a65c-b12fd1df5629"
                            },
                            "hash": "12",
                            "iteration": 1,
                            "saveVersion": 1
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public enum FlightStatus{\n  ACTIVE,\n  SCHEDULED,\n  DELAYED,\n  DEPARTED,\n  LANDED,\n  IN_AIR,\n  ARRIVED,\n  CANCELLED,\n  DIVERTED,\n  UNKNOWN\n}\n\npublic enum PaymentStatus{\n  UNPAID,\n  PENDING,\n  COMPLETED,\n  FILLED,\n  DECLINED,\n  CANCELLED,\n  ABANDONED,\n  SETTLING,\n  SETTLED,\n  REFUNDED\n}\n\npublic enum ReservationStatus{\n  REQUESTED,\n  PENDING,\n  CONFIRMED,\n  CHECKED_IN,\n  CANCELLED,\n  ABANDONED\n}\n\npublic enum SeatClass {\n  ECONOMY,\n  ECONOMY_PLUS,\n  PREFERRED_ECONOMY,\n  BUSINESS,\n  FIRST_CLASS\n}\n\npublic enum SeatType {\n  REGULAR,\n  ACCESSIBLE,\n  EMERGENCY_EXIT,\n  EXTRA_LEG_ROOM\n}\n\npublic enum AccountStatus{\n  ACTIVE,\n  CLOSED,\n  CANCELED,\n  BLACKLISTED,\n  BLOCKED\n}\n\npublic class Address {\n  private String streetAddress;\n  private String city;\n  private String state;\n  private String zipCode;\n  private String country;\n}\n",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class FlightStatus(Enum):\n  ACTIVE, SCHEDULED, DELAYED, DEPARTED, LANDED, IN_AIR, ARRIVED, CANCELLED, DIVERTED, UNKNOWN = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n\n\nclass PaymentStatus(Enum):\n  UNPAID, PENDING, COMPLETED, FILLED, DECLINED, CANCELLED, ABANDONED, SETTLING, SETTLED, REFUNDED = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n\n\nclass ReservationStatus(Enum):\n  REQUESTED, PENDING, CONFIRMED, CHECKED_IN, CANCELLED, ABANDONED = 1, 2, 3, 4, 5, 6\n\n\nclass SeatClass(Enum):\n  ECONOMY, ECONOMY_PLUS, PREFERRED_ECONOMY, BUSINESS, FIRST_CLASS = 1, 2, 3, 4, 5\n\n\nclass SeatType(Enum):\n  REGULAR, ACCESSIBLE, EMERGENCY_EXIT, EXTRA_LEG_ROOM = 1, 2, 3, 4, 5\n\n\nclass AccountStatus(Enum):\n  ACTIVE, CLOSED, CANCELED, BLACKLISTED, BLOCKED = 1, 2, 3, 4, 5, 6\n\n\nclass Address:\n  def __init__(self, street, city, state, zip_code, country):\n    self.__street_address = street\n    self.__city = city\n    self.__state = state\n    self.__zip_code = zip_code\n    self.__country = country\n",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "d719462e-6a83-4821-99d2-e1e82c14b0de"
                            },
                            "hash": "20",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Account, Person, Customer and Passenger:** These classes represent the different people that interact with our system:",
                                "mdHtml": "<p><strong>Account, Person, Customer and Passenger:</strong> These classes represent the different people that interact with our system:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "36eaf994-b517-408b-a3ca-164ebcf1b455"
                            },
                            "hash": "14",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "// For simplicity, we are not defining getter and setter functions. The reader can\n// assume that all class attributes are private and accessed through their respective\n// public getter method and modified only through their public setter method.\n\npublic class Account {\n  private String id;\n  private String password;\n  private AccountStatus status;\n\n  public boolean resetPassword();\n}\n\npublic abstract class Person {\n  private String name;\n  private Address address;\n  private String email;\n  private String phone;\n\n  private Account account;\n}\n\npublic class Customer extends Person {\n  private String frequentFlyerNumber;\n\n  public List<Itinerary> getItineraries();\n}\n\npublic class Passenger {\n  private String name;\n  private String passportNumber;\n  private Date dateOfBirth;\n\n  public String getPassportNumber() {\n    return this.passportNumber;\n  }\n}",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "# For simplicity, we are not defining getter and setter functions. The reader can\n# assume that all class attributes are private and accessed through their respective\n# public getter methods and modified only through their public methods function.\n\nclass Account:\n  def __init__(self, id, password, status=AccountStatus.Active):\n    self.__id = id\n    self.__password = password\n    self.__status = status\n\n  def reset_password(self):\n    None\n\n# from abc import ABC, abstractmethod\n\n\nclass Person(ABC):\n  def __init__(self, name, address, email, phone, account):\n    self.__name = name\n    self.__address = address\n    self.__email = email\n    self.__phone = phone\n    self.__account = account\n\n\nclass Customer(Person):\n  def __init__(self, frequent_flyer_number):\n    self.__frequent_flyer_number\n\n  def get_itineraries(self):\n    None\n\n\nclass Passenger:\n  def __init__(self, name, passport_number, date_of_birth):\n    self.__name = name\n    self.__passport_number = passport_number\n    self.__date_of_birth = date_of_birth\n\n  def get_passport_number(self):\n    return self.__passport_number",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "aa404fa5-b59d-4d8d-adf4-124baf52b738"
                            },
                            "hash": "21",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Airport, Aircraft, Seat and FlightSeat:** These classes represent the top-level classes of the system:",
                                "mdHtml": "<p><strong>Airport, Aircraft, Seat and FlightSeat:</strong> These classes represent the top-level classes of the system:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "939125b0-d235-44d8-82a4-878debc0e99e"
                            },
                            "hash": "16",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public class Airport {\n  private String name;\n  private Address address;\n  private String code;\n\n  public List<Flight> getFlights();\n}\n\npublic class Aircraft {\n  private String name;\n  private String model;\n  private int manufacturingYear;\n  private List<Seat> seats;\n\n  public List<FlightInstance> getFlights();\n}\n\npublic class Seat {\n  private String seatNumber;\n  private SeatType type;\n  private SeatClass _class;\n}\n\npublic class FlightSeat extends Seat {\n  private double fare;\n  public double getFare();\n}\n",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class Airport:\n  def __init__(self, name, address, code):\n    self.__name = name\n    self.__address = address\n    self.__code = code\n\n  def get_flights(self):\n    None\n\n\nclass Aircraft:\n  def __init__(self, name, model, manufacturing_year):\n    self.__name = name\n    self.__model = model\n    self.__manufacturing_year = manufacturing_year\n    self.__seats = []\n\n  def get_flights(self):\n    None\n\n\nclass Seat:\n  def __init__(self, seat_number, type, seat_class):\n    self.__seat_number = seat_number\n    self.__type = type\n    self.__seat_class = seat_class\n\n\nclass FlightSeat(Seat):\n  def __init__(self, fare):\n    self.__fare = fare\n\n  def get_fare(self):\n    return self.__fare\n",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "2d607ff2-d5da-4606-9239-01f98b53a542"
                            },
                            "hash": "22",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Flight Schedule classes, Flight, FlightInstance, FlightReservation, Itinerary:** Here are the classes related to flights and reservations:",
                                "mdHtml": "<p><strong>Flight Schedule classes, Flight, FlightInstance, FlightReservation, Itinerary:</strong> Here are the classes related to flights and reservations:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "9823bbfb-4a96-4f4e-8e18-cd4b875bb243"
                            },
                            "hash": "18",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "edit",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public class WeeklySchedule {\n  private int dayOfWeek;\n  private Time departureTime;\n}\n\npublic class CustomSchedule {\n  private Date customDate;\n  private Time departureTime;\n}\n\npublic class Flight {\n  private String flightNumber;\n  private Airport departure;\n  private Airport arrival;\n  private int durationInMinutes;\n\n  private List<WeeklySchedules> weeklySchedules;\n  private List<CustomSchedules> customSchedules;\n  private List<FlightInstance> flightInstances;\n}\n\npublic class FlightInstance {\n  private Date departureTime;\n  private String gate;\n  private FlightStatus status;\n  private Aircraft aircraft;\n\n  public bool cancel();\n  public void updateStatus(FlightStatus status);\n}\n\npublic class FlightReservation {\n  private String reservationNumber;\n  private FlightInstance flight;\n  private Map<Passenger, FlightSeat> seatMap;\n  private Date creationDate;\n  private ReservationStatus status;\n\n  public static FlightReservation fetchReservationDetails(String reservationNumber);\n  public List<Passenger> getPassengers();\n}\n\npublic class Itinerary {\n  private String customerId;\n  private Airport startingAirport;\n  private Airport finalAirport;\n  private Date creationDate;\n  private List<FlightReservation> reservations;\n\n  public List<FlightReservation> getReservations();\n  public boolean makeReservation();\n  public boolean makePayment();\n}\n",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class WeeklySchedule:\n  def __init__(self, day_of_week, departure_time):\n    self.__day_of_week = day_of_week\n    self.__departure_time = departure_time\n\n\nclass CustomSchedule:\n  def __init__(self, custom_date, departure_time):\n    self.__custom_date = custom_date\n    self.__departure_time = departure_time\n\n\nclass Flight:\n  def __init__(self, flight_number, departure, arrival, duration_in_minutes):\n    self.__flight_number = flight_number\n    self.__departure = departure\n    self.__arrival = arrival\n    self.__duration_in_minutes = duration_in_minutes\n\n    self.__weekly_schedules = []\n    self.__custom_schedules = []\n    self.__flight_instances = []\n\n\nclass FlightInstance:\n  def __init__(self, departure_time, gate, status, aircraft):\n    self.__departure_time = departure_time\n    self.__gate = gate\n    self.__status = status\n    self.__aircraft = aircraft\n\n  def cancel(self):\n    None\n\n  def update_status(self, status):\n    None\n\n\nclass FlightReservation:\n  def __init__(self, reservation_number, flight, aircraft, creation_date, status):\n    self.__reservation_number = reservation_number\n    self.__flight = flight\n    self.__seat_map = {}\n    self.__creation_date = creation_date\n    self.__status = status\n\n  def fetch_reservation_details(self, reservation_number):\n    None\n\n  def get_passengers(self):\n    None\n\n\nclass Itinerary:\n  def __init__(self, customer_id, starting_airport, final_airport, creation_date):\n    self.__customer_id = customer_id\n    self.__starting_airport = starting_airport\n    self.__final_airport = final_airport\n    self.__creation_date = creation_date\n    self.__reservations = []\n\n  def get_reservations(self):\n    None\n\n  def make_reservation(self):\n    None\n\n  def make_payment(self):\n    None\n",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "d49c8b7c-e231-4d97-8c79-2a657da527f0"
                            },
                            "hash": "23",
                            "iteration": 1
                        }
                    ],
                    "summary": {
                        "title": "Design an Airline Management System"
                    }
                },
                {
                    "components": [
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "Blackjack is the most widely played casino game in the world. It falls under the category of comparing-card games and is usually played between several players and a dealer. Each player, in turn, competes against the dealer, but players do not play against each other. In Blackjack, all players and the dealer try to build a hand that totals 21 points without going over. The hand closest to 21 wins.\n",
                                "mdHtml": "<p>Blackjack is the most widely played casino game in the world. It falls under the category of comparing-card games and is usually played between several players and a dealer. Each player, in turn, competes against the dealer, but players do not play against each other. In Blackjack, all players and the dealer try to build a hand that totals 21 points without going over. The hand closest to 21 wins.</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "2b2bc150-4a31-4278-bb63-47dbed180710"
                            },
                            "hash": "1",
                            "iteration": 1,
                            "saveVersion": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5684539003240448,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 600,
                                    "height": 400,
                                    "sizeInBytes": 70876,
                                    "name": "cards-blackjack.jpg"
                                },
                                "comp_id": "eae8561c-60ba-4c2b-a6d2-73618b4e6690"
                            },
                            "hash": "2",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## System Requirements\n\nBlackjack is played with one or more standard 52-card decks. The standard deck has 13 ranks in 4 suits. \n\n**Background**\n* To start with, the players and the dealer are dealt separate hands. Each hand has two cards in it. \n* The dealer has one card exposed (the up card) and one card concealed (the hole card), leaving the player with incomplete information about the state of the game. \n* The player\u2019s objective is to make a hand that has more points than the dealer, but less than or equal to 21 points. \n* The player is responsible for placing bets when they are offered, and taking additional cards to complete their hand. \n* The dealer will draw additional cards according to a simple rule: when the dealer\u2019s hand is 16 or less, they will draw cards (called a hit), when it is 17 or more, they will not draw additional cards (or stand pat).\n\n**Points calculation**\n\nBlackjack has different point values for each of the cards:\n* The number cards (2-10) have the expected point values. \n* The face cards (Jack, Queen, and King) all have a value of 10 points. \n* The Ace can count as one point or eleven points. Because of this, an Ace and a 10 or face card totals 21. This two-card winner is called \u201cblackjack\u201d. \n* When the points include an ace counting as 11, the total is called soft-total; when the ace counts as 1, the total is called hard-total. For example, A+5 can be considered a soft 16 or a hard 6. \n\n**Gameplay**\n\n1. The player places an initial bet. \n2. The player and dealer are each dealt a pair of cards. \n3. Both of the player\u2019s cards are face up, the dealer has one card up and one card down. \n4. If the dealer\u2019s card is an ace, the player is offered insurance. \n\nInitially, the player has a number of choices:\n\n* If the two cards are the same rank, the player can elect to split into two hands.\n* The player can double their bet and take just one more card.\n* The more typical scenario is for the player to take additional cards (a hit ) until either their hand totals more than 21 (they bust ), or their hand totals exactly 21, or they elect to stand.\n\nIf the player\u2019s hand is over 21, their bet is resolved immediately as a loss. If the player\u2019s hand is 21 or less, it will be compared to the dealer\u2019s hand for resolution.\n\n**Dealer has an Ace.** If the dealer\u2019s up card is an ace, the player is offered an insurance bet. This is an additional proposition that pays 2:1 if the dealer\u2019s hand is exactly 21. If this insurance bet wins, it will, in effect, cancel the loss of the initial bet. After offering insurance to the player, the dealer will check their hole card and resolve the insurance bets. If the hole card is a 10-point card, the dealer has blackjack, the card is revealed, and insurance bets are paid. If the hole card is not a 10-point card, the insurance bets are lost, but the card is not revealed.\n\n**Split Hands.** When dealt two cards of the same rank, the player can split the cards to create two hands. This requires an additional bet on the new hand. The dealer will deal an additional card to each new hand, and the hands are played independently. Generally, the typical scenario described above applies to each of these hands.\n\n**Bets**\n\n* Ante: This is the initial bet and is mandatory to play.\n* Insurance: This bet is offered only when the dealer shows an ace. The amount must be half the ante.\n* Split: This can be thought of as a bet that is offered only when the player\u2019s hand has two cards of equal rank. The amount of the bet must match the original ante.\n* Double: This can be thought of as a bet that is offered instead of taking an ordinary hit. The amount of the bet must match the original ante.\n\n\n## Use case diagram\n\nWe have two main Actors in our system:\n\n* **Dealer:** Mainly responsible for dealing cards and game resolution.\n* **Player:** Places the initial bets, accepts or declines additional bets - including insurance, and splits hands. Accepts or rejects the offered resolution, including even money. Chooses among hit, double and stand pat options.\n\n**Typical Blackjack Game Use cases**\n\nHere are the top use cases of the Blackjack game:\n\n* **Create Hands:** Initially both the player and the dealer are given two cards each. The player has both cards visible whereas only one card of the dealer's hand is visible to the player.\n\n* **Place Bet:** To start the game, the player has to place a bet.\n\n* **Player plays the hand:** If the hand is under 21 points, the player has three options: \n    * Hit: The hand gets an additional card and this process repeats. \n    * Double Down: The player creates an additional bet, and the hand gets one more card and play is done. \n    * Stands Pat: If the hand is 21 points or over, or the player chooses to stand pat, the game is over.\n\n  * Resolve Bust. If a hand is over 21, it is resolved as a loser.\n\n* **Dealer plays the hand:** The dealer keeps getting a new card if the total point value of the hand is 16 or less, and stops dealing cards at the point value of 17 or more.\n  * Dealer Bust: If the dealer's hand is over 21, the player\u2019s wins the game. Player Hands with two cards totaling 21 ( \u201cblackjack\u201d ) are paid 3:2, all other hands are paid 1:1.\n\n* **Insurance:** If the dealer's up card is an Ace, then the player is offered insurance:\n  * Offer Even Money: If the player\u2019s hand totals to a soft 21, a blackjack; the player is offered an even money resolution. If the player accepts, the entire game is resolved at this point. The ante is paid at even money; there is no insurance bet.\n  * Offer Insurance: The player is offered insurance, which they can accept by creating a bet. For players with blackjack, this is the second offer after even money is declined. If the player declines, there are no further insurance considerations.\n  * Examine Hole Card: The dealer\u2019s hole card is examined. If it has a 10-point value, the insurance bet is resolved as a winner, and the game is over. Otherwise, the insurance is resolved as a loser, the hole card is not revealed, and play continues. \n\n* **Split:** If the player\u2019s hand has both cards of equal rank, the player is offered a split. The player accepts by creating an additional Bet. The original hand is removed; The two original cards are split and then the dealer deals two extra cards to create two new Hands. There will not be any further splitting.\n\n* **Game Resolution:** The Player\u2019s Hand is compared against the Dealer\u2019s Hand, and the hand with the higher point value wins. In the case of a tie, the bet is returned. When the player wins, a winning hand with two cards totaling 21 (\u201cblackjack\u201d) is paid 3:2, any other winning hand is paid 1:1.\n",
                                "mdHtml": "<h2>System Requirements</h2>\n<p>Blackjack is played with one or more standard 52-card decks. The standard deck has 13 ranks in 4 suits.</p>\n<p><strong>Background</strong></p>\n<ul>\n<li>To start with, the players and the dealer are dealt separate hands. Each hand has two cards in it.</li>\n<li>The dealer has one card exposed (the up card) and one card concealed (the hole card), leaving the player with incomplete information about the state of the game.</li>\n<li>The player\u2019s objective is to make a hand that has more points than the dealer, but less than or equal to 21 points.</li>\n<li>The player is responsible for placing bets when they are offered, and taking additional cards to complete their hand.</li>\n<li>The dealer will draw additional cards according to a simple rule: when the dealer\u2019s hand is 16 or less, they will draw cards (called a hit), when it is 17 or more, they will not draw additional cards (or stand pat).</li>\n</ul>\n<p><strong>Points calculation</strong></p>\n<p>Blackjack has different point values for each of the cards:</p>\n<ul>\n<li>The number cards (2-10) have the expected point values.</li>\n<li>The face cards (Jack, Queen, and King) all have a value of 10 points.</li>\n<li>The Ace can count as one point or eleven points. Because of this, an Ace and a 10 or face card totals 21. This two-card winner is called \u201cblackjack\u201d.</li>\n<li>When the points include an ace counting as 11, the total is called soft-total; when the ace counts as 1, the total is called hard-total. For example, A+5 can be considered a soft 16 or a hard 6.</li>\n</ul>\n<p><strong>Gameplay</strong></p>\n<ol>\n<li>The player places an initial bet.</li>\n<li>The player and dealer are each dealt a pair of cards.</li>\n<li>Both of the player\u2019s cards are face up, the dealer has one card up and one card down.</li>\n<li>If the dealer\u2019s card is an ace, the player is offered insurance.</li>\n</ol>\n<p>Initially, the player has a number of choices:</p>\n<ul>\n<li>If the two cards are the same rank, the player can elect to split into two hands.</li>\n<li>The player can double their bet and take just one more card.</li>\n<li>The more typical scenario is for the player to take additional cards (a hit ) until either their hand totals more than 21 (they bust ), or their hand totals exactly 21, or they elect to stand.</li>\n</ul>\n<p>If the player\u2019s hand is over 21, their bet is resolved immediately as a loss. If the player\u2019s hand is 21 or less, it will be compared to the dealer\u2019s hand for resolution.</p>\n<p><strong>Dealer has an Ace.</strong> If the dealer\u2019s up card is an ace, the player is offered an insurance bet. This is an additional proposition that pays 2:1 if the dealer\u2019s hand is exactly 21. If this insurance bet wins, it will, in effect, cancel the loss of the initial bet. After offering insurance to the player, the dealer will check their hole card and resolve the insurance bets. If the hole card is a 10-point card, the dealer has blackjack, the card is revealed, and insurance bets are paid. If the hole card is not a 10-point card, the insurance bets are lost, but the card is not revealed.</p>\n<p><strong>Split Hands.</strong> When dealt two cards of the same rank, the player can split the cards to create two hands. This requires an additional bet on the new hand. The dealer will deal an additional card to each new hand, and the hands are played independently. Generally, the typical scenario described above applies to each of these hands.</p>\n<p><strong>Bets</strong></p>\n<ul>\n<li>Ante: This is the initial bet and is mandatory to play.</li>\n<li>Insurance: This bet is offered only when the dealer shows an ace. The amount must be half the ante.</li>\n<li>Split: This can be thought of as a bet that is offered only when the player\u2019s hand has two cards of equal rank. The amount of the bet must match the original ante.</li>\n<li>Double: This can be thought of as a bet that is offered instead of taking an ordinary hit. The amount of the bet must match the original ante.</li>\n</ul>\n<h2>Use case diagram</h2>\n<p>We have two main Actors in our system:</p>\n<ul>\n<li><strong>Dealer:</strong> Mainly responsible for dealing cards and game resolution.</li>\n<li><strong>Player:</strong> Places the initial bets, accepts or declines additional bets - including insurance, and splits hands. Accepts or rejects the offered resolution, including even money. Chooses among hit, double and stand pat options.</li>\n</ul>\n<p><strong>Typical Blackjack Game Use cases</strong></p>\n<p>Here are the top use cases of the Blackjack game:</p>\n<ul>\n<li>\n<p><strong>Create Hands:</strong> Initially both the player and the dealer are given two cards each. The player has both cards visible whereas only one card of the dealer\u2019s hand is visible to the player.</p>\n</li>\n<li>\n<p><strong>Place Bet:</strong> To start the game, the player has to place a bet.</p>\n</li>\n<li>\n<p><strong>Player plays the hand:</strong> If the hand is under 21 points, the player has three options:</p>\n<ul>\n<li>\n<p>Hit: The hand gets an additional card and this process repeats.</p>\n</li>\n<li>\n<p>Double Down: The player creates an additional bet, and the hand gets one more card and play is done.</p>\n</li>\n<li>\n<p>Stands Pat: If the hand is 21 points or over, or the player chooses to stand pat, the game is over.</p>\n</li>\n<li>\n<p>Resolve Bust. If a hand is over 21, it is resolved as a loser.</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Dealer plays the hand:</strong> The dealer keeps getting a new card if the total point value of the hand is 16 or less, and stops dealing cards at the point value of 17 or more.</p>\n<ul>\n<li>Dealer Bust: If the dealer\u2019s hand is over 21, the player\u2019s wins the game. Player Hands with two cards totaling 21 ( \u201cblackjack\u201d ) are paid 3:2, all other hands are paid 1:1.</li>\n</ul>\n</li>\n<li>\n<p><strong>Insurance:</strong> If the dealer\u2019s up card is an Ace, then the player is offered insurance:</p>\n<ul>\n<li>Offer Even Money: If the player\u2019s hand totals to a soft 21, a blackjack; the player is offered an even money resolution. If the player accepts, the entire game is resolved at this point. The ante is paid at even money; there is no insurance bet.</li>\n<li>Offer Insurance: The player is offered insurance, which they can accept by creating a bet. For players with blackjack, this is the second offer after even money is declined. If the player declines, there are no further insurance considerations.</li>\n<li>Examine Hole Card: The dealer\u2019s hole card is examined. If it has a 10-point value, the insurance bet is resolved as a winner, and the game is over. Otherwise, the insurance is resolved as a loser, the hole card is not revealed, and play continues.</li>\n</ul>\n</li>\n<li>\n<p><strong>Split:</strong> If the player\u2019s hand has both cards of equal rank, the player is offered a split. The player accepts by creating an additional Bet. The original hand is removed; The two original cards are split and then the dealer deals two extra cards to create two new Hands. There will not be any further splitting.</p>\n</li>\n<li>\n<p><strong>Game Resolution:</strong> The Player\u2019s Hand is compared against the Dealer\u2019s Hand, and the hand with the higher point value wins. In the case of a tie, the bet is returned. When the player wins, a winning hand with two cards totaling 21 (\u201cblackjack\u201d) is paid 3:2, any other winning hand is paid 1:1.</p>\n</li>\n</ul>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "0cec8fa2-66df-4d1f-972f-6c1308fe71b6"
                            },
                            "hash": "3",
                            "iteration": 2,
                            "saveVersion": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5647591547076608,
                                "style": "original",
                                "caption": "Use case diagram",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 828,
                                    "height": 1044,
                                    "sizeInBytes": 36674,
                                    "name": "usecase(16).svg"
                                },
                                "comp_id": "328fffad-abc8-47ec-a8e1-e890dd684547"
                            },
                            "hash": "4",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## Class diagram\n\nHere are the main classes of our Blackjack game:\n\n* **Card:** A standard playing card has a suit and point value from 1 to 11.\n\n* **BlackjackCard:** In blackjack, cards have different face values. For example, jack, queen, and king, all have a face value of 10. An ace can be counted as either 1 or 11.\n\n* **Deck:** A standard playing card deck has 52 cards and 4 suits.\n\n* **Shoe:** Contains a set of decks. In casinos, a dealer's shoe is a gaming device to hold multiple decks of playing cards.\n\n* **Hand:** A collection of cards with one or two point values: a hard value (when an ace counts as 1) and a soft value (when an ace counts as 11). \n\n* **Player:** Places the initial bets, updates the stake with amounts won and lost. Accepts or declines offered additional bets - including insurance, and split hands. Accepts or declines offered resolution, including even money. Chooses between hit, double and stand options.\n\n* **Game:** This class encapsulates the basic sequence of play. It runs the game, offers bets to players, deals the cards from the shoe to hands, updates the state of the game, collects losing bets, pays winning bets, splits hands, and responds to player choices of a hit, double or stand. \n\n\n",
                                "mdHtml": "<h2>Class diagram</h2>\n<p>Here are the main classes of our Blackjack game:</p>\n<ul>\n<li>\n<p><strong>Card:</strong> A standard playing card has a suit and point value from 1 to 11.</p>\n</li>\n<li>\n<p><strong>BlackjackCard:</strong> In blackjack, cards have different face values. For example, jack, queen, and king, all have a face value of 10. An ace can be counted as either 1 or 11.</p>\n</li>\n<li>\n<p><strong>Deck:</strong> A standard playing card deck has 52 cards and 4 suits.</p>\n</li>\n<li>\n<p><strong>Shoe:</strong> Contains a set of decks. In casinos, a dealer\u2019s shoe is a gaming device to hold multiple decks of playing cards.</p>\n</li>\n<li>\n<p><strong>Hand:</strong> A collection of cards with one or two point values: a hard value (when an ace counts as 1) and a soft value (when an ace counts as 11).</p>\n</li>\n<li>\n<p><strong>Player:</strong> Places the initial bets, updates the stake with amounts won and lost. Accepts or declines offered additional bets - including insurance, and split hands. Accepts or declines offered resolution, including even money. Chooses between hit, double and stand options.</p>\n</li>\n<li>\n<p><strong>Game:</strong> This class encapsulates the basic sequence of play. It runs the game, offers bets to players, deals the cards from the shoe to hands, updates the state of the game, collects losing bets, pays winning bets, splits hands, and responds to player choices of a hit, double or stand.</p>\n</li>\n</ul>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "38a82ed1-2675-4c71-8d6c-62d2fdf6960c"
                            },
                            "hash": "5",
                            "iteration": 2,
                            "saveVersion": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5734309889572864,
                                "style": "original",
                                "caption": "Class diagram",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 908,
                                    "height": 829,
                                    "sizeInBytes": 45388,
                                    "name": "Class Diagram(66).svg"
                                },
                                "comp_id": "12d626a8-d00a-4709-94ca-1f60b5cbc23c"
                            },
                            "hash": "6",
                            "iteration": 0
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 6348088258068480,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 571,
                                    "height": 511,
                                    "sizeInBytes": 25589,
                                    "name": "uml cheat sheet (1).svg"
                                },
                                "comp_id": "1ca7dd5f-a328-40fd-baee-eb1f632ba1ae"
                            },
                            "hash": "7",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## Activity diagrams\n\n**Blackjack hit or stand:** Here are the set of steps to play blackjack with hit or stand:",
                                "mdHtml": "<h2>Activity diagrams</h2>\n<p><strong>Blackjack hit or stand:</strong> Here are the set of steps to play blackjack with hit or stand:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "da7b6066-924b-42f1-8ff4-e362c4eadc7c"
                            },
                            "hash": "8",
                            "iteration": 2,
                            "saveVersion": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5763263606292480,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 823,
                                    "height": 1401,
                                    "sizeInBytes": 33354,
                                    "name": "Blackjack - Activity Diagram.svg"
                                },
                                "comp_id": "7fbc4963-3bcb-4102-9c94-bf8a2a153bb5"
                            },
                            "hash": "9",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## Code\n\n**Enums:** Here are the required enums:",
                                "mdHtml": "<h2>Code</h2>\n<p><strong>Enums:</strong> Here are the required enums:</p>\n",
                                "cursorPosition": 3,
                                "comp_id": "f4129c65-ae36-4981-8bdc-87780233a9aa"
                            },
                            "hash": "10",
                            "iteration": 1,
                            "saveVersion": 1
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public enum SUIT {\n  HEART, SPADE, CLUB, DIAMOND\n}",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class SUIT(Enum):\n  HEART, SPADE, CLUB, DIAMOND = 1, 2, 3, 4",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "e197041d-8d61-47ca-a694-913af7c7bdbb"
                            },
                            "hash": "24",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Card:** The following class encapsulates a playing card:",
                                "mdHtml": "<p><strong>Card:</strong> The following class encapsulates a playing card:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "30bd9cf5-93cd-4b12-9cec-278da0b58850"
                            },
                            "hash": "12",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public class Card {\n  private SUIT suit;\n  private int faceValue;\n\n public SUIT getSuit() {\n    return suit;\n  }\n\n  public int getFaceValue() {\n    return faceValue;\n  }\n\n  Card(SUIT suit, int faceValue) {\n    this.suit = suit;\n    this.faceVale = faceValue;\n  }\n}\n",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class Card:\n  def __init__(self, suit, face_value):\n    self.__suit = suit\n    self.__face_value = face_value\n\n  def get_suit(self):\n    return self.__suit\n\n  def get_face_value(self):\n    return self.__face_value\n",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "6f2ab3ef-e1ae-401f-a153-fe8894e1474d"
                            },
                            "hash": "25",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**BlackjackCard:** BlackjackCard extends from Card class to represent a blackjack card:",
                                "mdHtml": "<p><strong>BlackjackCard:</strong> BlackjackCard extends from Card class to represent a blackjack card:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "fd87b842-5276-469f-b212-9f257b712474"
                            },
                            "hash": "14",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public class BlackjackCard extends Card {\n  private int gameValue;\n\n  public int getGameValue() {\n    return gameValue;\n  }\n\n  public BlackjackCard(SUIT suit, int faceValue) {\n    super(suit, faceValue);\n    this.gameValue = faceValue;\n    if(this.gameValue > 10) {\n      this.gameValue = 10;\n    }\n  }\n}\n",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class BlackjackCard(Card):\n  def __init__(self, suit, face_value):\n    super().__init__(suit, face_value)\n    self.__game_value = face_value\n    if self.__game_value > 10:\n      self.__game_value = 10\n\n  def get_game_value(self):\n    return self.__game_value",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "82e8009a-4b19-4774-8226-3b0884f6a45c"
                            },
                            "hash": "26",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Deck and Shoe:** Shoe contains cards from multiple decks:",
                                "mdHtml": "<p><strong>Deck and Shoe:</strong> Shoe contains cards from multiple decks:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "48fd63fc-01a5-4a37-8370-147ca46b50ab"
                            },
                            "hash": "16",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public class Deck {\n  private List<BlackjackCard> cards;\n  private Date creationDate;\n\n  public Deck() {\n    this.creationDate = new Date();\n    this.cards = new ArrayList<BlackjackCard>();\n    for(int value = 1 ; value <= 13 ; value++){\n      for(SUIT suit : SUIT.values()){\n        this.cards.add(new BlackjackCard(suit, value));\n      }\n    }\n  }\n\n  public List<BlackjackCard> getCards() {\n    return cards;\n}\n\npublic class Shoe {\n  private List<BlackjackCard> cards;\n  private int numberOfDecks;\n\n  private void createShoe() {\n    this.cards = new ArrayList<BlackjackCard>();\n    for(int decks = 0 ; decks < numberOfDecks ; decks++){\n      cards.add(new Deck().getCards());\n    }\n  }\n\n  public Shoe(int numberOfDecks) {\n    this.numberOfDecks = numberOfDecks;\n    createShoe();\n    shuffle();\n  }\n\n  public void shuffle() {\n    int cardCount = cards.size();\n    Random r = new Random();\n    for (int i = 0; i < cardCount ; i++){\n      int index = r.nextInt(cardCount-i-1);\n      swap(i, index);\n    }\n  }\n\n  public void swap(int i, int j) {\n    BlackjackCard temp = cards[i];\n    cards[i] = cards[j];\n    cards[j] = temp;\n  }\n\n  //Get the next card from the shoe\n  public BlackjackCard dealCard() {\n    if(cards.size() == 0 ){\n      createShoe();\n    }\n    return cards.remove(0);\n  }\n}\n",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class Deck:\n  def __init__(self):\n    self.__cards = []\n    self.__creation_date = datetime.date.today()\n    for value in range(1, 14):\n      for suit in SUIT:\n        self.__cards.add(BlackjackCard(suit, value))\n\n  def get_cards(self):\n    self.__cards\n\n\nclass Shoe:\n  def __init__(self, number_of_decks):\n    self.__cards = []\n    self.__number_of_decks = number_of_decks\n    self.create_shoe()\n    self.shuffle()\n\n  def create_shoe(self):\n    for decks in range(0, self.__number_of_decks):\n      self.__cards.add(Deck().get_cards())\n\n  import random\n\n  def shuffle(self):\n    card_count = self.__cards.size()\n    for i in range(0, card_count):\n      j = random.randrange(0, card_count - i - 1, 1)\n      self.__cards[i], self.__cards[j] = self.__cards[j], self.__cards[i]\n\n  # Get the next card from the shoe\n  def deal_card(self):\n    if self.__cards.size() == 0:\n      create_shoe()\n    return self.__cards.remove(0)",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "70630a1e-9f76-4588-b2a9-ed664e0214c1"
                            },
                            "hash": "27",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Hand:** Hand class encapsulates a blackjack hand which can contain multiple cards:",
                                "mdHtml": "<p><strong>Hand:</strong> Hand class encapsulates a blackjack hand which can contain multiple cards:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "b0c9a9d8-93a1-40f3-bf19-4f4326ab94ad"
                            },
                            "hash": "18",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public class Hand {\n  private ArrayList<BlackjackCard> cards;\n\n  private List<Integer> getScores() {\n    List<Integer> totals = new ArrayList();\n    total.add(0);\n\n    for (BlackjackCard card : cards) {\n      List<Integer> newTotals = new ArrayList();\n      for (int score : totals) {\n        newTotals.add(card.faceValue() + score);\n        if (card.faceValue() == 1) {\n          newTotals.add(11 + score);\n        }\n      }\n      totals = newTotals;\n    }\n    return totals;\n  }\n\n  public Hand(BlackjackCard c1, BlackjackCard c2) {\n    this.cards = new ArrayList<BlackjackCard>();\n    this.cards.add(c1);\n    this.cards.add(c2);\n  }\n\n  public void addCard(BlackjackCard card) {\n    cards.add(card);\n  }\n\n  // get highest score which is less than or equal to 21\n  public int resolveScore() {\n    List<Integer> scores = getScores();\n    int bestScore = 0;\n    for (int score : scores) {\n      if (score <= 21 && score > bestScore) {\n        bestScore = score;\n      }\n    }\n    return bestScore;\n  }\n}",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class Hand:\n  def __init__(self, blackjack_card1, blackjack_card2):\n    self.__cards = [blackjack_card1, blackjack_card1]\n\n  def get_scores(self):\n    totals = [0]\n\n    for card in self.__cards:\n      new_totals = []\n      for score in totals:\n        new_totals.add(card.face_value() + score)\n        if card.face_value() == 1:\n          new_totals.add(11 + score)\n\n      totals = new_totals\n\n    return totals\n\n  def add_card(self, card):\n    self.__cards.add(card)\n\n  # get highest score which is less than or equal to 21\n\n  def resolve_score(self):\n    scores = self.get_scores()\n    best_score = 0\n    for score in scores:\n      if score <= 21 and score > best_score:\n        best_score = score\n\n    return best_score",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "9a18d5e3-11ca-46ed-a391-e0ba2976a6b1"
                            },
                            "hash": "28",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Player:** Player class extends from BasePlayer:",
                                "mdHtml": "<p><strong>Player:</strong> Player class extends from BasePlayer:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "00fc7413-a13d-4083-8d62-36414460fcf8"
                            },
                            "hash": "20",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public abstract class BasePlayer {\n  private String id;\n  private String password;\n  private double balance;\n  private AccountStatus status;\n  private Person person;\n  private List<Hand> hands;\n\n  public boolean resetPassword();\n\n  public List<Hand> getHands() {\n    return hands;\n  }\n\n  public void addHand(Hand hand) {\n    return hands.add(hand);\n  }\n\n  public void removeHand(Hand hand) {\n    hands.remove(hand);\n  }\n}\n\npublic class Player extends BasePlayer {\n  private int bet;\n  private int totalCash;\n\n  public Player(Hand hand) {\n    this.hands = new ArrayList<Hand>();\n    this.hands.add(hand);\n  }\n}",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "from abc import ABC, abstractmethod\n\nclass BasePlayer(ABC):\n  def __init__(self, id, password, balance, status, person):\n    self.__id = id\n    self.__password = password\n    self.__balance = balance\n    self.__status = status\n    self.__person = person\n    self.__hands = []\n\n  def reset_password(self):\n    None\n\n  def get_hands(self):\n    return self.__hands\n\n  def add_hand(self, hand):\n    return self.__hands.add(hand)\n\n  def remove_hand(self, hand):\n    self.__hands.remove(hand)\n\n\nclass Player(BasePlayer):\n  def __init__(self, id, password, balance, status, person):\n    super.__init__(id, password, balance, status, person)\n    self.__bet = 0\n    self.__total_cash = 0\n\n\nclass Dealer(BasePlayer):\n  def __init__(self, id, password, balance, status, person):\n    super.__init__(id, password, balance, status, person)",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "f2824a0f-6788-47ba-9a71-f1533929c6ba"
                            },
                            "hash": "29",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Game:** This class encapsulates a blackjack game:",
                                "mdHtml": "<p><strong>Game:</strong> This class encapsulates a blackjack game:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "4f262ea4-f1f5-4a6f-ba89-e95175ab16b6"
                            },
                            "hash": "22",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "edit",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public class Game {\n  private Player player;\n  private Dealer dealer;\n  private Shoe shoe;\n  private final int MAX_NUM_OF_DECKS = 3;\n\n  private void playAction(string action, Hand hand) {\n    switch(action) {\n      case \"hit\": hit(hand); break;\n      case \"split\": split(hand); break;\n      case \"stand pat\": break; //do nothing\n      case \"stand\": stand(); break;\n      default: print(\"Wrong input\");\n    }\n  }\n\n  private void hit(Hand hand) {\n    hand.addCard(shoe.dealCard());\n  }\n\n  private void stand() {\n    int dealerScore = dealer.getTotalScore();\n    int playerScore = player.getTotalScore();\n    List<Hand> hands = player.getHands();\n    for(Hand hand : hands) {\n      int bestScore = hand.resolveScore();\n      if(playerScore == 21){\n        //blackjack, pay 3:2 of the bet\n      } else if (playerScore > dealerScore) {\n        // pay player equal to the bet\n      } else if (playerScore < dealerScore) {\n        // collect the bet from the player\n      } else { //tie\n        // bet goes back to player\n      }\n    }\n  }\n\n  private void split(Hand hand) {\n    Cards cards = hand.getCards();\n    player.addHand(new Hand(cards[0], shoe.dealCard()));\n    player.addHand(new Hand(cards[1], shoe.dealCard()));\n    player.removeHand(hand);\n  }\n\n\n public Game(Player player, Dealer dealer) {\n    this.player = player;\n    this.dealer = dealeer;\n    Shoe shoe= new Shoe(MAX_NUM_OF_DECKS);\n  }\n\n  public void start() {\n    player.placeBet(getBetFromUI());\n\n    Hand playerHand = new Hand(shoe.dealCard(), shoe.dealCard());\n    player.addToHand(playerHand);\n\n    Hand dealerHand = new Hand(shoe.dealCard(), shoe.dealCard());\n    dealer.addToHand(dealerHand);\n\n    while(true){\n      List<Hand> hands = player.getHands();\n      for(Hand hand : hands) {\n        string action = getUserAction(hand);\n        playAction(action, hand);\n        if(action.equals(\"stand\")) {\n          break;\n        }\n      }\n    }\n  }\n\n  public static void main(String args[]) {\n    Player player = new Player();\n    Dealer dealer = new Dealer();\n    Game game = new Game(player, dealer);\n    game.start();\n  }\n}\n\n",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class Game:\n  def __init__(self, player, dealer):\n    self.__player = player\n    self.__dealer = dealer\n    self.__MAX_NUM_OF_DECKS = 3\n    self.__shoe = Shoe(self.__MAX_NUM_OF_DECKS)\n\n  def play_action(self, action, hand):\n    switcher = {\n      \"hit\": self.hit(hand),\n      \"split\": self.split(hand),\n      \"stand pat\": None,  # do nothing\n      \"stand\": self.stand()\n    }\n    switcher.get(action, 'Invalid move')\n\n  def hit(self, hand):\n    self.__hand.add_card(self.__shoe.deal_card())\n\n  def stand(self):\n    dealer_score = self.__dealer.get_total_score()\n    player_score = self.__player.get_total_score()\n    hands = self.__player.get_hands()\n    for hand in hands:\n      best_score = hand.resolve_score()\n      if player_score == 21:\n        # blackjack, pay 3: 2 of the bet\n        None\n      elif player_score > dealer_score:\n        # pay player equal to the bet\n        None\n      elif player_score < dealer_score:\n        # collect the bet from the player\n        None\n      else:  # tie\n        # bet goes back to player\n        None\n\n  def split(self, hand):\n    cards = hand.get_cards()\n    self.__player.add_hand(Hand(cards[0], self.__shoe.deal_card()))\n    self.__player.add_hand(Hand(cards[1], self.__shoe.deal_card()))\n    self.__player.remove_hand(hand)\n\n  def start(self):\n    self.__player.place_bet(get_bet_from_UI())\n\n    player_hand = Hand(self.__shoe.deal_card(),\n                       self.__shoe.deal_card())\n    self.__player.add_to_hand(player_hand)\n\n    dealer_hand = Hand(self.__shoe.deal_card(),\n                       self.__shoe.deal_card())\n    self.__dealer.add_to_hand(dealer_hand)\n\n    while True:\n      hands = self.__player.get_hands()\n      for hand in hands:\n        action = get_user_action(hand)\n        self.play_action(action, hand)\n        if action.equals(\"stand\"):\n          break\n\n\ndef main():\n  player = Player()\n  dealer = Dealer()\n  game = Game(player, dealer)\n  game.start()\n",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "9da5ca8e-8912-49c3-8344-3399b2f69f84"
                            },
                            "hash": "30",
                            "iteration": 1
                        }
                    ],
                    "summary": {
                        "title": "Design Blackjack and a Deck of Cards",
                        "description": "Let's design a game of Blackjack."
                    }
                },
                {
                    "components": [
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "A Hotel Management System is a software built to handle all online hotel activities easily and safely. This System will give the hotel management power and flexibility to manage the entire system from a single online portal. The system allows the manager to keep track of all the available rooms in the system as well as to book rooms and generate bills.",
                                "mdHtml": "<p>A Hotel Management System is a software built to handle all online hotel activities easily and safely. This System will give the hotel management power and flexibility to manage the entire system from a single online portal. The system allows the manager to keep track of all the available rooms in the system as well as to book rooms and generate bills.</p>\n",
                                "comp_id": "b96f94d6-f9e9-4b1a-8a38-ab5c1f8a73b2"
                            },
                            "hash": "1",
                            "iteration": 1,
                            "saveVersion": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5198984360493056,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 400,
                                    "height": 400,
                                    "sizeInBytes": 12057,
                                    "name": "hotel_booking_tips1.jpg"
                                },
                                "comp_id": "bcf98abb-98f5-47fe-9216-6a2964021ddd"
                            },
                            "hash": "2",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## System Requirements\nWe'll focus on the following set of requirements while designing the Hotel Management System:\n\n1. The system should support the booking of different room types like standard, deluxe, family suite, etc.\n\n2. Guests should be able to search the room inventory and book any available room.\n\n3. The system should be able to retrieve information, such as who booked a particular room, or what rooms were booked by a specific customer.\n\n4. The system should allow customers to cancel their booking - and provide them with a full refund if the cancelation occurs before 24 hours of the check-in date.\n\n5. The system should be able to send notifications whenever the booking is nearing the check-in or check-out date.\n\n6. The system should maintain a room housekeeping log to keep track of all housekeeping tasks.\n\n7. Any customer should be able to add room services and food items.\n\n8. Customers can ask for different amenities. \n\n9. The customers should be able to pay their bills through credit card, check or cash.\n\n\n## Use case diagram\n\nHere are the main Actors in our system:\n\n* **Guest:** All guests can search the available rooms, as well as make a booking.\n* **Receptionist:** Mainly responsible for adding and modifying rooms, creating room bookings, check-in, and check-out customers.\n* **System:** Mainly responsible for sending notifications for room booking, cancellation, etc.\n* **Manager:** Mainly responsible for adding new workers.\n* **Housekeeper:** To add/modify housekeeping record of rooms.\n* **Server:** To add/modify room service record of rooms.\n\nHere are the top use cases of the Hotel Management System:\n\n* **Add/Remove/Edit room:** To add, remove, or modify a room in the system.\n* **Search room:** To search for rooms by type and availability.\n* **Register or cancel an account:** To add a new member or cancel the membership of an existing member.\n* **Book room:** To book a room.\n* **Check-in:** To let the guest check-in for their booking.\n* **Check-out:** To track the end of the booking and the return of the room keys.\n* **Add room charge:** To add a room service charge to the customer's bill.\n* **Update housekeeping log:** To add or update the housekeeping entry of a room.",
                                "mdHtml": "<h2>System Requirements</h2>\n<p>We\u2019ll focus on the following set of requirements while designing the Hotel Management System:</p>\n<ol>\n<li>\n<p>The system should support the booking of different room types like standard, deluxe, family suite, etc.</p>\n</li>\n<li>\n<p>Guests should be able to search the room inventory and book any available room.</p>\n</li>\n<li>\n<p>The system should be able to retrieve information, such as who booked a particular room, or what rooms were booked by a specific customer.</p>\n</li>\n<li>\n<p>The system should allow customers to cancel their booking - and provide them with a full refund if the cancelation occurs before 24 hours of the check-in date.</p>\n</li>\n<li>\n<p>The system should be able to send notifications whenever the booking is nearing the check-in or check-out date.</p>\n</li>\n<li>\n<p>The system should maintain a room housekeeping log to keep track of all housekeeping tasks.</p>\n</li>\n<li>\n<p>Any customer should be able to add room services and food items.</p>\n</li>\n<li>\n<p>Customers can ask for different amenities.</p>\n</li>\n<li>\n<p>The customers should be able to pay their bills through credit card, check or cash.</p>\n</li>\n</ol>\n<h2>Use case diagram</h2>\n<p>Here are the main Actors in our system:</p>\n<ul>\n<li><strong>Guest:</strong> All guests can search the available rooms, as well as make a booking.</li>\n<li><strong>Receptionist:</strong> Mainly responsible for adding and modifying rooms, creating room bookings, check-in, and check-out customers.</li>\n<li><strong>System:</strong> Mainly responsible for sending notifications for room booking, cancellation, etc.</li>\n<li><strong>Manager:</strong> Mainly responsible for adding new workers.</li>\n<li><strong>Housekeeper:</strong> To add/modify housekeeping record of rooms.</li>\n<li><strong>Server:</strong> To add/modify room service record of rooms.</li>\n</ul>\n<p>Here are the top use cases of the Hotel Management System:</p>\n<ul>\n<li><strong>Add/Remove/Edit room:</strong> To add, remove, or modify a room in the system.</li>\n<li><strong>Search room:</strong> To search for rooms by type and availability.</li>\n<li><strong>Register or cancel an account:</strong> To add a new member or cancel the membership of an existing member.</li>\n<li><strong>Book room:</strong> To book a room.</li>\n<li><strong>Check-in:</strong> To let the guest check-in for their booking.</li>\n<li><strong>Check-out:</strong> To track the end of the booking and the return of the room keys.</li>\n<li><strong>Add room charge:</strong> To add a room service charge to the customer\u2019s bill.</li>\n<li><strong>Update housekeeping log:</strong> To add or update the housekeeping entry of a room.</li>\n</ul>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "7f3f528d-d531-4af4-9a15-b0127a272810"
                            },
                            "hash": "3",
                            "iteration": 2,
                            "saveVersion": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5127499730124800,
                                "style": "original",
                                "caption": "Use case diagram",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 942,
                                    "height": 1044,
                                    "sizeInBytes": 44629,
                                    "name": "usecase(32).svg"
                                },
                                "comp_id": "6b667e53-4349-49b7-8b37-0e4414b05cd0"
                            },
                            "hash": "4",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## Class diagram\n\nHere are the main classes of our Hotel Management System:\n* **Hotel and HotelLocation:** Our system will support multiple locations of a hotel.\n\n* **Room:** The basic building block of the system. Every room will be uniquely identified by the room number. Each Room will have attributes like Room Style, Booking Price, etc.\n\n* **Account:** We will have different types of accounts in the system: one will be a guest to search and book rooms, another will be a receptionist. Housekeeping will keep track of the housekeeping records of a room, and a Server will handle room service.\n\n* **RoomBooking:** This class will be responsible for managing bookings for a room.\n\n* **Notification:** Will take care of sending notifications to guests.\n\n* **RoomHouseKeeping:** To keep track of all housekeeping records for rooms.\n\n* **RoomCharge:** Encapsulates the details about different types of room services that guests have requested.\n\n* **Invoice:** Contains different invoice-items for every charge against the room.\n\n* **RoomKey:** Each room can be assigned an electronic key card. Keys will have a barcode and will be uniquely identified by a key-ID.",
                                "mdHtml": "<h2>Class diagram</h2>\n<p>Here are the main classes of our Hotel Management System:</p>\n<ul>\n<li>\n<p><strong>Hotel and HotelLocation:</strong> Our system will support multiple locations of a hotel.</p>\n</li>\n<li>\n<p><strong>Room:</strong> The basic building block of the system. Every room will be uniquely identified by the room number. Each Room will have attributes like Room Style, Booking Price, etc.</p>\n</li>\n<li>\n<p><strong>Account:</strong> We will have different types of accounts in the system: one will be a guest to search and book rooms, another will be a receptionist. Housekeeping will keep track of the housekeeping records of a room, and a Server will handle room service.</p>\n</li>\n<li>\n<p><strong>RoomBooking:</strong> This class will be responsible for managing bookings for a room.</p>\n</li>\n<li>\n<p><strong>Notification:</strong> Will take care of sending notifications to guests.</p>\n</li>\n<li>\n<p><strong>RoomHouseKeeping:</strong> To keep track of all housekeeping records for rooms.</p>\n</li>\n<li>\n<p><strong>RoomCharge:</strong> Encapsulates the details about different types of room services that guests have requested.</p>\n</li>\n<li>\n<p><strong>Invoice:</strong> Contains different invoice-items for every charge against the room.</p>\n</li>\n<li>\n<p><strong>RoomKey:</strong> Each room can be assigned an electronic key card. Keys will have a barcode and will be uniquely identified by a key-ID.</p>\n</li>\n</ul>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "3bbed14e-5086-4be1-85cc-045e64e556d0"
                            },
                            "hash": "5",
                            "iteration": 2,
                            "saveVersion": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5250465321189376,
                                "style": "original",
                                "caption": "Class diagram",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 1088,
                                    "height": 1252,
                                    "sizeInBytes": 297698,
                                    "name": "Class Diagram (12).png"
                                },
                                "comp_id": "6cde87e4-0ec4-44a8-a410-a9fda37365e9"
                            },
                            "hash": "6",
                            "iteration": 0
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 6055036364783616,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 571,
                                    "height": 511,
                                    "sizeInBytes": 25589,
                                    "name": "uml cheat sheet (1).svg"
                                },
                                "comp_id": "984b8f7f-4fa7-45a9-ac3f-ecec7ca7b8cc"
                            },
                            "hash": "7",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## Activity diagrams\n\n**Make a room booking:** Any guest or receptionist can perform this activity. Here are the set of steps to book a room:",
                                "mdHtml": "<h2>Activity diagrams</h2>\n<p><strong>Make a room booking:</strong> Any guest or receptionist can perform this activity. Here are the set of steps to book a room:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "52c6f9ff-7985-4d52-b56d-b9ab2c24e0d3"
                            },
                            "hash": "8",
                            "iteration": 2,
                            "saveVersion": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5691420614590464,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "file": null,
                                "metadata": {
                                    "width": 563,
                                    "height": 1193,
                                    "sizeInBytes": 31354,
                                    "name": "Make reservation - Activity Diagram(1).svg"
                                },
                                "comp_id": "3e79989b-264d-4e10-a84c-a5c8d403eeda"
                            },
                            "hash": "9",
                            "iteration": 0,
                            "saveVersion": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Check in:** Guest will check in for their booking. The Receptionist can also perform this activity. Here are the steps:",
                                "mdHtml": "<p><strong>Check in:</strong> Guest will check in for their booking. The Receptionist can also perform this activity. Here are the steps:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "6e3a0942-2887-42ca-95bc-bc7e65529b46"
                            },
                            "hash": "10",
                            "iteration": 0
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5769623379116032,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 471,
                                    "height": 783,
                                    "sizeInBytes": 18996,
                                    "name": "Check-in - Activity Diagram.svg"
                                },
                                "comp_id": "8dd7fa6d-ac7c-4e5e-8e72-ec81e68d5f8a"
                            },
                            "hash": "11",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Cancel a booking:** Guest can cancel their booking. Receptionist can perform this activity. Here are the different steps of this activity:",
                                "mdHtml": "<p><strong>Cancel a booking:</strong> Guest can cancel their booking. Receptionist can perform this activity. Here are the different steps of this activity:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "e6e899c5-8d2c-4a8a-a093-e778a6b6a9c8"
                            },
                            "hash": "12",
                            "iteration": 0
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5638059940904960,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 524,
                                    "height": 980,
                                    "sizeInBytes": 19988,
                                    "name": "Cancel booking - Activity Diagram.svg"
                                },
                                "comp_id": "f1747df8-2502-4f2a-82ef-709db73568c1"
                            },
                            "hash": "13",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## Code\n\nHere is the high-level definition for the classes described above.\n\n**Enums, data types, and constants:** Here are the required enums, data types, and constants:",
                                "mdHtml": "<h2>Code</h2>\n<p>Here is the high-level definition for the classes described above.</p>\n<p><strong>Enums, data types, and constants:</strong> Here are the required enums, data types, and constants:</p>\n",
                                "cursorPosition": 7,
                                "comp_id": "5c18f075-75b3-4fdb-9551-32f270ffc7b6"
                            },
                            "hash": "14",
                            "iteration": 1,
                            "saveVersion": 1
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public enum RoomStyle {\n  STANDARD, DELUXE, FAMILY_SUITE, BUSINESS_SUITE\n}\n\npublic enum RoomStatus {\n  AVAILABLE, RESERVED, OCCUPIED, NOT_AVAILABLE, BEING_SERVICED, OTHER\n}\n\npublic enum BookingStatus {\n  REQUESTED, PENDING, CONFIRMED, CHECKED_IN, CHECKED_OUT, CANCELLED, ABANDONED\n}\n\npublic enum AccountStatus {\n  ACTIVE, CLOSED, CANCELED, BLACKLISTED, BLOCKED\n}\n\npublic enum AccountType {\n  MEMBER, GUEST, MANAGER, RECEPTIONIST\n}\n\npublic enum PaymentStatus {\n  UNPAID, PENDING, COMPLETED, FILLED, DECLINED, CANCELLED, ABANDONED, SETTLING, SETTLED, REFUNDED\n}\n\npublic class Address {\n  private String streetAddress;\n  private String city;\n  private String state;\n  private String zipCode;\n  private String country;\n}\n",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class RoomStyle(Enum):\n  STANDARD, DELUXE, FAMILY_SUITE, BUSINESS_SUITE = 1, 2, 3, 4\n\n\nclass RoomStatus(Enum):\n  AVAILABLE, RESERVED, OCCUPIED, NOT_AVAILABLE, BEING_SERVICED, OTHER = 1, 2, 3, 4, 5, 6\n\n\nclass BookingStatus(Enum):\n  REQUESTED, PENDING, CONFIRMED, CHECKED_IN, CHECKED_OUT, CANCELLED, ABANDONED = 1, 2, 3, 4, 5, 6, 7\n\n\nclass AccountStatus(Enum):\n  ACTIVE, CLOSED, CANCELED, BLACKLISTED, BLOCKED = 1, 2, 3, 4, 5\n\n\nclass AccountType(Enum):\n  MEMBER, GUEST, MANAGER, RECEPTIONIST = 1, 2, 3, 4\n\n\nclass PaymentStatus(Enum):\n  UNPAID, PENDING, COMPLETED, FILLED, DECLINED, CANCELLED, ABANDONED, SETTLING, SETTLED, REFUNDED = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n\n\nclass Address:\n  def __init__(self, street, city, state, zip_code, country):\n    self.__street_address = street\n    self.__city = city\n    self.__state = state\n    self.__zip_code = zip_code\n    self.__country = country\n",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "a83656d7-6d75-4302-a964-c0e2141bde15"
                            },
                            "hash": "24",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Account, Person, Guest, Receptionist, and Server:** These classes represent the different people that interact with our system:",
                                "mdHtml": "<p><strong>Account, Person, Guest, Receptionist, and Server:</strong> These classes represent the different people that interact with our system:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "353a0f83-617d-42f9-8171-23d1597662b0"
                            },
                            "hash": "16",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "// For simplicity, we are not defining getter and setter functions. The reader can\n// assume that all class attributes are private and accessed through their respective\n// public getter method and modified only through their public setter method.\n\npublic class Account {\n  private String id;\n  private String password;\n  private AccountStatus status;\n\n  public boolean resetPassword();\n}\n\npublic abstract class Person {\n  private String name;\n  private Address address;\n  private String email;\n  private String phone;\n\n  private Account account;\n}\n\n\npublic class Guest extends Person {\n  private int totalRoomsCheckedIn;\n\n  public List<RoomBooking> getBookings();\n}\n\npublic class Receptionist extends Person {\n  public List<Member> searchMember(String name);\n  public boolean createBooking();\n}\n\npublic class Server extends Person {\n  public boolean addRoomCharge(Room room, RoomCharge roomCharge);\n}",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "# For simplicity, we are not defining getter and setter functions. The reader can\n# assume that all class attributes are private and accessed through their respective\n# public getter methods and modified only through their public methods function.\n\nclass Account:\n  def __init__(self, id, password, status=AccountStatus.Active):\n    self.__id = id\n    self.__password = password\n    self.__status = status\n\n  def reset_password(self):\n    None\n\n\n# from abc import ABC, abstractmethod\nclass Person(ABC):\n  def __init__(self, name, address, email, phone, account):\n    self.__name = name\n    self.__address = address\n    self.__email = email\n    self.__phone = phone\n    self.__account = account\n\n\nclass Guest(Person):\n  def __init__(self):\n    self.__total_rooms_checked_in = 0\n\n  def get_bookings(self):\n    None\n\n\nclass Receptionist(Person):\n  def search_member(self, name):\n    None\n\n  def create_booking(self):\n    None\n\n\nclass Server(Person):\n  def add_room_charge(self, room, room_charge):\n    None\n",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "b8451a5c-3a20-4afa-a5e8-c6012704d753"
                            },
                            "hash": "25",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Hotel and HotelLocation:** These classes represent the top-level classes of the system:",
                                "mdHtml": "<p><strong>Hotel and HotelLocation:</strong> These classes represent the top-level classes of the system:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "a8c89925-56d1-44f4-9fdb-2825c50c9319"
                            },
                            "hash": "18",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public class HotelLocation {\n  private String name;\n  private Address location;\n\n  public Address getRooms();\n}\n\npublic class Hotel {\n  private String name;\n  private List<HotelLocation> locations;\n\n  public boolean addLocation(HotelLocation location);\n}\n",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class HotelLocation:\n  def __init__(self, name, address):\n    self.__name = name\n    self.__location = address\n\n  def get_rooms(self):\n    None\n\n\nclass Hotel:\n  def __init__(self, name):\n    self.__name = name\n    self.__locations = []\n\n  def add_location(self, location):\n    None\n",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "d5ff951c-4169-4f1c-83d1-3835e0825ca7"
                            },
                            "hash": "26",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Room, RoomKey, and RoomHouseKeeping:** To encapsulate a room, room key, and housekeeping:",
                                "mdHtml": "<p><strong>Room, RoomKey, and RoomHouseKeeping:</strong> To encapsulate a room, room key, and housekeeping:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "779c726b-f3a8-4aac-9ee5-e076538fa6db"
                            },
                            "hash": "20",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public interface Search {\n  public static List<Room> search(RoomStyle style, Date startDate, int duration);\n}\n\npublic class Room implements Search {\n  private String roomNumber;\n  private RoomStyle style;\n  private RoomStatus status;\n  private double bookingPrice;\n  private boolean isSmoking;\n\n  private List<RoomKey> keys;\n  private List<RoomHouseKeeping> houseKeepingLog;\n\n  public boolean isRoomAvailable();\n  public boolean checkIn();\n  public boolean checkOut();\n\n  public static List<Room> search(RoomStyle style, Date startDate, int duration) {\n    // return all rooms with the given style and availability\n  }\n}\n\npublic class RoomKey {\n  private String keyId;\n  private String barcode;\n  private Date issuedAt;\n  private boolean active;\n  private boolean isMaster;\n\n  public boolean assignRoom(Room room);\n  public boolean isActive();\n}\n\npublic class RoomHouseKeeping\n {\n  private String description;\n  private Date startDatetime;\n  private int duration;\n  private HouseKeeper houseKeeper;\n\n  public boolean addHouseKeeping(Room room);\n}\n",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "from abc import ABC, abstractmethod\n\nclass Search(ABC):\n  def search(self, style, start_date, duration):\n    None\n\n\nclass Room(Search):\n  def __init__(self, room_number, room_style, status, price, is_smoking):\n    self.__room_number = room_number\n    self.__style = room_style\n    self.__status = status\n    self.__booking_price = price\n    self.__is_smoking = is_smoking\n\n    self.__keys = []\n    self.__house_keeping_log = []\n\n  def is_room_available(self):\n    None\n\n  def check_in(self):\n    None\n\n  def check_out(self):\n    None\n\n  def search(self, style, start_date, duration):\n# return all rooms with the given style and availability\n\n\nclass RoomKey:\n  def __init__(self, key_id, barcode, is_active, is_master):\n    self.__key_id = key_id\n    self.__barcode = barcode\n    self.__issued_at = datetime.date.today()\n    self.__active = is_active\n    self.__is_master = is_master\n\n  def assign_room(self, room):\n    None\n\n  def is_active(self):\n    None\n\n\nclass RoomHouseKeeping:\n  def __init__(self, description, duration, house_keeper):\n    self.__description = description\n    self.__start_datetime = datetime.date.today()\n    self.__duration = duration\n    self.__house_keeper = house_keeper\n\n  def add_house_keeping(self, room):\n    None\n",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "487834a2-9b15-4e7f-bc0f-d0e9a3575222"
                            },
                            "hash": "27",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**RoomBooking and RoomCharge:** To encapsulate a booking and different charges against a booking:",
                                "mdHtml": "<p><strong>RoomBooking and RoomCharge:</strong> To encapsulate a booking and different charges against a booking:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "55142d48-a0eb-46df-95c7-b699f4cd2bc0"
                            },
                            "hash": "22",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "edit",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public class RoomBooking {\n  private String reservationNumber;\n  private Date startDate;\n  private int durationInDays;\n  private BookingStatus status;\n  private Date checkin;\n  private Date checkout;\n\n  private int guestID;\n  private Room room;\n  private Invoice invoice;\n  private List<Notification> notifications;\n\n  public static RoomBooking fectchDetails(String reservationNumber);\n}\n\npublic abstract class RoomCharge {\n  public Date issueAt;\n  public boolean addInvoiceItem(Invoice invoice);\n}\n\npublic class Amenity extends RoomCharge {\n  public String name;\n  public String description;\n}\n\npublic class RoomService extends RoomCharge {\n  public boolean isChargeable;\n  public Date requestTime;\n}\n\npublic class KitchenService extends RoomCharge {\n  public String description;\n}\n",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class RoomBooking:\n  def __init__(self, reservation_number, start_date, duration_in_days, booking_status):\n    self.__reservation_number = reservation_number\n    self.__start_date = start_date\n    self.__duration_in_days = duration_in_days\n    self.__status = booking_status\n    self.__checkin = None\n    self.__checkout = None\n\n    self.__guest_id = 0\n    self.__room = None\n    self.__invoice = None\n    self.__notifications = []\n\n  def fetch_details(self, reservation_number):\n    None\n\n\n# from abc import ABC, abstractmethod\nclass RoomCharge(ABC):\n  def __init__(self):\n    self.__issue_at = datetime.date.today()\n\n  def add_invoice_item(self, invoice):\n    None\n\n\nclass Amenity(RoomCharge):\n  def __init__(self, name, description):\n    self.__name = name\n    self.__description = description\n\n\nclass RoomService(RoomCharge):\n  def __init__(self, is_chargeable, request_time):\n    self.__is_chargeable = is_chargeable\n    self.__request_time = request_time\n\n\nclass KitchenService(RoomCharge):\n  def __init__(self, description):\n    self.__description = description\n",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "8c0e714b-2b1c-4085-bb20-3bf0b6b89f94"
                            },
                            "hash": "28",
                            "iteration": 1
                        }
                    ],
                    "summary": {
                        "title": "Design a Hotel Management System",
                        "description": "Let's design a hotel management system.",
                        "titleUpdated": true
                    }
                },
                {
                    "components": [
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "A Restaurant Management System is a software built to handle all restaurant activities in an easy and safe manner. This System will give the Restaurant management power and flexibility to manage the entire system from a single portal. The system allows the manager to keep track of available tables in the system as well as the reservation of tables and bill generation.\n",
                                "mdHtml": "<p>A Restaurant Management System is a software built to handle all restaurant activities in an easy and safe manner. This System will give the Restaurant management power and flexibility to manage the entire system from a single portal. The system allows the manager to keep track of available tables in the system as well as the reservation of tables and bill generation.</p>\n",
                                "cursorPosition": {
                                    "line": 2,
                                    "ch": 0,
                                    "sticky": null
                                },
                                "comp_id": "58cf3f94-4ce2-4c63-afa0-862122350401"
                            },
                            "hash": "1",
                            "iteration": 1,
                            "saveVersion": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5638703112257536,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 675,
                                    "height": 450,
                                    "sizeInBytes": 127018,
                                    "name": "restaurant.jpg"
                                },
                                "comp_id": "b0ad2e8d-c783-4362-9f49-65d701038eb8"
                            },
                            "hash": "2",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## System Requirements\n\nWe will focus on the following set of requirements while designing the Restaurant Management System:\n\n1. The restaurant will have different branches.\n\n2. Each restaurant branch will have a menu.\n\n3. The menu will have different menu sections, containing different menu items.\n\n4. The waiter should be able to create an order for a table and add meals for each seat.\n\n5. Each meal can have multiple meal items. Each meal item corresponds to a menu item.\n\n6. The system should be able to retrieve information about tables currently available to seat walk-in customers.\n\n7. The system should support the reservation of tables.\n\n8. The receptionist should be able to search for available tables by date/time and reserve a table.\n\n9. The system should allow customers to cancel their reservation.\n\n10. The system should be able to send notifications whenever the reservation time is approaching.\n\n11. The customers should be able to pay their bills through credit card, check or cash.\n\n12. Each restaurant branch can have multiple seating arrangements of tables.\n\n## Use case diagram\n\nHere are the main Actors in our system:\n\n* **Receptionist:** Mainly responsible for adding and modifying tables and their layout, and creating and canceling table reservations.\n* **Waiter:** To take/modify orders.\n* **Manager:** Mainly responsible for adding new workers and modifying the menu.\n* **Chef:** To view and work on an order.\n* **Cashier:** To generate checks and process payments.\n* **System:** Mainly responsible for sending notifications about table reservations, cancellations, etc.\n\nHere are the top use cases of the Restaurant Management System:\n\n* **Add/Modify tables:** To add, remove, or modify a table in the system.\n* **Search tables:** To search for available tables for reservation.\n* **Place order:** Add a new order in the system for a table.\n* **Update order:** Modify an already placed order, which can include adding/modifying meals or meal items.\n* **Create a reservation:** To create a table reservation for a certain date/time for an available table.\n* **Cancel reservation:** To cancel an existing reservation.\n* **Check-in:** To let the guest check in for their reservation.\n* **Make payment:** Pay the check for the food.\n",
                                "mdHtml": "<h2>System Requirements</h2>\n<p>We will focus on the following set of requirements while designing the Restaurant Management System:</p>\n<ol>\n<li>\n<p>The restaurant will have different branches.</p>\n</li>\n<li>\n<p>Each restaurant branch will have a menu.</p>\n</li>\n<li>\n<p>The menu will have different menu sections, containing different menu items.</p>\n</li>\n<li>\n<p>The waiter should be able to create an order for a table and add meals for each seat.</p>\n</li>\n<li>\n<p>Each meal can have multiple meal items. Each meal item corresponds to a menu item.</p>\n</li>\n<li>\n<p>The system should be able to retrieve information about tables currently available to seat walk-in customers.</p>\n</li>\n<li>\n<p>The system should support the reservation of tables.</p>\n</li>\n<li>\n<p>The receptionist should be able to search for available tables by date/time and reserve a table.</p>\n</li>\n<li>\n<p>The system should allow customers to cancel their reservation.</p>\n</li>\n<li>\n<p>The system should be able to send notifications whenever the reservation time is approaching.</p>\n</li>\n<li>\n<p>The customers should be able to pay their bills through credit card, check or cash.</p>\n</li>\n<li>\n<p>Each restaurant branch can have multiple seating arrangements of tables.</p>\n</li>\n</ol>\n<h2>Use case diagram</h2>\n<p>Here are the main Actors in our system:</p>\n<ul>\n<li><strong>Receptionist:</strong> Mainly responsible for adding and modifying tables and their layout, and creating and canceling table reservations.</li>\n<li><strong>Waiter:</strong> To take/modify orders.</li>\n<li><strong>Manager:</strong> Mainly responsible for adding new workers and modifying the menu.</li>\n<li><strong>Chef:</strong> To view and work on an order.</li>\n<li><strong>Cashier:</strong> To generate checks and process payments.</li>\n<li><strong>System:</strong> Mainly responsible for sending notifications about table reservations, cancellations, etc.</li>\n</ul>\n<p>Here are the top use cases of the Restaurant Management System:</p>\n<ul>\n<li><strong>Add/Modify tables:</strong> To add, remove, or modify a table in the system.</li>\n<li><strong>Search tables:</strong> To search for available tables for reservation.</li>\n<li><strong>Place order:</strong> Add a new order in the system for a table.</li>\n<li><strong>Update order:</strong> Modify an already placed order, which can include adding/modifying meals or meal items.</li>\n<li><strong>Create a reservation:</strong> To create a table reservation for a certain date/time for an available table.</li>\n<li><strong>Cancel reservation:</strong> To cancel an existing reservation.</li>\n<li><strong>Check-in:</strong> To let the guest check in for their reservation.</li>\n<li><strong>Make payment:</strong> Pay the check for the food.</li>\n</ul>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "31335170-ecab-4873-beb2-be4c44fe1358"
                            },
                            "hash": "3",
                            "iteration": 2,
                            "saveVersion": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5670976570261504,
                                "style": "original",
                                "caption": "Use case diagram",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 932,
                                    "height": 1052,
                                    "sizeInBytes": 37557,
                                    "name": "usecase(4).svg"
                                },
                                "comp_id": "90171f5e-1b33-4e61-846c-28513409cc62"
                            },
                            "hash": "4",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## Class diagram\n\nHere is the description of the different classes of our Restaurant Management System:\n\n* **Restaurant:** This class represents a restaurant. Each restaurant has registered employees. The employees are part of the restaurant because if the restaurant becomes inactive, all its employees will automatically be deactivated.\n\n* **Branch:** Any restaurants can have multiple branches. Each branch will have its own set of employees and menus.\n\n* **Menu:** All branches will have their own menu.\n\n* **MenuSection and MenuItem:** A menu has zero or more menu sections. Each menu section consists of zero or more menu items.\n\n* **Table and TableSeat:** The basic building block of the system. Every table will have a unique identifier, maximum sitting capacity, etc. Each table will have multiple seats.\n\n* **Order:** This class encapsulates the order placed by a customer.\n\n* **Meal:** Each order will consist of separate meals for each table seat. \n\n* **Meal Item:** Each Meal will consist of one or more meal items corresponding to a menu item.\n\n* **Account:** We'll have different types of accounts in the system, one will be a receptionist to search and reserve tables and the other, the waiter will place orders in the system.\n\n* **Notification:** Will take care of sending notifications to customers.\n\n* **Bill:** Contains different bill-items for every meal item.",
                                "mdHtml": "<h2>Class diagram</h2>\n<p>Here is the description of the different classes of our Restaurant Management System:</p>\n<ul>\n<li>\n<p><strong>Restaurant:</strong> This class represents a restaurant. Each restaurant has registered employees. The employees are part of the restaurant because if the restaurant becomes inactive, all its employees will automatically be deactivated.</p>\n</li>\n<li>\n<p><strong>Branch:</strong> Any restaurants can have multiple branches. Each branch will have its own set of employees and menus.</p>\n</li>\n<li>\n<p><strong>Menu:</strong> All branches will have their own menu.</p>\n</li>\n<li>\n<p><strong>MenuSection and MenuItem:</strong> A menu has zero or more menu sections. Each menu section consists of zero or more menu items.</p>\n</li>\n<li>\n<p><strong>Table and TableSeat:</strong> The basic building block of the system. Every table will have a unique identifier, maximum sitting capacity, etc. Each table will have multiple seats.</p>\n</li>\n<li>\n<p><strong>Order:</strong> This class encapsulates the order placed by a customer.</p>\n</li>\n<li>\n<p><strong>Meal:</strong> Each order will consist of separate meals for each table seat.</p>\n</li>\n<li>\n<p><strong>Meal Item:</strong> Each Meal will consist of one or more meal items corresponding to a menu item.</p>\n</li>\n<li>\n<p><strong>Account:</strong> We\u2019ll have different types of accounts in the system, one will be a receptionist to search and reserve tables and the other, the waiter will place orders in the system.</p>\n</li>\n<li>\n<p><strong>Notification:</strong> Will take care of sending notifications to customers.</p>\n</li>\n<li>\n<p><strong>Bill:</strong> Contains different bill-items for every meal item.</p>\n</li>\n</ul>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "483cfa64-2745-4442-9324-34847313529c"
                            },
                            "hash": "5",
                            "iteration": 2,
                            "saveVersion": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 4539304636317696,
                                "style": "original",
                                "caption": "Class diagram",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 1064,
                                    "height": 1363,
                                    "sizeInBytes": 297257,
                                    "name": "Class Diagram (13).png"
                                },
                                "comp_id": "feef457a-de07-406e-83b0-8086a1c054dc"
                            },
                            "hash": "6",
                            "iteration": 0
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 6734986864492544,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 571,
                                    "height": 511,
                                    "sizeInBytes": 25589,
                                    "name": "uml cheat sheet (1).svg"
                                },
                                "comp_id": "ba212299-5e7a-49f6-af96-fc2aebaeec55"
                            },
                            "hash": "7",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## Activity diagrams\n\n**Place order:** Any waiter can perform this activity. Here are the steps to place an order:",
                                "mdHtml": "<h2>Activity diagrams</h2>\n<p><strong>Place order:</strong> Any waiter can perform this activity. Here are the steps to place an order:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "1b6efdbd-9274-431c-9dc6-257bb4f4b5c4"
                            },
                            "hash": "8",
                            "iteration": 2,
                            "saveVersion": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5654672874405888,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 383,
                                    "height": 853,
                                    "sizeInBytes": 15321,
                                    "name": "Take order - Activity Diagram.svg"
                                },
                                "comp_id": "46f258fe-8fef-4c08-89dc-c1d63e383626"
                            },
                            "hash": "9",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Make a reservation:** Any receptionist can perform this activity. Here are the steps to make a reservation:",
                                "mdHtml": "<p><strong>Make a reservation:</strong> Any receptionist can perform this activity. Here are the steps to make a reservation:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "049d279c-ba45-49fa-b643-b2ab0949cdd7"
                            },
                            "hash": "10",
                            "iteration": 0
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5719887657828352,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 458,
                                    "height": 1064,
                                    "sizeInBytes": 24309,
                                    "name": "Make reservation - Activity Diagram(2).svg"
                                },
                                "comp_id": "0edd85e4-ad33-4edc-a305-104a21009919"
                            },
                            "hash": "11",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Cancel a reservation:** Any receptionist can perform this activity. Here are the steps to cancel a reservation:",
                                "mdHtml": "<p><strong>Cancel a reservation:</strong> Any receptionist can perform this activity. Here are the steps to cancel a reservation:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "53d1859a-5f0a-43fb-9c50-0b230e88ac6a"
                            },
                            "hash": "12",
                            "iteration": 0
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5687280266117120,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 524,
                                    "height": 838,
                                    "sizeInBytes": 16982,
                                    "name": "Cancel reservation - Activity Diagram(1).svg"
                                },
                                "comp_id": "fb58b4af-4fec-41a5-a406-1e033a2c06e8"
                            },
                            "hash": "13",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## Code\nHere is the high-level definition for the classes described above.\n\n**Enums, data types, and constants:** Here are the required enums, data types, and constants:",
                                "mdHtml": "<h2>Code</h2>\n<p>Here is the high-level definition for the classes described above.</p>\n<p><strong>Enums, data types, and constants:</strong> Here are the required enums, data types, and constants:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "db502f6f-4b6e-41dd-94ba-15fe6a93c21a"
                            },
                            "hash": "14",
                            "iteration": 2,
                            "saveVersion": 1
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public enum ReservationStatus {\n  REQUESTED, PENDING, CONFIRMED, CHECKED_IN, CANCELED, ABANDONED\n}\n\npublic enum SeatType {\n  REGULAR, KID, ACCESSIBLE, OTHER\n}\n\npublic enum OrderStatus {\n  RECEIVED, PREPARING, COMPLETED, CANCELED, NONE\n}\n\npublic enum TableStatus {\n  FREE, RESERVED, OCCUPIED, OTHER\n}\n\npublic enum AccountStatus {\n  ACTIVE, CLOSED, CANCELED, BLACKLISTED, BLOCKED\n}\n\npublic enum PaymentStatus {\n  UNPAID, PENDING, COMPLETED, FILLED, DECLINED, CANCELLED, ABANDONED, SETTLING, SETTLED, REFUNDED\n}\n\npublic class Address {\n  private String streetAddress;\n  private String city;\n  private String state;\n  private String zipCode;\n  private String country;\n}",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class ReservationStatus(Enum):\n  REQUESTED, PENDING, CONFIRMED, CHECKED_IN, CANCELED, ABANDONED = 1, 2, 3, 4, 5, 6\n\n\nclass SeatType(Enum):\n  REGULAR, KID, ACCESSIBLE, OTHER = 1, 2, 3, 4\n\n\nclass OrderStatus(Enum):\n  RECEIVED, PREPARING, COMPLETED, CANCELED, NONE = 1, 2, 3, 4, 5\n\n\nclass TableStatus(Enum):\n  FREE, RESERVED, OCCUPIED, OTHER = 1, 2, 3, 4\n\n\nclass AccountStatus(Enum):\n  ACTIVE, CLOSED, CANCELED, BLACKLISTED, BLOCKED = 1, 2, 3, 4, 5\n\n\nclass PaymentStatus(Enum):\n  UNPAID, PENDING, COMPLETED, FILLED, DECLINED, CANCELLED, ABANDONED, SETTLING, SETTLED, REFUNDED = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n\n\nclass Address:\n  def __init__(self, street, city, state, zip_code, country):\n    self.__street_address = street\n    self.__city = city\n    self.__state = state\n    self.__zip_code = zip_code\n    self.__country = country\n",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "ca5fd15a-14cb-4959-a333-c3528f815a8b"
                            },
                            "hash": "26",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Account, Person, Employee, Receptionist, Manager, and Chef:** These classes represent the different people that interact with our system:",
                                "mdHtml": "<p><strong>Account, Person, Employee, Receptionist, Manager, and Chef:</strong> These classes represent the different people that interact with our system:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "29d4de8e-6014-4fa7-bcd1-b1e74144b2d1"
                            },
                            "hash": "16",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "// For simplicity, we are not defining getter and setter functions. The reader can\n// assume that all class attributes are private and accessed through their respective\n// public getter methods and modified only through their public setter function.\n\npublic class Account {\n  private String id;\n  private String password;\n  private Address address;\n  private AccountStatus status;\n\n  public boolean resetPassword();\n}\n\npublic abstract class Person {\n  private String name;\n  private String email;\n  private String phone; \n}\n\n\npublic abstract class Employee extends Person {\n  private int employeeID;\n  private Date dateJoined;\n  \n  private Account account;\n}\n\npublic class Receptionist extends Employee {\n  public boolean createReservation();\n  public List<Customer> searchCustomer(String name);\n}\n\npublic class Manager extends Employee {\n  public boolean addEmployee();\n}\n\npublic class Chef extends Employee {\n  public boolean takeOrder();\n}\n",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "# For simplicity, we are not defining getter and setter functions. The reader can\n# assume that all class attributes are private and accessed through their respective\n# public getter methods and modified only through their public methods function.\n\n\nclass Account:\n  def __init__(self, id, password, address, status=AccountStatus.Active):\n    self.__id = id\n    self.__password = password\n    self.__address = address\n    self.__status = status\n\n  def reset_password(self):\n    None\n\n\n# from abc import ABC, abstractmethod\nclass Person(ABC):\n  def __init__(self, name, email, phone):\n    self.__name = name\n    self.__email = email\n    self.__phone = phone\n\n\n# from abc import ABC, abstractmethod\nclass Employee(ABC, Person):\n  def __init__(self, id, account, name, email, phone):\n    super().__init__(name, email, phone)\n    self.__employee_id = id\n    self.__date_joined = datetime.date.today()\n    self.__account = account\n\n\nclass Receptionist(Employee):\n  def __init__(self, id, account, name, email, phone):\n    super().__init__(id, account, name, email, phone)\n\n  def create_reservation(self):\n    None\n\n  def search_customer(self, name):\n    None\n\n\nclass Manager(Employee):\n  def __init__(self, id, account, name, email, phone):\n    super().__init__(id, account, name, email, phone)\n\n  def add_employee(self):\n    None\n\n\nclass Chef(Employee):\n  def __init__(self, id, account, name, email, phone):\n    super().__init__(id, account, name, email, phone)\n\n  def take_order(self):\n    None",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "22dd12c5-e13f-4118-babe-6fe352fa7078"
                            },
                            "hash": "27",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Restaurant, Branch, Kitchen, TableChart:** These classes represent the top-level classes of the system:",
                                "mdHtml": "<p><strong>Restaurant, Branch, Kitchen, TableChart:</strong> These classes represent the top-level classes of the system:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "6a2c88ef-685c-45e0-8186-f00313900a22"
                            },
                            "hash": "18",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public class Kitchen {\n  private String name;\n  private Chef[] chefs;\n\n  private boolean assignChef();\n}\n\npublic class Branch {\n  private String name;\n  private Address location;\n  private Kitchen kitchen;\n\n  public Address addTableChart();\n}\n\npublic class Restaurant {\n  private String name;\n  private List<Branch> branches;\n\n  public boolean addBranch(Branch branch);\n}\n\npublic class TableChart {\n  private int tableChartID;\n  private byte[] tableChartImage;\n\n  public bool print();\n}",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class Kitchen:\n  def __init__(self, name):\n    self.__name = name\n    self.__chefs = []\n\n  def assign_chef(self, chef):\n    None\n\n\nclass Branch:\n  def __init__(self, name, location, kitchen):\n    self.__name = name\n    self.__location = location\n    self.__kitchen = kitchen\n\n  def add_table_chart(self):\n    None\n\n\nclass Restaurant:\n  def __init__(self, name):\n    self.__name = name\n    self.__branches = []\n\n  def add_branch(self, branch):\n    None\n\n\nclass TableChart:\n  def __init__(self, id):\n    self.__table_chart_id = id\n    self.__table_chart_image = []\n\n  def print(self):\n    None",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "49c6b289-31bc-47ce-8d75-2a25712fee3c"
                            },
                            "hash": "28",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Table, TableSeat, and Reservation:** Each table can have multiple seats and customers can make reservations for tables:",
                                "mdHtml": "<p><strong>Table, TableSeat, and Reservation:</strong> Each table can have multiple seats and customers can make reservations for tables:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "4bf535cd-af73-49e9-9b54-e8bf079c7968"
                            },
                            "hash": "20",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public class Table {\n  private int tableID;\n  private TableStatus status;\n  private int maxCapacity;\n  private int locationIdentifier;\n\n  private List<TableSeat> seats;\n\n  public boolean isTableFree();\n  public boolean addReservation();\n\n  public static List<Table> search(int capacity, Date startTime) {\n    // return all tables with the given capacity and availability\n  }\n}\n\npublic class TableSeat {\n  private int tableSeatNumber;\n  private SeatType type;\n\n  public boolean updateSeatType(SeatType type);\n}\n\npublic class Reservation {\n  private int reservationID;\n  private Date timeOfReservation;\n  private int peopleCount;\n  private ReservationStatus status;\n  private String notes;\n  private Date checkinTime;\n  private Customer customer;\n\n  private Table[] tables;\n  private List<Notification> notifications;\n  public boolean updatePeopleCount(int count);\n}\n",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class Table:\n  def __init__(self, id, max_capacity, location_identifier, status=TableStatus.FREE):\n    self.__table_id = id\n    self.__max_capacity = max_capacity\n    self.__location_identifier = location_identifier\n    self.__status = status\n    self.__seats = []\n\n  def is_table_free(self):\n    None\n\n  def add_reservation(self):\n    None\n\n  def search(self, capacity, start_time):\n    # return all tables with the given capacity and availability\n    None\n\n\nclass TableSeat:\n  def __init__(self):\n    self.__table_seat_number = 0\n    self.__type = SeatType.REGULAR\n\n  def update_seat_type(self, seat_type):\n    None\n\n\nclass Reservation:\n  def __init__(self, id, people_count, notes, customer):\n    self.__reservation_id = id\n    self.__time_of_reservation = datetime.datetime.now()\n    self.__people_count = people_count\n    self.__status = ReservationStatus.REQUESTED\n    self.__notes = notes\n    self.__checkin_time = datetime.datetime.now()\n    self.__customer = customer\n    self.__tables = []\n    self.__notifications = []\n\n  def update_people_count(self, count):\n    None",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "5e7eb1ec-8526-4e07-a42d-8ce2042f680a"
                            },
                            "hash": "29",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Menu, MenuSection, and MenuItem:** Each restaurant branch will have its own menu, each menu will have multiple menu sections, which will contain menu items:",
                                "mdHtml": "<p><strong>Menu, MenuSection, and MenuItem:</strong> Each restaurant branch will have its own menu, each menu will have multiple menu sections, which will contain menu items:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "e43813e2-b5f0-478d-811d-42aa746052a2"
                            },
                            "hash": "22",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public class MenuItem {\n  private int menuItemID;\n  private String title;\n  private String description;\n  private double price;\n\n  public boolean updatePrice(double price);\n}\n\npublic class MenuSection {\n  private int menuSectionID;\n  private String title;\n  private String description;\n  private List<MenuItem> menuItems;\n\n  public boolean addMenuItem(MenuItem menuItem);\n}\n\npublic class Menu {\n  private int menuID;\n  private String title;\n  private String description;\n  private List<MenuSection> menuSections;\n\n  public boolean addMenuSection(MenuSection menuSection);\n  public boolean print();\n}\n",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class MenuItem:\n  def __init__(self, id, title, description, price):\n    self.__menu_item_id = id\n    self.__title = title\n    self.__description = description\n    self.__price = price\n\n  def update_price(self,  price):\n    None\n\n\nclass MenuSection:\n  def __init__(self, id, title, description):\n    self.__menu_section_id = id\n    self.__title = title\n    self.__description = description\n    self.__menu_items = []\n\n  def add_menu_item(self, menu_item):\n    None\n\n\nclass Menu:\n  def __init__(self, id, title, description):\n    self.__menu_id = id\n    self.__title = title\n    self.__description = description\n    self.__menu_sections = []\n\n  def add_menu_section(self, menu_section):\n    None\n\n  def print(self):\n    None\n",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "03deb82f-b355-43b8-9b52-42d0ae7a44d3"
                            },
                            "hash": "31",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Order, Meal, and MealItem:** Each order will have meals for table seats:",
                                "mdHtml": "<p><strong>Order, Meal, and MealItem:</strong> Each order will have meals for table seats:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "667a2d38-4a60-49db-9bbc-aaf84f04b458"
                            },
                            "hash": "24",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "edit",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public class MealItem {\n  private int mealItemID;\n  private int quantity;\n  private MenuItem menuItem;\n\n  public boolean updateQuantity(int quantity);\n}\n\npublic class Meal {\n  private int mealID;\n  private TableSeat seat;\n  private List<MenuItem> menuItems;\n\n  public boolean addMealItem(MealItem mealItem);\n}\n\npublic class Order {\n  private int OrderID;\n  private OrderStatus status;\n  private Date creationTime;\n\n  private Meal[] meals;\n  private Table table;\n  private Check check;\n  private Waiter waiter;\n  private Chef chef;\n\n  public boolean addMeal(Meal meal);\n  public boolean removeMeal(Meal meal);\n  public OrderStatus getStatus();\n  public boolean setStatus(OrderStatus status);\n}",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class MealItem:\n  def __init__(self, id, quantity, menu_item):\n    self.__meal_item_id = id\n    self.__quantity = quantity\n    self.__menu_item = menu_item\n\n  def update_quantity(self, quantity):\n    None\n\n\nclass Meal:\n  def __init__(self, id, seat):\n    self.__meal_id = id\n    self.__seat = seat\n    self.__menu_items = []\n\n  def add_meal_item(self, meal_item):\n    None\n\n\nclass Order:\n  def __init__(self, id, status, table, waiter, chef):\n    self.__order_id = id\n    self.__OrderStatus = status\n    self.__creation_time = datetime.datetime.now()\n\n    self.__meals = []\n    self.__table = table\n    self.__waiter = waiter\n    self.__chef = chef\n    self.__check = Check()\n\n  def add_meal(self, meal):\n    None\n\n  def remove_meal(self, meal):\n    None\n\n  def get_status(self):\n    return self.__OrderStatus\n\n  def set_status(self, status):\n    None\n",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "bbd6e3e8-c5d8-4e9f-924f-7a4315d38088"
                            },
                            "hash": "32",
                            "iteration": 1
                        }
                    ],
                    "summary": {
                        "title": "Design a Restaurant Management system",
                        "description": "Let's design a restaurant management system."
                    }
                },
                {
                    "components": [
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "Chess is a two-player strategy board game played on a chessboard, which is a checkered gameboard with 64 squares arranged in an 8\u00d78 grid. There are a few versions of game types that people play all over the world. In this design problem, we are going to focus on designing a two-player online chess game.\n\n",
                                "mdHtml": "<p>Chess is a two-player strategy board game played on a chessboard, which is a checkered gameboard with 64 squares arranged in an 8\u00d78 grid. There are a few versions of game types that people play all over the world. In this design problem, we are going to focus on designing a two-player online chess game.</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "cb39a639-e4ea-40a5-991b-fc2c3ea013ef"
                            },
                            "hash": "1",
                            "iteration": 1,
                            "saveVersion": 2
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5716905876783104,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 700,
                                    "height": 393,
                                    "sizeInBytes": 27505,
                                    "name": "chess-2730034_1280.jpg"
                                },
                                "comp_id": "07532e43-f00f-430f-8795-71f56cf0b54b"
                            },
                            "hash": "2",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## System Requirements\n\nWe'll focus on the following set of requirements while designing the game of chess:\n\n1. The system should support two online players to play a game of chess.\n\n2. All rules of international chess will be followed.\n\n3. Each player will be randomly assigned a side, black or white. \n\n4. Both players will play their moves one after the other. The white side plays the first move.\n\n5. Players can't cancel or roll back their moves. \n\n6. The system should maintain a log of all moves by both players.\n\n7. Each side will start with 8 pawns, 2 rooks, 2 bishops, 2 knights, 1 queen, and 1 king.\n\n8. The game can finish either in a checkmate from one side, forfeit or stalemate (a draw), or resignation.\n\n## Use case diagram\n\nWe have two actors in our system:\n\n* **Player:** A registered account in the system, who will play the game. The player will play chess moves.\n* **Admin:** To ban/modify players.\n\nHere are the top use cases for chess:\n\n* **Player moves a piece:** To make a valid move of any chess piece.\n* **Resign or forfeit a game:** A player resigns from/forfeits the game.\n* **Register new account/Cancel membership:** To add a new member or cancel an existing member.\n* **Update game log:** To add a move to the game log.",
                                "mdHtml": "<h2>System Requirements</h2>\n<p>We\u2019ll focus on the following set of requirements while designing the game of chess:</p>\n<ol>\n<li>\n<p>The system should support two online players to play a game of chess.</p>\n</li>\n<li>\n<p>All rules of international chess will be followed.</p>\n</li>\n<li>\n<p>Each player will be randomly assigned a side, black or white.</p>\n</li>\n<li>\n<p>Both players will play their moves one after the other. The white side plays the first move.</p>\n</li>\n<li>\n<p>Players can\u2019t cancel or roll back their moves.</p>\n</li>\n<li>\n<p>The system should maintain a log of all moves by both players.</p>\n</li>\n<li>\n<p>Each side will start with 8 pawns, 2 rooks, 2 bishops, 2 knights, 1 queen, and 1 king.</p>\n</li>\n<li>\n<p>The game can finish either in a checkmate from one side, forfeit or stalemate (a draw), or resignation.</p>\n</li>\n</ol>\n<h2>Use case diagram</h2>\n<p>We have two actors in our system:</p>\n<ul>\n<li><strong>Player:</strong> A registered account in the system, who will play the game. The player will play chess moves.</li>\n<li><strong>Admin:</strong> To ban/modify players.</li>\n</ul>\n<p>Here are the top use cases for chess:</p>\n<ul>\n<li><strong>Player moves a piece:</strong> To make a valid move of any chess piece.</li>\n<li><strong>Resign or forfeit a game:</strong> A player resigns from/forfeits the game.</li>\n<li><strong>Register new account/Cancel membership:</strong> To add a new member or cancel an existing member.</li>\n<li><strong>Update game log:</strong> To add a move to the game log.</li>\n</ul>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "856b926c-b2fa-4a21-8414-2c755cdcd2c6"
                            },
                            "hash": "3",
                            "iteration": 2,
                            "saveVersion": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5222582561275904,
                                "style": "original",
                                "caption": "Use case diagram",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 833,
                                    "height": 934,
                                    "sizeInBytes": 161888,
                                    "name": "usecase (1).png"
                                },
                                "comp_id": "05ad6465-391a-49a2-9088-47ac992b227f"
                            },
                            "hash": "4",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## Class diagram\n\nHere are the main classes for chess:\n\n* **Player:** Player class represents one of the participants playing the game. It keeps track of which side (black or white) the player is playing.\n\n* **Account:** We'll have two types of accounts in the system: one will be a player, and the other will be an admin.\n\n* **Game:** This class controls the flow of a game. It keeps track of all the game moves, which player has the current turn, and the final result of the game.\n \n* **Box:** A box represents one block of the 8x8 grid and an optional piece.\n\n* **Board:** Board is an 8x8 set of boxes containing all active chess pieces.\n\n* **Piece:** The basic building block of the system, every piece will be placed on a box. This class contains the color the piece represents and the status of the piece (that is, if the piece is currently in play or not). This would be an abstract class and all game pieces will extend it.\n\n* **Move:** Represents a game move, containing the starting and ending box. The Move class will also keep track of the player who made the move, if it is a castling move, or if the move resulted in the capture of a piece.\n\n* **GameController:** Player class uses GameController to make moves.\n\n* **GameView:** Game class updates the GameView to show changes to the players.\n\n",
                                "mdHtml": "<h2>Class diagram</h2>\n<p>Here are the main classes for chess:</p>\n<ul>\n<li>\n<p><strong>Player:</strong> Player class represents one of the participants playing the game. It keeps track of which side (black or white) the player is playing.</p>\n</li>\n<li>\n<p><strong>Account:</strong> We\u2019ll have two types of accounts in the system: one will be a player, and the other will be an admin.</p>\n</li>\n<li>\n<p><strong>Game:</strong> This class controls the flow of a game. It keeps track of all the game moves, which player has the current turn, and the final result of the game.</p>\n</li>\n<li>\n<p><strong>Box:</strong> A box represents one block of the 8x8 grid and an optional piece.</p>\n</li>\n<li>\n<p><strong>Board:</strong> Board is an 8x8 set of boxes containing all active chess pieces.</p>\n</li>\n<li>\n<p><strong>Piece:</strong> The basic building block of the system, every piece will be placed on a box. This class contains the color the piece represents and the status of the piece (that is, if the piece is currently in play or not). This would be an abstract class and all game pieces will extend it.</p>\n</li>\n<li>\n<p><strong>Move:</strong> Represents a game move, containing the starting and ending box. The Move class will also keep track of the player who made the move, if it is a castling move, or if the move resulted in the capture of a piece.</p>\n</li>\n<li>\n<p><strong>GameController:</strong> Player class uses GameController to make moves.</p>\n</li>\n<li>\n<p><strong>GameView:</strong> Game class updates the GameView to show changes to the players.</p>\n</li>\n</ul>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "0be8a9b5-2738-42fa-99ab-1f2b8ef955d9"
                            },
                            "hash": "5",
                            "iteration": 2,
                            "saveVersion": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 4716232446050304,
                                "style": "original",
                                "caption": "Class diagram",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 816,
                                    "height": 1099,
                                    "sizeInBytes": 169874,
                                    "name": "Class Diagram (2).png"
                                },
                                "comp_id": "b344f9b5-c5ee-4666-b786-eb62d2294393"
                            },
                            "hash": "6",
                            "iteration": 0
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 6038771390742528,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 571,
                                    "height": 511,
                                    "sizeInBytes": 25589,
                                    "name": "uml cheat sheet (1).svg"
                                },
                                "comp_id": "96602184-14b0-44b3-b66e-f8158fb92d88"
                            },
                            "hash": "7",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## Activity diagrams\n\n**Make move:** Any Player can perform this activity. Here are the set of steps to make a move:",
                                "mdHtml": "<h2>Activity diagrams</h2>\n<p><strong>Make move:</strong> Any Player can perform this activity. Here are the set of steps to make a move:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "714b5018-e1ed-44f2-99b2-fc9bf74c6375"
                            },
                            "hash": "8",
                            "iteration": 2,
                            "saveVersion": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5667039158992896,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 523,
                                    "height": 1448,
                                    "sizeInBytes": 29962,
                                    "name": "Make move - Activity Diagram(1).svg"
                                },
                                "comp_id": "39211846-3627-4ae7-ae72-2c67d4bafe1a"
                            },
                            "hash": "9",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## Code\nHere is the code for the top use cases.\n\n**Enums, DataTypes, Constants:** Here are the required enums, data types, and constants:",
                                "mdHtml": "<h2>Code</h2>\n<p>Here is the code for the top use cases.</p>\n<p><strong>Enums, DataTypes, Constants:</strong> Here are the required enums, data types, and constants:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "7b59baee-1620-48ba-82bf-d785b1c54b48"
                            },
                            "hash": "10",
                            "iteration": 2,
                            "saveVersion": 1
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public enum GameStatus {\n  ACTIVE, BLACK_WIN, WHITE_WIN, FORFEIT, STALEMATE, RESIGNATION\n}\n\npublic enum AccountStatus {\n  ACTIVE, CLOSED, CANCELED, BLACKLISTED, NONE\n}\n\npublic class Address {\n  private String streetAddress;\n  private String city;\n  private String state;\n  private String zipCode;\n  private String country;\n}\n\npublic class Person {\n  private String name;\n  private Address address;\n  private String email;\n  private String phone;\n}\n",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class GameStatus(Enum):\n  ACTIVE, BLACK_WIN, WHITE_WIN, FORFEIT, STALEMATE, RESIGNATION = 1, 2, 3, 4, 5, 6\n\n\nclass AccountStatus(Enum):\n  ACTIVE, CLOSED, CANCELED, BLACKLISTED, NONE = 1, 2, 3, 4, 5\n\n\nclass Address:\n  def __init__(self, street, city, state, zip_code, country):\n    self.__street_address = street\n    self.__city = city\n    self.__state = state\n    self.__zip_code = zip_code\n    self.__country = country\n\n\nclass Person():\n  def __init__(self, name, address, email, phone):\n    self.__name = name\n    self.__address = address\n    self.__email = email\n    self.__phone = phone\n",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "85b98b8e-5d0d-4843-ac66-44a6f35bb758"
                            },
                            "hash": "11",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Box:** To encapsulate a cell on the chess board:",
                                "mdHtml": "<p><strong>Box:</strong> To encapsulate a cell on the chess board:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "11e78682-b8a6-4a14-9de2-b60d5953dadb"
                            },
                            "hash": "12",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public class Box {\n  private Piece piece;\n  private int x;\n  private int y;\n\n  public Box(int x, int y, Piece piece) {\n    this.setPiece(piece);\n    this.setX(x);\n    this.setY(y);\n  }\n\n  public Piece getPiece() {\n    return this.piece;\n  }\n\n  public void setPiece(Piece p) {\n    this.piece = p;\n  }\n\n  public int getX() {\n    return this.x;\n  }\n\n  public void setX(int x) {\n    this.x = x;\n  }\n\n  public int getY() {\n    return this.y;\n  }\n\n  public void setY(int y) {\n    this.y = y;\n  }\n}",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class Box:\n  def __init__(self, piece, x, y):\n    self.__piece = piece\n    self.__x = x\n    self.__y = y\n\n  def get_piece(self):\n    return self.__piece\n\n  def set_piece(self, piece):\n    self.__piece = piece\n\n  def get_x(self):\n    return self.__x\n\n  def set_x(self, x):\n    self.__x = x\n\n  def get_y(self):\n    return self.__y\n\n  def set_y(self, y):\n    self.__y = y",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "c54ca3e4-2cb3-4a33-af87-c2ee476e84d8"
                            },
                            "hash": "13",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Piece:** An abstract class to encapsulate common functionality of all chess pieces:",
                                "mdHtml": "<p><strong>Piece:</strong> An abstract class to encapsulate common functionality of all chess pieces:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "241c7b87-be5f-46cd-9b4a-d11db9f7dde9"
                            },
                            "hash": "14",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public abstract class Piece {\n\n  private boolean killed = false;\n  private boolean white = false;\n\n  public Piece(boolean white) {\n    this.setWhite(white);\n  }\n\n  public boolean isWhite() {\n    return this.white == true;\n  }\n\n  public void setWhite(boolean white) {\n    this.white = white;\n  }\n\n  public boolean isKilled() {\n    return this.killed == true;\n  }\n\n  public void setKilled(boolean killed) {\n    this.killed = killed;\n  }\n\n  public abstract boolean canMove(Board board, Box start, Box end);\n}",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "from abc import ABC, abstractmethod\n\nclass Piece(ABC):\n  def __init__(self, white=False):\n    self.__killed = False\n    self.__white = white\n\n  def is_white(self):\n    return self.__white\n\n  def set_white(self, white):\n    self.__white = white\n\n  def is_killed(self):\n    return self.__killed\n\n  def set_killed(self, killed):\n    self.__killed = killed\n\n  def can_move(self, board, start_box, end_box):\n    None\n",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "91de59b6-dafd-4041-b5ca-9eb0ab1ece20"
                            },
                            "hash": "15",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**King:** To encapsulate King as a chess piece:",
                                "mdHtml": "<p><strong>King:</strong> To encapsulate King as a chess piece:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "1ee8ac50-55a5-4c2e-ab9d-253084b88986"
                            },
                            "hash": "16",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public class King extends Piece {\n  private boolean castlingDone = false;\n\n  public King(boolean white) {\n    super(white);\n  }\n\n  public boolean isCastlingDone() {\n    return this.castlingDone == true;\n  }\n\n  public void setCastlingDone(boolean castlingDone) {\n    this.castlingDone = castlingDone;\n  }\n\n  @Override\n  public boolean canMove(Board board, Box start, Box end) {\n    // we can't move the piece to a box that has a piece of the same color\n    if(end.getPiece().isWhite() == this.isWhite()) {\n      return false;\n    }\n\n    int x = Math.abs(start.getX() - end.getX());\n    int y = Math.abs(start.getY() - end.getY());\n    if(x + y == 1) {\n      // check if this move will not result in king being attacked, if so return true\n      return true;\n    }\n\n    return this.isValidCastling(board, start, end);\n  }\n\n  private boolean isValidCastling(Board board, Box start, Box end) {\n\n    if(this.isCastlingDone()) {\n      return false;\n    }\n\n    // check for the white king castling\n    if(this.isWhite()\n      && start.getX() == 0 && start.getY() == 4 && end.getY() == 0) {\n        // confirm if white king moved to the correct ending box\n        if (Math.abs(end.getY() - start.getY()) == 2) {\n          // check if there the Rook is in the correct position\n          // check if there is no piece between Rook and the King\n          // check if the King or the Rook has not moved before\n          // check if this move will not result in king being attacked\n          //...\n          this.setCastlingDone(true);\n          return true;\n        }\n    } else {\n      // check for the black king castling\n      this.setCastlingDone(true);\n      return true;\n    }\n\n    return false;\n  }\n\n  public boolean isCastlingMove(Box start, Box end) {\n    // check if the starting and ending position are correct\n  }\n}\n",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class King(Piece):\n  def __init__(self, white):\n    self.__castling_done = False\n    super().__init__(white)\n\n  def is_castling_done(self):\n    return self.__castling_done\n\n  def set_castling_done(self, castling_done):\n    self.__castling_done = castling_done\n\n  def can_move(self, board, start_box, end_box):\n    # we can't move the piece to a box that has a piece of the same color\n    if end_box.get_piece().is_white() == self.is_white():\n      return False\n\n    x = abs(start_box.get_x() - end_box.get_x())\n    y = abs(start_box.get_y() - end_box.get_y())\n    if x + y == 1:\n      # check if self move will not result in king being attacked, if so return True\n      return True\n\n    return self.is_valid_castling(board, start_box, end_box)\n\n  def is_valid_castling(self, board, start, end):\n\n    if self.is_castling_done():\n      return False\n\n    # check for the white king castling\n    if self.is_white() and start.get_x() == 0 and start.get_y() == 4 and end.get_y() == 0:\n      # confirm if white king moved to the correct ending box\n      if abs(end.get_y() - start.get_y()) == 2:\n        # check if there the Rook is in the correct position\n        # check if there is no piece between Rook and the King\n        # check if the King or the Rook has not moved before\n        # check if self move will not result in king being attacked\n        # ...\n        self.set_castling_done(True)\n        return True\n\n    else:\n      # check for the black king castling\n      self.set_castling_done(True)\n      return True\n\n    return False\n\n  def is_castling_move(self, start, end):\n    # check if the starting and ending position are correct\n    None\n",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "6fa90ae6-6f16-4f2f-a7a8-080297c774f7"
                            },
                            "hash": "17",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Knight:** To encapsulate Knight as a chess piece:",
                                "mdHtml": "<p><strong>Knight:</strong> To encapsulate Knight as a chess piece:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "4f880e44-1011-4ce1-b229-f038c1eecd62"
                            },
                            "hash": "18",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public class Knight extends Piece {\n  public Knight(boolean white) {\n    super(white);\n  }\n\n  @Override\n  public boolean canMove(Board board, Box start, Box end) {\n\n    // we can't move the piece to a box that has a piece of the same color\n    if(end.getPiece().isWhite() == this.isWhite()) {\n      return false;\n    }\n\n    int x = Math.abs(start.getX() - end.getX());\n    int y = Math.abs(start.getY() - end.getY());\n    return x * y == 2;\n  }\n}\n\n",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class Knight(Piece):\n  def __init__(self, white):\n    super().__init__(white)\n\n  def can_move(self, board, start, end):\n\n    # we can't move the piece to a box that has a piece of the same color\n    if end.get_piece().is_white() == self.is_white():\n      return False\n\n    x = abs(start.get_x() - end.get_x())\n    y = abs(start.get_y() - end.get_y())\n    return x * y == 2",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "c27718ee-eba8-4537-85d6-c75f5aedeb89"
                            },
                            "hash": "19",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Board:** To encapsulate a chess board:",
                                "mdHtml": "<p><strong>Board:</strong> To encapsulate a chess board:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "f502e9c8-81a5-45bf-8297-9f50f9677e0c"
                            },
                            "hash": "20",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public class Board {\n  Box[][] boxes;\n\n  public Board() {\n    this.resetBoard();\n  }\n\n  public Box getBox(int x, int y) {\n\n    if (x < 0 || x > 7 || y < 0 || y > 7) {\n      throw new Exception(\"Index out of bound\");\n    }\n\n    return boxes[x][y];\n  }\n\n  public void resetBoard() {\n    // initialize white pieces\n    boxes[0][0] = new Box(new Rook(true), 0, 0);\n    boxes[0][1] = new Box(new Knight(true), 0, 1);\n    boxes[0][2] = new Box(new Bishop(true), 0, 2);\n    //...\n    boxes[1][0] = new Box(new Pawn(true), 1, 0);\n    boxes[1][1] = new Box(new Pawn(true), 1, 1);\n    //...\n\n    // initialize black pieces\n    boxes[7][0] = new Box(new Rook(false), 7, 0);\n    boxes[7][1] = new Box(new Knight(false), 7, 1);\n    boxes[7][2] = new Box(new Bishop(false), 7, 2);\n    //...\n    boxes[6][0] = new Box(new Pawn(false), 6, 0);\n    boxes[6][1] = new Box(new Pawn(false), 6, 1);\n    //...\n\n    // initialize remaining boxes without any piece\n    for (int i = 2; i < 6; i++) {\n      for (int j = 0; j < 8; j++) {\n        boxes[i][j] = new Box(null, i, j);\n      }\n    }\n  }\n}",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0,
                                        "onlyCodeChanged": true
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class Board:\n  def __init__(self):\n    self.__boxes = [[]]\n\n  def Board(self):\n    self.reset_board()\n\n  def get_box(self, x, y):\n    if x < 0 or x > 7 or y < 0 or y > 7:\n      raise Exception(\"Index out of bound\")\n    return self.__boxes[x][y]\n\n  def reset_board(self):\n    # initialize white pieces\n    boxes[0][0] = Box(Rook(True), 0, 0);\n    boxes[0][1] = Box(Knight(True), 0, 1);\n    boxes[0][2] = Box(Bishop(True), 0, 2);\n    #...\n    boxes[1][0] = Box(Pawn(True), 1, 0);\n    boxes[1][1] = Box(Pawn(True), 1, 1);\n    #...\n\n    # initialize black pieces\n    boxes[7][0] = Box(Rook(False), 7, 0);\n    boxes[7][1] = Box(Knight(False), 7, 1);\n    boxes[7][2] = Box(Bishop(False), 7, 2);\n    #...\n    boxes[6][0] = Box(Pawn(False), 6, 0);\n    boxes[6][1] = Box(Pawn(False), 6, 1);\n    # ...\n\n    # initialize remaining boxes without any piece\n    for i in range(2, 6):\n      for j in range(0, 8):\n        boxes[i][j] = Box(i, j, None)",
                                        "entryFileName": "main.py",
                                        "key": 1,
                                        "onlyCodeChanged": true
                                    }
                                ],
                                "comp_id": "377e9ea5-e4a1-44f8-9055-89bffa8a03ef"
                            },
                            "hash": "21",
                            "iteration": 1,
                            "saveVersion": 2
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Player:** To encapsulate a chess player:",
                                "mdHtml": "<p><strong>Player:</strong> To encapsulate a chess player:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "b49c0a6b-2099-4341-a1da-3279acbc17d1"
                            },
                            "hash": "22",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public class Player extends Account{\n  private Person person;\n  private boolean whiteSide = false;\n\n  public Player(Person person, boolean whiteSide){\n    this.person = person;\n    this.whiteSide = whiteSide;\n  }\n\n  public boolean isWhiteSide() {\n    return this.whiteSide == true;\n  }\n}\n",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class Player(Account):\n  def __init__(self, person, white_side=False):\n    self.__person = person\n    self.__white_side = white_side\n\n  def is_white_side(self):\n    return self.__white_side\n",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "db7d27c5-3a8f-4990-9104-024e80c3bee3"
                            },
                            "hash": "23",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Move:** To encapsulate a chess move:",
                                "mdHtml": "<p><strong>Move:</strong> To encapsulate a chess move:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "84c53391-5566-42f5-a577-d7ca639b80fe"
                            },
                            "hash": "24",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public class Move {\n  private Player player;\n  private Box start;\n  private Box end;\n  private Piece pieceMoved;\n  private Piece pieceKilled;\n  private boolean castlingMove = false;\n\n  public Move(Player player, Box start, Box end){\n    this.player = player;\n    this.start = start;\n    this.end = end;\n    this.pieceMoved = start.getPiece();\n  }\n\n  public boolean isCastlingMove() {\n    return this.castlingMove == true;\n  }\n\n  public void setCastlingMove(boolean castlingMove) {\n    this.castlingMove = castlingMove;\n  }\n}\n",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class Move:\n  def is_white_side(self, player, start_box, end_box, piece_killed, castling_move=False):\n    self.__player = player\n    self.__start = start_box\n    self.__end = end_box\n    self.__piece_moved = self.__start.get_piece()\n    self.__piece_killed = piece_killed\n    self.__castling_move = castling_move\n\n  def is_castling_move(self):\n    return self.__castling_move\n\n  def set_castling_move(self, castling_move):\n    self.__castling_move = castling_move",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "e185e551-93b2-46f0-bf5a-ef54c1df3520"
                            },
                            "hash": "25",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Game:** To encapsulate a chess game:",
                                "mdHtml": "<p><strong>Game:</strong> To encapsulate a chess game:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "d68c0ba0-fba9-4ab8-87d4-4d9fd400f087"
                            },
                            "hash": "26",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "edit",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public class Game {\n  private Player[] players;\n  private Board board;\n  private Player currentTurn;\n  private GameStatus status;\n  private List<Move> movesPlayed;\n\n  private void initialize(Player p1, Player p2) {\n    players[0] = p1;\n    players[1] = p2;\n\n    board.resetBoard();\n\n    if(p1.isWhiteSide()) {\n      this.currentTurn = p1;\n    } else {\n      this.currentTurn = p2;\n    }\n\n    movesPlayed.clear();\n  }\n\n  public boolean isEnd() {\n    return this.getStatus() != GameStatus.ACTIVE;\n  }\n\n  public boolean getStatus() {\n    return this.status;\n  }\n\n  public void setStatus(GameStatus status) {\n    this.status = status;\n  }\n\n  public boolean playerMove(Player player, int startX, int startY, int endX, int endY) {\n      Box startBox = board.getBox(startX, startY);\n      Box endBox = board.getBox(startY, endY);\n      Move move = new Move(player, startBox, endBox);\n      return this.makeMove(move, player);\n  }\n\n  private boolean makeMove(Move move, Player player) {\n    Piece sourcePiece = move.getStart().getPiece();\n    if (sourcePiece == null) {\n      return false;\n    }\n\n    // valid player\n    if (player != currentTurn) {\n      return false;\n    }\n\n    if (sourcePiece.isWhite() != player.isWhiteSide()) {\n      return false;\n    }\n\n    // valid move?\n    if (!sourcePiece.canMove(board, move.getStart(), move.getEnd())){\n      return false;\n    }\n\n    // kill?\n    Piece destPiece = move.getStart().getPiece();\n    if (destPiece != null) {\n      destPiece.setKilled(true);\n      move.setPieceKilled(destPiece);\n    }\n\n    // castling?\n    if (sourcePiece != null && sourcePiece instanceof King\n        && sourcePiece.isCastlingMove()) {\n      move.setCastlingMove(true);\n    }\n\n    // store the move\n    movesPlayed.add(move);\n\n    // move piece from the stat box to end box\n    move.getEnd().setPiece(move.getStart().getPiece());\n    move.getStart.setPiece(null);\n\n    if (destPiece != null && destPiece instanceof King) {\n      if(player.isWhiteSide()) {\n        this.setStatus(GameStatus.WHITE_WIN);\n      } else {\n        this.setStatus(GameStatus.BLACK_WIN);\n      }\n    }\n\n    // set the current turn to the other player\n    if(this.currentTurn == players[0]) {\n      this.currentTurn = players[1];\n    } else {\n      this.currentTurn = players[0];\n    }\n\n    return true;\n  }\n}\n",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class Game:\n  def __init__(self):\n    self.__players = []\n    self.__board = Board()\n    self.__current_turn = None\n    self.__status = GameStatus.ACTIVE\n    self.__moves_played = []\n\n  def initialize(self, player1, player2):\n    self.__players[0] = player1\n    self.__players[1] = player2\n\n    self.__board.reset_board()\n\n    if player1.is_white_side():\n      self.__current_turn = player1\n    else:\n      self.__current_turn = player2\n\n    self.__moves_played.clear()\n\n  def is_end(self):\n    return self.get_status() != GameStatus.ACTIVE\n\n  def get_status(self):\n    return self.__status\n\n  def set_status(self, status):\n    self.__status = status\n\n  def player_move(self, player, start_x, start_y, end_x, end_y):\n    start_box = self.__board.get_box(start_x, start_y)\n    end_box = self.__board.get_box(start_y, end_y)\n    move = Move(player, start_box, end_box)\n    return self.__make_move(move, player)\n\n  def make_move(self, move, player):\n    source_piece = move.get_start().get_piece()\n    if source_piece == None:\n      return False\n\n    # valid player?\n    if player != self.__current_turn:\n      return False\n\n    if source_piece.is_white() != player.is_white_side():\n      return False\n\n    # valid move?\n    if not source_piece.can_move(self.__board, move.get_start(), move.get_end()):\n      return False\n\n    # kill?\n    dest_piece = move.get_start().get_piece()\n    if dest_piece != None:\n      dest_piece.set_killed(True)\n      move.set_pieceKilled(dest_piece)\n\n    # castling?\n    if source_piece != None and source_piece is King and source_piece.is_castling_move():\n      move.set_castling_move(True)\n\n    # store the move\n    self.__moves_played.add(move)\n\n    # move piece from the stat box to end box\n    move.get_end().set_piece(move.get_start().get_piece())\n    move.get_start.set_piece(None)\n\n    if dest_piece != None and dest_piece is King:\n      if player.is_white_side():\n        self.set_status(GameStatus.WHITE_WIN)\n      else:\n        self.set_status(GameStatus.BLACK_WIN)\n\n    # set the current turn to the other player\n    if self.__current_turn == self.__players[0]:\n      self.__current_turn = self.__players[1]\n    else:\n      self.__current_turn = self.__players[0]\n\n    return True\n",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "9f6cc4d3-9e46-43cf-9dfa-9571704cf323"
                            },
                            "hash": "27",
                            "iteration": 1
                        }
                    ],
                    "summary": {
                        "title": "Design Chess",
                        "description": "Let's design a system to play online chess.",
                        "titleUpdated": true
                    }
                },
                {
                    "components": [
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "An Online Stock Brokerage System facilitates its users the trade (i.e. buying and selling) of stocks online. It allows clients to keep track of and execute their transactions, and shows performance charts of the different stocks in their portfolios. It also provides security for their transactions and alerts them to pre-defined levels of changes in stocks, without the use of any middlemen.\n\nThe online stock brokerage system automates traditional stock trading using computers and the internet, making the transaction faster and cheaper. This system also gives speedier access to stock reports, current market trends, and real-time stock prices.",
                                "mdHtml": "<p>An Online Stock Brokerage System facilitates its users the trade (i.e. buying and selling) of stocks online. It allows clients to keep track of and execute their transactions, and shows performance charts of the different stocks in their portfolios. It also provides security for their transactions and alerts them to pre-defined levels of changes in stocks, without the use of any middlemen.</p>\n<p>The online stock brokerage system automates traditional stock trading using computers and the internet, making the transaction faster and cheaper. This system also gives speedier access to stock reports, current market trends, and real-time stock prices.</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "f6c5f8bd-6c96-46d5-af22-b8dba7e4aa85"
                            },
                            "hash": "1",
                            "iteration": 1,
                            "saveVersion": 3
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 6324884267335680,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 700,
                                    "height": 393,
                                    "sizeInBytes": 99334,
                                    "name": "stock.jpg"
                                },
                                "comp_id": "dfb5e10f-27f3-4d56-903a-c63312b3f10e"
                            },
                            "hash": "2",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## System Requirements\n\nWe will focus on the following set of requirements while designing the online stock brokerage system:\n\n1. Any user of our system should be able to buy and sell stocks.\n\n2. Any user can have multiple watchlists containing multiple stock quotes.\n\n3. Users should be able to place stock trade orders of the following types: 1) market, 2) limit, 3) stop loss and, 4) stop limit.\n\n4. Users can have multiple 'lots' of a stock. This means that if a user has bought a stock multiple times, the system should be able to differentiate between different lots of the same stock. \n\n5. The system should be able to generate reports for quarterly updates and yearly tax statements.\n\n6. Users should be able to deposit and withdraw money either via check, wire, or electronic bank transfer.\n\n7. The system should be able to send notifications whenever trade orders are executed.\n\n## Usecase diagram\n\nWe have three main Actors in our system:\n\n* **Admin:** Mainly responsible for administrative functions like blocking or unblocking members.\n* **Member:** All members can search the stock inventory, as well as buy and sell stocks. Members can have multiple watchlists containing multiple stock quotes.\n* **System:** Mainly responsible for sending notifications for stock orders and periodically fetching stock quotes from the stock exchange.\n\nHere are the top use cases of the Stock Brokerage System:\n\n* **Register new account/Cancel membership:** To add a new member or cancel the membership of an existing member.\n* **Add/Remove/Edit watchlist:** To add, remove or modify a watchlist.\n* **Search stock inventory:** To search for stocks by their symbols.\n* **Place order:** To place a buy or sell order on the stock exchange.\n* **Cancel order:** Cancel an already placed order.\n* **Deposit/Withdraw money:** Members can deposit or withdraw money via check, wire or electronic bank transfer.",
                                "mdHtml": "<h2>System Requirements</h2>\n<p>We will focus on the following set of requirements while designing the online stock brokerage system:</p>\n<ol>\n<li>\n<p>Any user of our system should be able to buy and sell stocks.</p>\n</li>\n<li>\n<p>Any user can have multiple watchlists containing multiple stock quotes.</p>\n</li>\n<li>\n<p>Users should be able to place stock trade orders of the following types: 1) market, 2) limit, 3) stop loss and, 4) stop limit.</p>\n</li>\n<li>\n<p>Users can have multiple \u2018lots\u2019 of a stock. This means that if a user has bought a stock multiple times, the system should be able to differentiate between different lots of the same stock.</p>\n</li>\n<li>\n<p>The system should be able to generate reports for quarterly updates and yearly tax statements.</p>\n</li>\n<li>\n<p>Users should be able to deposit and withdraw money either via check, wire, or electronic bank transfer.</p>\n</li>\n<li>\n<p>The system should be able to send notifications whenever trade orders are executed.</p>\n</li>\n</ol>\n<h2>Usecase diagram</h2>\n<p>We have three main Actors in our system:</p>\n<ul>\n<li><strong>Admin:</strong> Mainly responsible for administrative functions like blocking or unblocking members.</li>\n<li><strong>Member:</strong> All members can search the stock inventory, as well as buy and sell stocks. Members can have multiple watchlists containing multiple stock quotes.</li>\n<li><strong>System:</strong> Mainly responsible for sending notifications for stock orders and periodically fetching stock quotes from the stock exchange.</li>\n</ul>\n<p>Here are the top use cases of the Stock Brokerage System:</p>\n<ul>\n<li><strong>Register new account/Cancel membership:</strong> To add a new member or cancel the membership of an existing member.</li>\n<li><strong>Add/Remove/Edit watchlist:</strong> To add, remove or modify a watchlist.</li>\n<li><strong>Search stock inventory:</strong> To search for stocks by their symbols.</li>\n<li><strong>Place order:</strong> To place a buy or sell order on the stock exchange.</li>\n<li><strong>Cancel order:</strong> Cancel an already placed order.</li>\n<li><strong>Deposit/Withdraw money:</strong> Members can deposit or withdraw money via check, wire or electronic bank transfer.</li>\n</ul>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "bbc5a5ec-7e4d-4d6f-8924-35b65a0d2443"
                            },
                            "hash": "3",
                            "iteration": 2,
                            "saveVersion": 2
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5758920052178944,
                                "style": "original",
                                "caption": "Use case diagram for Stock Brokerage System",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 834,
                                    "height": 1044,
                                    "sizeInBytes": 42119,
                                    "name": "usecase(23).svg"
                                },
                                "comp_id": "61f423d8-5982-4a1e-8ff5-b97fee2b5266"
                            },
                            "hash": "4",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## Class diagram\n\nHere are the main classes of our Online Stock Brokerage System:\n\n* **Account:** Consists of the member's name, address, e-mail, phone, total funds, funds that are available for trading, etc. We'll have two types of accounts in the system: one will be a general member, and the other will be an Admin. The Account class will also contain all the stocks the member is holding.\n\n* **StockExchange:**  The stockbroker system will fetch all stocks and their current prices from the stock exchange. StockExchange will be a singleton class encapsulating all interactions with the stock exchange. This class will also be used to place stock trading orders on the stock exchange.\n\n* **Stock:** The basic building block of the system. Every stock will have a symbol, current trading price, etc.\n\n* **StockInventory:** This class will fetch and maintain the latest stock prices from the StockExchange. All system components will read the most recent stock prices from this class.\n\n* **Watchlist:** A watchlist will contain a list of stocks that the member wants to follow.\n\n* **Order:** Members can place stock trading orders whenever they would like to sell or buy stock positions. The system would support multiple types of orders:\n  * **Market Order:** Market order will enable users to buy or sell stocks immediately at the current market price.\n  * **Limit Order:** Limit orders will allow a user to set a price at which they want to buy or sell a stock.\n  * **Stop Loss Order:** An order to buy or sell once the stock reaches a certain price.\n  * **Stop Limit Order:** The stop-limit order will be executed at a specified price or better after a given stop price has been reached. Once the stop price is reached, the stop-limit order becomes a limit order to buy or sell at the limit price or better.\n\n* **OrderPart:** An order could be fulfilled in multiple parts. For example, a market order to buy 100 stocks could have one part containing 70 stocks at \\$10 and another part with 30 stocks at \\$10.05.\n\n* **StockLot:** Any member can buy multiple lots of the same stock at different times. This class will represent these individual lots. For example, the user could have purchased 100 shares of AAPL yesterday and 50 more stocks of AAPL today. While selling, users will be able to select which lot they want to sell first.\n\n* **StockPosition:** This class will contain all the stocks that the user holds.\n\n* **Statement:** All members will have reports for quarterly updates and yearly tax statements.\n\n* **DepositMoney & WithdrawMoney:** Members will be able to move money through check, wire or electronic bank transfers.\n\n* **Notification:** Will take care of sending notifications to members.",
                                "mdHtml": "<h2>Class diagram</h2>\n<p>Here are the main classes of our Online Stock Brokerage System:</p>\n<ul>\n<li>\n<p><strong>Account:</strong> Consists of the member\u2019s name, address, e-mail, phone, total funds, funds that are available for trading, etc. We\u2019ll have two types of accounts in the system: one will be a general member, and the other will be an Admin. The Account class will also contain all the stocks the member is holding.</p>\n</li>\n<li>\n<p><strong>StockExchange:</strong>  The stockbroker system will fetch all stocks and their current prices from the stock exchange. StockExchange will be a singleton class encapsulating all interactions with the stock exchange. This class will also be used to place stock trading orders on the stock exchange.</p>\n</li>\n<li>\n<p><strong>Stock:</strong> The basic building block of the system. Every stock will have a symbol, current trading price, etc.</p>\n</li>\n<li>\n<p><strong>StockInventory:</strong> This class will fetch and maintain the latest stock prices from the StockExchange. All system components will read the most recent stock prices from this class.</p>\n</li>\n<li>\n<p><strong>Watchlist:</strong> A watchlist will contain a list of stocks that the member wants to follow.</p>\n</li>\n<li>\n<p><strong>Order:</strong> Members can place stock trading orders whenever they would like to sell or buy stock positions. The system would support multiple types of orders:</p>\n<ul>\n<li><strong>Market Order:</strong> Market order will enable users to buy or sell stocks immediately at the current market price.</li>\n<li><strong>Limit Order:</strong> Limit orders will allow a user to set a price at which they want to buy or sell a stock.</li>\n<li><strong>Stop Loss Order:</strong> An order to buy or sell once the stock reaches a certain price.</li>\n<li><strong>Stop Limit Order:</strong> The stop-limit order will be executed at a specified price or better after a given stop price has been reached. Once the stop price is reached, the stop-limit order becomes a limit order to buy or sell at the limit price or better.</li>\n</ul>\n</li>\n<li>\n<p><strong>OrderPart:</strong> An order could be fulfilled in multiple parts. For example, a market order to buy 100 stocks could have one part containing 70 stocks at $10 and another part with 30 stocks at $10.05.</p>\n</li>\n<li>\n<p><strong>StockLot:</strong> Any member can buy multiple lots of the same stock at different times. This class will represent these individual lots. For example, the user could have purchased 100 shares of AAPL yesterday and 50 more stocks of AAPL today. While selling, users will be able to select which lot they want to sell first.</p>\n</li>\n<li>\n<p><strong>StockPosition:</strong> This class will contain all the stocks that the user holds.</p>\n</li>\n<li>\n<p><strong>Statement:</strong> All members will have reports for quarterly updates and yearly tax statements.</p>\n</li>\n<li>\n<p><strong>DepositMoney &amp; WithdrawMoney:</strong> Members will be able to move money through check, wire or electronic bank transfers.</p>\n</li>\n<li>\n<p><strong>Notification:</strong> Will take care of sending notifications to members.</p>\n</li>\n</ul>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "090bd8dc-909e-4cbd-a4e9-1eccdee148aa"
                            },
                            "hash": "5",
                            "iteration": 2,
                            "saveVersion": 2
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 4619378060427264,
                                "style": "original",
                                "caption": "Class diagram",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 1170,
                                    "height": 1110,
                                    "sizeInBytes": 284797,
                                    "name": "Class Diagram (14).png"
                                },
                                "comp_id": "0fa573ec-4d56-4b3f-89ff-25b9af995366"
                            },
                            "hash": "6",
                            "iteration": 0
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5492086411362304,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 571,
                                    "height": 511,
                                    "sizeInBytes": 25589,
                                    "name": "uml cheat sheet (1).svg"
                                },
                                "comp_id": "7693682b-6976-4ea7-a30c-eff7b73c06d4"
                            },
                            "hash": "7",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## Activity diagrams\n\n**Place a buy order:** Any system user can perform this activity. Here are the steps to place a buy order:",
                                "mdHtml": "<h2>Activity diagrams</h2>\n<p><strong>Place a buy order:</strong> Any system user can perform this activity. Here are the steps to place a buy order:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "7c0231b1-31e1-4bc4-98c4-4a044322e2ac"
                            },
                            "hash": "8",
                            "iteration": 2,
                            "saveVersion": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5718016125829120,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 478,
                                    "height": 761,
                                    "sizeInBytes": 18780,
                                    "name": "Place stock buy order - Activity Diagram.svg"
                                },
                                "comp_id": "b56ed12c-4df4-4dcf-894b-396d24df368d"
                            },
                            "hash": "9",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Place a sell order:** Any system user can perform this activity. Here are the steps to place a buy order:",
                                "mdHtml": "<p><strong>Place a sell order:</strong> Any system user can perform this activity. Here are the steps to place a buy order:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "d6aeba89-fa22-4bd7-898b-f676307d2577"
                            },
                            "hash": "10",
                            "iteration": 0
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5690665774088192,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 478,
                                    "height": 858,
                                    "sizeInBytes": 20262,
                                    "name": "Place stock sell order - Activity Diagram.svg"
                                },
                                "comp_id": "1fd52570-4f22-4438-a7d7-d85708783fae"
                            },
                            "hash": "11",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## Code\n\nHere is the code for the top use cases.\n\n**Enums and Constants:** Here are the required enums and constants:",
                                "mdHtml": "<h2>Code</h2>\n<p>Here is the code for the top use cases.</p>\n<p><strong>Enums and Constants:</strong> Here are the required enums and constants:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "8e6bf537-05ec-4f8b-8b20-0373a1cdf90d"
                            },
                            "hash": "12",
                            "iteration": 2,
                            "saveVersion": 1
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public enum ReturnStatus {\n  SUCCESS, FAIL, INSUFFICIENT_FUNDS, INSUFFICIENT_QUANTITY, NO_STOCK_POSITION\n}\n\npublic enum OrderStatus {\n  OPEN, FILLED, PARTIALLY_FILLED, CANCELLED\n}\n\npublic enum TimeEnforcementType {\n  GOOD_TILL_CANCELLED, FILL_OR_KILL, IMMEDIATE_OR_CANCEL, ON_THE_OPEN, ON_THE_CLOSE\n}\n\npublic enum AccountStatus {\n  ACTIVE, CLOSED, CANCELED, BLACKLISTED, None\n}\n\npublic class Location {\n  private String streetAddress;\n  private String city;\n  private String state;\n  private String zipCode;\n  private String country;\n}\n\npublic static class Constants {\n  public static final int MONEY_TRANSFER_LIMIT = 100_000;\n}",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class ReturnStatus(Enum):\n  SUCCESS, FAIL, INSUFFICIENT_FUNDS, INSUFFICIENT_QUANTITY, NO_STOCK_POSITION = 1, 2, 3, 4, 5, 6\n\n\nclass OrderStatus(Enum):\n  OPEN, FILLED, PARTIALLY_FILLED, CANCELLED = 1, 2, 3, 4\n\n\nclass TimeEnforcementType(Enum):\n  GOOD_TILL_CANCELLED, FILL_OR_KILL, IMMEDIATE_OR_CANCEL, ON_THE_OPEN, ON_THE_CLOSE = 1, 2, 3, 4, 5\n\n\nclass AccountStatus(Enum):\n  ACTIVE, CLOSED, CANCELED, BLACKLISTED, NONE = 1, 2, 3, 5\n\n\nclass Location:\n  def __init__(self, street, city, state, zip_code, country):\n    self.__street_address = street\n    self.__city = city\n    self.__state = state\n    self.__zip_code = zip_code\n    self.__country = country\n\n\nclass Constants:\n  def __init__(self):\n    self.__MONEY_TRANSFER_LIMIT = 100000",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "774bdb5f-854d-48c5-aee0-37fc9b52b366"
                            },
                            "hash": "20",
                            "iteration": 2
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**StockExchange:** To encapsulate all the interactions with the stock exchange:",
                                "mdHtml": "<p><strong>StockExchange:</strong> To encapsulate all the interactions with the stock exchange:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "55df5f5d-45de-4f60-bd39-f50b6935ad02"
                            },
                            "hash": "14",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public class StockExchange {\n\n  private static StockExchange stockExchangeInstance = null;\n\n  // private constructor to restrict for singleton\n  private StockExchange() { }\n\n  // static method to get the singleton instance of StockExchange\n  public static StockExchange getInstance()\n  {\n    if(stockExchangeInstance == null) {\n      stockExchangeInstance = new StockExchange();\n    }\n    return stockExchangeInstance;\n  }\n\n  public static boolean placeOrder(Order order) {\n    boolean returnStatus = getInstance().submitOrder(Order);\n    return returnStatus;\n  }\n}\n",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class StockExchange:\n  # singleton, used for restricting to create only one instance\n  instance = None\n\n  class __OnlyOne:\n    def __init__(self):\n      None\n\n  def __init__(self):\n    if not StockExchange.instance:\n      StockExchange.instance = StockExchange.__OnlyOne()\n\n  def place_order(self, order):\n    return_status = self.get_instance().submit_order(Order)\n    return return_status",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "e85d916e-823a-45b8-9a52-57e82588db84"
                            },
                            "hash": "21",
                            "iteration": 2
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Order:** To encapsulate all buy or sell orders:",
                                "mdHtml": "<p><strong>Order:</strong> To encapsulate all buy or sell orders:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "ff6e3597-0145-446e-97e1-1c51fc7bd8f9"
                            },
                            "hash": "16",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public abstract class Order {\n  private String orderNumber;\n  public boolean isBuyOrder;\n  private OrderStatus status;\n  private TimeEnforcementType timeEnforcement;\n  private Date creationTime;\n\n  private HashMap<Integer, OrderPart> parts;\n\n  public void setStatus(OrderStatus status){\n    this.status = status;\n  }\n\n  public bool saveInDB() {\n    // save in the database\n  }\n\n  public void addOrderParts(OrderParts parts) {\n    for (OrderPart part : parts) {\n      this.parts.put(part.id, part);\n    }\n  }\n}\n\npublic class LimitOrder extends Order {\n  private double priceLimit;\n}\n",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "from abc import ABC, abstractmethod\nimport datetime\n\nclass Order(ABC):\n  def __init__(self, id):\n    self.__order_id = id\n    self.__is_buy_order = False\n    self.__status = OrderStatus.OPEN\n    self.__time_enforcement = TimeEnforcementType.ON_THE_OPEN\n    self.__creation_time = datetime.datetime.now()\n\n    self.__parts = {}\n\n  def set_status(self, status):\n    self.status = status\n\n  def save_in_DB(self):\n  # save in the database\n\n  def add_order_parts(self, parts):\n    for part in parts:\n      self.parts[part.get_id()] = part\n\n\nclass LimitOrder(Order):\n  def __init__(self):\n    self.__price_limit = 0.0\n",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "499d30e7-f4ca-4bb3-a103-075ee20cf672"
                            },
                            "hash": "22",
                            "iteration": 2
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Member:** Members will be buying and selling stocks: ",
                                "mdHtml": "<p><strong>Member:</strong> Members will be buying and selling stocks:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "8d303c0f-64a9-4241-832c-6dce6bc5a401"
                            },
                            "hash": "18",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "edit",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "// For simplicity, we are not defining getter and setter functions. The reader can\n// assume that all class attributes are private and accessed through their respective\n// public getter methods and modified only through their public methods function.\n\npublic abstract class Account {\n  private String id;\n  private String password;\n  private String name;\n  private AccountStatus status;\n  private Location address;\n  private String email;\n  private String phone;\n\n  public boolean resetPassword();\n}\n\npublic class Member extends Account {\n  private double availableFundsForTrading;\n  private Date dateOfMembership;\n\n  private HashMap<string, StockPosition> stockPositions;\n\n  private HashMap<Integer, Order> activeOrders;\n\n  public ErrorCode placeSellLimitOrder(\n    string stockId,\n    float quantity,\n    int limitPrice,\n    TimeEnforcementType enforcementType )\n  {\n    // check if member has this stock position\n    if(!stockPositions.containsKey(stockId)){\n      return NO_STOCK_POSITION;\n    }\n\n    StockPosition stockPosition = stockPositions.get(stockId);\n    // check if the member has enough quantity available to sell\n    if(stockPosition.getQuantity() < quantity){\n      return INSUFFICIENT_QUANTITY;\n    }\n\n    LimitOrder order =\n      new LimitOrder(stockId, quantity, limitPrice, enforcementType);\n    order.isBuyOrder = false;\n    order.saveInDB();\n    boolean success = StockExchange::placeOrder(order);\n    if(!success){\n      order.setStatus(OrderStatus::FAILED);\n      order.saveInDB();\n    } else {\n      activeOrders.add(orderId, order);\n    }\n    return success;\n  }\n\n  public ErrorCode placeBuyLimitOrder(\n    string stockId,\n    float quantity,\n    int limitPrice,\n    TimeEnforcementType enforcementType)\n  {\n    // check if the member has enough funds to buy this stock\n    if(availableFundsForTrading < quantity * limitPrice ){\n      return INSUFFICIENT_FUNDS;\n    }\n\n    LimitOrder order =\n      new LimitOrder(stockId, quantity, limitPrice, enforcementType);\n    order.isBuyOrder = true;\n    order.saveInDB();\n    boolean success = StockExchange::placeOrder(order);\n    if(!success){\n      order.setStatus(OrderStatus::FAILED);\n      order.saveInDB();\n    } else {\n      activeOrders.add(orderId, order);\n    }\n    return success;\n  }\n\n  // this function will be invoked whenever there is an update from\n  // stock exchange against an order\n  public void callbackStockExchange(int orderId, List<OrderPart> orderParts, OrderStatus status) {\n    Order order = activeOrders.get(orderId);\n    order.addOrderParts(orderParts);\n    order.setStatus(status);\n    order.updateInDB();\n\n    if (status == OrderStatus::FILLED || status == OrderStatus::CANCELLEd) {\n      activeOrders.remove(orderId);\n    }\n  }\n}",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0,
                                        "onlyCodeChanged": true
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "from abc import ABC, abstractmethod\n\nclass Account(ABC):\n  def __init__(self, id, password, name, address, email, phone, status=AccountStatus.NONE):\n    self.__id = id\n    self.__password = password\n    self.__name = name\n    self.__address = address\n    self.__email = email\n    self.__phone = phone\n    self.__status = AccountStatus.NONE\n\n  def reset_password(self):\n    None\n\nimport datetime\n\nclass Member(Account):\n  def __init__(self):\n    self.__available_funds_for_trading = 0.0\n    self.__date_of_membership = datetime.date.today()\n    self.__stock_positions = {}\n    self.__active_orders = {}\n\n  def place_sell_limit_order(self, stock_id, quantity, limit_price, enforcement_type):\n    # check if member has this stock position\n    if stock_id not in __stock_positions:\n      return ReturnStatus.NO_STOCK_POSITION\n\n    stock_position = __stock_positions[stock_id]\n    # check if the member has enough quantity available to sell\n    if stock_position.get_quantity() < quantity:\n      return ReturnStatus.INSUFFICIENT_QUANTITY\n\n    order = LimitOrder(stock_id, quantity, limit_price, enforcement_type)\n    order.is_buy_order = False\n    order.save_in_DB()\n    success = StockExchange.place_order(order)\n    if success:\n      order.set_status(OrderStatus.FAILED)\n      order.save_in_DB()\n    else:\n      self.active_orders.add(order.get_order_id(), order)\n    return success\n\n  def place_buy_limit_order(self, stock_id, quantity, limit_price, enforcement_type):\n    # check if the member has enough funds to buy this stock\n    if self.__available_funds_for_trading < quantity * limit_price:\n      return ReturnStatus.INSUFFICIENT_FUNDS\n\n    order = LimitOrder(stock_id, quantity, limit_price, enforcement_type)\n    order.is_buy_order = True\n    order.save_in_DB()\n    success = StockExchange.place_order(order)\n    if not success:\n      order.set_status(OrderStatus.FAILED)\n      order.save_in_DB()\n    else:\n      self.active_orders.add(order.get_order_id(), order)\n    return success\n\n  # this function will be invoked whenever there is an update from\n  # stock exchange against an order\n  def callback_stock_exchange(self, order_id, order_parts, status):\n    order = self.active_orders[order_id]\n    order.add_order_parts(order_parts)\n    order.set_status(status)\n    order.update_in_DB()\n\n    if status == OrderStatus.FILLED or status == OrderStatus.CANCELLEd:\n      self.active_orders.remove(order_id)\n",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "ec86d92a-92b7-471a-aa2a-c52b449ce07e"
                            },
                            "hash": "23",
                            "iteration": 2,
                            "saveVersion": 1
                        }
                    ],
                    "summary": {
                        "title": "Design an Online Stock Brokerage System",
                        "description": "Let's design an Online Stock Brokerage System.",
                        "titleUpdated": true
                    }
                },
                {
                    "components": [
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "A Car Rental System is a software built to handle the renting of automobiles for a short period of time, generally ranging from a few hours to a few weeks. A car rental system often has numerous local branches (to allow its user to return a vehicle to a different location), and primarily located near airports or busy city areas.\n\n",
                                "mdHtml": "<p>A Car Rental System is a software built to handle the renting of automobiles for a short period of time, generally ranging from a few hours to a few weeks. A car rental system often has numerous local branches (to allow its user to return a vehicle to a different location), and primarily located near airports or busy city areas.</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "dd1a5316-efcf-426f-8072-de1c60ca22c0"
                            },
                            "hash": "1",
                            "iteration": 1,
                            "saveVersion": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5162030461878272,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 1077,
                                    "height": 310,
                                    "sizeInBytes": 67857,
                                    "name": "car rental.png"
                                },
                                "comp_id": "030e1199-746c-4432-a0e4-2ce8496c9099"
                            },
                            "hash": "2",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## System Requirements\n\nWe will focus on the following set of requirements while designing our Car Rental System:\n\n1. The system will support the renting of different automobiles like cars, trucks, SUVs, vans, and motorcycles.\n\n2. Each vehicle should be added with a unique barcode and other details, including a parking stall number which helps to locate the vehicle.\n\n3. The system should be able to retrieve information like which member took a particular vehicle or what vehicles have been rented out by a specific member.\n\n4. The system should collect a late-fee for vehicles returned after the due date.\n\n5. Members should be able to search the vehicle inventory and reserve any available vehicle.\n\n6. The system should be able to send notifications whenever the reservation is approaching the pick-up date, as well as when the vehicle is nearing the due date or has not been returned within the due date.\n\n7. The system will be able to read barcodes from vehicles.\n\n8. Members should be able to cancel their reservations.\n\n9. The system should maintain a vehicle log to track all events related to the vehicles.\n\n10. Members can add rental insurance to their reservation.\n\n11. Members can rent additional equipment, like navigation, child seat, ski rack, etc.\n\n12. Members can add additional services to their reservation, such as roadside assistance, additional driver, wifi, etc.\n\n\n## Use case diagram\n\nWe have four main Actors in our system:\n\n* **Receptionist:** Mainly responsible for adding and modifying vehicles and workers. Receptionists can also reserve vehicles.\n* **Member:** All members can search the catalog, as well as reserve, pick-up, and return a vehicle.\n* **System:** Mainly responsible for sending notifications about overdue vehicles, canceled reservation, etc.\n* **Worker:** Mainly responsible for taking care of a returned vehicle and updating the vehicle log.\n\nHere are the top use cases of the Car Rental System:\n\n* **Add/Remove/Edit vehicle:** To add, remove or modify a vehicle.\n* **Search catalog:** To search for vehicles by type and availability.\n* **Register new account/Cancel membership:** To add a new member or cancel an existing membership.\n* **Reserve vehicle:** To reserve a vehicle.\n* **Check-out vehicle:** To rent a vehicle.\n* **Return a vehicle:** To return a vehicle which was checked-out to a member.\n* **Add equipment:** To add an equipment to a reservation like navigation, child seat, etc.\n* **Update car log:** To add or update a car log entry, such as refueling, cleaning, damage, etc.",
                                "mdHtml": "<h2>System Requirements</h2>\n<p>We will focus on the following set of requirements while designing our Car Rental System:</p>\n<ol>\n<li>\n<p>The system will support the renting of different automobiles like cars, trucks, SUVs, vans, and motorcycles.</p>\n</li>\n<li>\n<p>Each vehicle should be added with a unique barcode and other details, including a parking stall number which helps to locate the vehicle.</p>\n</li>\n<li>\n<p>The system should be able to retrieve information like which member took a particular vehicle or what vehicles have been rented out by a specific member.</p>\n</li>\n<li>\n<p>The system should collect a late-fee for vehicles returned after the due date.</p>\n</li>\n<li>\n<p>Members should be able to search the vehicle inventory and reserve any available vehicle.</p>\n</li>\n<li>\n<p>The system should be able to send notifications whenever the reservation is approaching the pick-up date, as well as when the vehicle is nearing the due date or has not been returned within the due date.</p>\n</li>\n<li>\n<p>The system will be able to read barcodes from vehicles.</p>\n</li>\n<li>\n<p>Members should be able to cancel their reservations.</p>\n</li>\n<li>\n<p>The system should maintain a vehicle log to track all events related to the vehicles.</p>\n</li>\n<li>\n<p>Members can add rental insurance to their reservation.</p>\n</li>\n<li>\n<p>Members can rent additional equipment, like navigation, child seat, ski rack, etc.</p>\n</li>\n<li>\n<p>Members can add additional services to their reservation, such as roadside assistance, additional driver, wifi, etc.</p>\n</li>\n</ol>\n<h2>Use case diagram</h2>\n<p>We have four main Actors in our system:</p>\n<ul>\n<li><strong>Receptionist:</strong> Mainly responsible for adding and modifying vehicles and workers. Receptionists can also reserve vehicles.</li>\n<li><strong>Member:</strong> All members can search the catalog, as well as reserve, pick-up, and return a vehicle.</li>\n<li><strong>System:</strong> Mainly responsible for sending notifications about overdue vehicles, canceled reservation, etc.</li>\n<li><strong>Worker:</strong> Mainly responsible for taking care of a returned vehicle and updating the vehicle log.</li>\n</ul>\n<p>Here are the top use cases of the Car Rental System:</p>\n<ul>\n<li><strong>Add/Remove/Edit vehicle:</strong> To add, remove or modify a vehicle.</li>\n<li><strong>Search catalog:</strong> To search for vehicles by type and availability.</li>\n<li><strong>Register new account/Cancel membership:</strong> To add a new member or cancel an existing membership.</li>\n<li><strong>Reserve vehicle:</strong> To reserve a vehicle.</li>\n<li><strong>Check-out vehicle:</strong> To rent a vehicle.</li>\n<li><strong>Return a vehicle:</strong> To return a vehicle which was checked-out to a member.</li>\n<li><strong>Add equipment:</strong> To add an equipment to a reservation like navigation, child seat, etc.</li>\n<li><strong>Update car log:</strong> To add or update a car log entry, such as refueling, cleaning, damage, etc.</li>\n</ul>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "168f3f66-247b-4425-b6c9-b9e79eb36a47"
                            },
                            "hash": "3",
                            "iteration": 2,
                            "saveVersion": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5710999223009280,
                                "style": "original",
                                "caption": "Use case diagram",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 847,
                                    "height": 1041,
                                    "sizeInBytes": 53954,
                                    "name": "usecase(13).svg"
                                },
                                "comp_id": "a5cb92f7-2d2d-4440-a44e-69ebc8ad155c"
                            },
                            "hash": "4",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## Class diagram\n\nHere are the main classes of our Car Rental System:\n\n* **CarRentalSystem:** The main part of the organization for which this software has been designed.\n\n* **CarRentalLocation:** The car rental system will have multiple locations, each location will have attributes like 'Name' to distinguish it from any other locations and 'Address' which defines the address of the rental location.\n\n* **Vehicle:** The basic building block of the system. Every vehicle will have a barcode, license plate number, passenger capacity, model, make,  mileage, etc. Vehicles can be of multiple types, like car, truck, SUV, etc.\n\n* **Account:** Mainly, we will have two types of accounts in the system, one will be a general member and the other will be a receptionist. Another account can be of the worker taking care of the returned vehicle.\n\n* **VehicleReservation:** This class will be responsible for managing reservations for a vehicle.\n\n* **Notification:** Will take care of sending notifications to members.\n\n* **VehicleLog:** To keep track of all the events related to a vehicle.\n\n* **RentalInsurance:** Stores details about the various rental insurances that members can add to their reservation.\n\n* **Equipment:** Stores details about the various types of equipment that members can add to their reservation.\n\n* **Service:** Stores details about the various types of service that members can add to their reservation, such as additional drivers, roadside assistance, etc.\n\n* **Bill:** Contains different bill-items for every charge for the reservation.",
                                "mdHtml": "<h2>Class diagram</h2>\n<p>Here are the main classes of our Car Rental System:</p>\n<ul>\n<li>\n<p><strong>CarRentalSystem:</strong> The main part of the organization for which this software has been designed.</p>\n</li>\n<li>\n<p><strong>CarRentalLocation:</strong> The car rental system will have multiple locations, each location will have attributes like \u2018Name\u2019 to distinguish it from any other locations and \u2018Address\u2019 which defines the address of the rental location.</p>\n</li>\n<li>\n<p><strong>Vehicle:</strong> The basic building block of the system. Every vehicle will have a barcode, license plate number, passenger capacity, model, make,  mileage, etc. Vehicles can be of multiple types, like car, truck, SUV, etc.</p>\n</li>\n<li>\n<p><strong>Account:</strong> Mainly, we will have two types of accounts in the system, one will be a general member and the other will be a receptionist. Another account can be of the worker taking care of the returned vehicle.</p>\n</li>\n<li>\n<p><strong>VehicleReservation:</strong> This class will be responsible for managing reservations for a vehicle.</p>\n</li>\n<li>\n<p><strong>Notification:</strong> Will take care of sending notifications to members.</p>\n</li>\n<li>\n<p><strong>VehicleLog:</strong> To keep track of all the events related to a vehicle.</p>\n</li>\n<li>\n<p><strong>RentalInsurance:</strong> Stores details about the various rental insurances that members can add to their reservation.</p>\n</li>\n<li>\n<p><strong>Equipment:</strong> Stores details about the various types of equipment that members can add to their reservation.</p>\n</li>\n<li>\n<p><strong>Service:</strong> Stores details about the various types of service that members can add to their reservation, such as additional drivers, roadside assistance, etc.</p>\n</li>\n<li>\n<p><strong>Bill:</strong> Contains different bill-items for every charge for the reservation.</p>\n</li>\n</ul>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "8a6e4f56-db96-4fe6-b152-0deb24e7cfb1"
                            },
                            "hash": "5",
                            "iteration": 2,
                            "saveVersion": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 6286507130224640,
                                "style": "original",
                                "caption": "Class diagram",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 1153,
                                    "height": 1300,
                                    "sizeInBytes": 369325,
                                    "name": "Class Diagram (15).png"
                                },
                                "comp_id": "2fb99482-0989-46d5-b07b-5252bd631260"
                            },
                            "hash": "6",
                            "iteration": 0
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5475821437321216,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 571,
                                    "height": 511,
                                    "sizeInBytes": 25589,
                                    "name": "uml cheat sheet (1).svg"
                                },
                                "comp_id": "ddd4fe76-e9f7-4d6f-b2fa-7cb82a776de4"
                            },
                            "hash": "7",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## Activity diagrams\n\n**Pick up a vehicle:** Any member can perform this activity. Here are the steps to pick up a vehicle:",
                                "mdHtml": "<h2>Activity diagrams</h2>\n<p><strong>Pick up a vehicle:</strong> Any member can perform this activity. Here are the steps to pick up a vehicle:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "4b1ec8b9-e16e-4754-997d-abba406ea370"
                            },
                            "hash": "8",
                            "iteration": 2,
                            "saveVersion": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 6204155957870592,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 488,
                                    "height": 670,
                                    "sizeInBytes": 14259,
                                    "name": "Pickup vehicle - Activity Diagram(1).svg"
                                },
                                "comp_id": "121d1695-a46f-48c6-a03e-aba5aa9dc322"
                            },
                            "hash": "9",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Return a vehicle:** Any worker can perform this activity. While returning a vehicle, the system must collect a late fee from the member if the return date is after the due date. Here are the steps for returning a vehicle:",
                                "mdHtml": "<p><strong>Return a vehicle:</strong> Any worker can perform this activity. While returning a vehicle, the system must collect a late fee from the member if the return date is after the due date. Here are the steps for returning a vehicle:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "ae803ac9-8d7a-4f8d-8415-6c72745c5405"
                            },
                            "hash": "10",
                            "iteration": 0
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5080845647872000,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 383,
                                    "height": 1089,
                                    "sizeInBytes": 29449,
                                    "name": "Return vehicle - Activity Diagram(2).svg"
                                },
                                "comp_id": "0cc75493-e2fa-43aa-9fba-10c1b7d7afb6"
                            },
                            "hash": "11",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## Code\n\nHere is the high-level definition for the classes described above.\n\n**Enums, data types and constants:** Here are the required enums, data types, and constants:",
                                "mdHtml": "<h2>Code</h2>\n<p>Here is the high-level definition for the classes described above.</p>\n<p><strong>Enums, data types and constants:</strong> Here are the required enums, data types, and constants:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "0d6dc2fa-5dc7-4eec-8ff7-f03f1566cfa8"
                            },
                            "hash": "12",
                            "iteration": 2,
                            "saveVersion": 1
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public enum BillItemType {\n  BASE_CHARGE, ADDITIONAL_SERVICE, FINE, OTHER\n}\n\npublic enum VehicleLogType {\n  ACCIDENT, FUELING, CLEANING_SERVICE, OIL_CHANGE, REPAIR, OTHER\n}\n\npublic enum VanType {\n  PASSENGER, CARGO\n}\n\npublic enum CarType {\n  ECONOMY, COMPACT, INTERMEDIATE, STANDARD, FULL_SIZE, PREMIUM, LUXURY\n}\n\npublic enum VehicleStatus {\n  AVAILABLE, RESERVED, LOANED, LOST, BEING_SERVICED, OTHER\n}\n\npublic enum ReservationStatus {\n  ACTIVE, PENDING, CONFIRMED, COMPLETED, CANCELLED, NONE\n}\n\npublic enum AccountStatus {\n  ACTIVE, CLOSED, CANCELED, BLACKLISTED, BLOCKED\n}\n\npublic enum PaymentStatus {\n  UNPAID, PENDING, COMPLETED, FILLED, DECLINED, CANCELLED, ABANDONED, SETTLING, SETTLED, REFUNDED\n}\n\npublic class Address {\n  private String streetAddress;\n  private String city;\n  private String state;\n  private String zipCode;\n  private String country;\n}\n\npublic class Person {\n  private String name;\n  private Address address;\n  private String email;\n  private String phone;\n}",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class BillItemType(Enum):\n  BASE_CHARGE, ADDITIONAL_SERVICE, FINE, OTHER = 1, 2, 3, 4\n\n\nclass VehicleLogType(Enum):\n  ACCIDENT, FUELING, CLEANING_SERVICE, OIL_CHANGE, REPAIR, OTHER = 1, 2, 3, 4, 5, 6\n\n\nclass VanType(Enum):\n  PASSENGER, CARGO = 1, 2\n\n\nclass CarType(Enum):\n  ECONOMY, COMPACT, INTERMEDIATE, STANDARD, FULL_SIZE, PREMIUM, LUXURY = 1, 2, 3, 4, 5, 6, 7\n\n\nclass VehicleStatus(Enum):\n  AVAILABLE, RESERVED, LOANED, LOST, BEING_SERVICED, OTHER = 1, 2, 3, 4, 5, 6\n\n\nclass ReservationStatus(Enum):\n  ACTIVE, PENDING, CONFIRMED, COMPLETED, CANCELLED, NONE = 1, 2, 3, 4, 5, 6\n\n\nclass AccountStatus(Enum):\n  ACTIVE, CLOSED, CANCELED, BLACKLISTED, BLOCKED = 1, 2, 3, 4, 5\n\n\nclass PaymentStatus(Enum):\n  UNPAID, PENDING, COMPLETED, FILLED, DECLINED, CANCELLED, ABANDONED, SETTLING, SETTLED, REFUNDED = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n\n\nclass Address:\n  def __init__(self, street, city, state, zip_code, country):\n    self.__street_address = street\n    self.__city = city\n    self.__state = state\n    self.__zip_code = zip_code\n    self.__country = country\n\n\nclass Person():\n  def __init__(self, name, address, email, phone):\n    self.__name = name\n    self.__address = address\n    self.__email = email\n    self.__phone = phone\n",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "233dbdfa-0f38-49c3-9c04-77ab5ca682d9"
                            },
                            "hash": "22",
                            "iteration": 2
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Account, Member, Receptionist, and Additional Driver:** These classes represent different people that interact with our system:",
                                "mdHtml": "<p><strong>Account, Member, Receptionist, and Additional Driver:</strong> These classes represent different people that interact with our system:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "057212dc-ea7d-44f1-aa7d-df61d1c08706"
                            },
                            "hash": "14",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "// For simplicity, we are not defining getter and setter functions. The reader can\n// assume that all class attributes are private and accessed through their respective\n// public getter method and modified only through their public setter method.\n\npublic abstract class Account {\n  private String id;\n  private String password;\n  private AccountStatus status;\n  private Person person;\n\n  public boolean resetPassword();\n}\n\npublic class Member extends Account {\n  private int totalVehiclesReserved;\n\n  public List<VehicleReservation> getReservations();\n}\n\npublic class Receptionist extends Account {\n  private Date dateJoined;\n\n  public List<Member> searchMember(String name);\n}\n\npublic class AdditionalDriver {\n  private String driverID;\n  private Person person;\n}\n",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "# For simplicity, we are not defining getter and setter functions. The reader can\n# assume that all class attributes are private and accessed through their respective\n# public getter methods and modified only through their public methods function.\n\nfrom abc import ABC, abstractmethod\n\nclass Account(ABC):\n  def __init__(self, id, password, person, status=AccountStatus.NONE):\n    self.__id = id\n    self.__password = password\n    self.__status = AccountStatus.NONE\n    self.__person = person\n\n  def reset_password(self):\n    None\n\n\nclass Member(Account):\n  def __init__(self):\n    self.__total_vehicles_reserved = 0\n\n  def get_reservations(self):\n    None\n\n\nclass Receptionist(Account):\n  def __init__(self, date_joined):\n    self.__date_joined = date_joined\n\n  def search_member(self, name):\n    None\n\n\nclass AdditionalDriver:\n  def __init__(self, id, person):\n    self.__driver_id = id\n    self.__person = person",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "50645a55-9198-4376-a681-5a58e05a804a"
                            },
                            "hash": "23",
                            "iteration": 2
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**CarRentalSystem and CarRentalLocation:** These classes represent the top level classes:",
                                "mdHtml": "<p><strong>CarRentalSystem and CarRentalLocation:</strong> These classes represent the top level classes:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "1758ce4a-8143-4cca-b5e2-ecb6d9c64066"
                            },
                            "hash": "16",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public class CarRentalLocation {\n  private String name;\n  private Address location;\n\n  public Address getLocation();\n}\n\npublic class CarRentalSystem {\n  private String name;\n  private List<CarRentalLocation> locations;\n\n  public boolean addNewLocation(CarRentalLocation location);\n}\n",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class CarRentalLocation:\n  def __init__(self, name, address):\n    self.__name = name\n    self.__location = address\n\n  def get_location(self):\n    return self.__location\n\n\nclass CarRentalSystem:\n  def __init__(self, name):\n    self.__name = name\n    self.__locations = []\n\n  def add_new_location(self, location):\n    None",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "0d8eba5a-6233-44b0-a5ad-bb13e461cea8"
                            },
                            "hash": "24",
                            "iteration": 2
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Vehicle, VehicleLog, and VehicleReservation:** To encapsulate a vehicle, log, and reservation. The VehicleReservation class will be responsible for processing the reservation and return of a vehicle:",
                                "mdHtml": "<p><strong>Vehicle, VehicleLog, and VehicleReservation:</strong> To encapsulate a vehicle, log, and reservation. The VehicleReservation class will be responsible for processing the reservation and return of a vehicle:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "08a4422d-7f7a-41b7-abbf-5b6b6c828e1b"
                            },
                            "hash": "18",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public abstract class Vehicle {\n  private String licenseNumber;\n  private String stockNumber;\n  private int passengerCapacity;\n  private String barcode;\n  private boolean hasSunroof;\n  private VehicleStatus status;\n  private String model;\n  private String make;\n  private int manufacturingYear;\n  private int mileage;\n\n  private List<VehicleLog> log;\n\n  public boolean reserveVehicle();\n\n  public boolean returnVehicle();\n}\n\npublic class Car extends Vehicle {\n  private CarType type;\n}\n\npublic class Van extends Vehicle {\n  private VanType type;\n}\n\npublic class Truck extends Vehicle {\n  private String type;\n}\n\n// We can have similar definition for other vehicle types\n\n//...\n\npublic class VehicleLog {\n  private String id;\n  private VehicleLogType type;\n  private String description;\n  private Date creationDate;\n\n  public bool update();\n\n  public List<VehicleLogType> searchByLogType(VehicleLogType type);\n}\n\npublic class VehicleReservation {\n  private String reservationNumber;\n  private Date creationDate;\n  private ReservationStatus status;\n  private Date dueDate;\n  private Date returnDate;\n  private String pickupLocationName;\n  private String returnLocationName;\n\n  private int customerID;\n  private Vehicle vehicle;\n  private Bill bill;\n  private List<AdditionalDriver> additionalDrivers;\n  private List<Notification> notifications;\n  private List<RentalInsurance> insurances;\n  private List<Equipment> equipments;\n  private List<Service> services;\n\n  public static VehicleReservation fetchReservationDetails(String reservationNumber);\n\n  public List<Passenger> getAdditionalDrivers();\n}",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "from abc import ABC, abstractmethod\n\nclass Vehicle(ABC):\n  def __init__(self, license_num, stock_num, capacity, barcode, has_sunroof, status, model, make, manufacturing_year, mileage):\n    self.__license_number = license_num\n    self.__stock_number = stock_num\n    self.__passenger_capacity = capacity\n    self.__barcode = barcode\n    self.__has_sunroof = has_sunroof\n    self.__status = status\n    self.__model = model\n    self.__make = make\n    self.__manufacturing_year = manufacturing_year\n    self.__mileage = mileage\n    self.__log = []\n\n  def reserve_vehicle(self):\n    None\n\n  def return_vehicle(self):\n    None\n\n\nclass Car(Vehicle):\n  def __init__(self, license_num, stock_num, capacity, barcode, has_sunroof, status, model, make, manufacturing_year, mileage, type):\n    super().__init__(license_num, stock_num, capacity, barcode,\n                     has_sunroof, status, model, make, manufacturing_year, mileage)\n    self.__type = type\n\n\nclass Van(Vehicle):\n  def __init__(self, license_num, stock_num, capacity, barcode, has_sunroof, status, model, make, manufacturing_year, mileage, type):\n    super().__init__(license_num, stock_num, capacity, barcode,\n                     has_sunroof, status, model, make, manufacturing_year, mileage)\n    self.__type = type\n\n\nclass Truck(Vehicle):\n  def __init__(self, license_num, stock_num, capacity, barcode, has_sunroof, status, model, make, manufacturing_year, mileage, type):\n    super().__init__(license_num, stock_num, capacity, barcode,\n                     has_sunroof, status, model, make, manufacturing_year, mileage)\n    self.__type = type\n\n\n# We can have similar definition for other vehicle types\n\n# ...\n\nclass VehicleLog:\n  def __init__(self, id, type, description, creation_date):\n    self.__id = id\n    self.__type = type\n    self.__description = description\n    self.__creation_date = creation_date\n\n  def update(self):\n    None\n\n  def search_by_log_type(self, type):\n    None\n\n\nclass VehicleReservation:\n  def __init__(self, reservation_number):\n    self.__reservation_number = reservation_number\n    self.__creation_date = datetime.date.today()\n    self.__status = ReservationStatus.ACTIVE\n    self.__due_date = datetime.date.today()\n    self.__return_date = datetime.date.today()\n    self.__pickup_location_name = \"\"\n    self.__return_location_name = \"\"\n\n    self.__customer_id = 0\n    self.__vehicle = None\n    self.__bill = None\n    self.__additional_drivers = []\n    self.__notifications = []\n    self.__insurances = []\n    self.__equipments = []\n    self.__services = []\n\n  def fetch_reservation_details(self, reservation_number):\n    None\n\n  def get_additional_drivers(self):\n    return self.__additional_drivers",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "8d165555-01c1-4c82-8136-bb097ae122de"
                            },
                            "hash": "25",
                            "iteration": 2
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**VehicleInventory and Search:** VehicleInventory will implement an interface 'Search' to facilitate the searching of vehicles:",
                                "mdHtml": "<p><strong>VehicleInventory and Search:</strong> VehicleInventory will implement an interface \u2018Search\u2019 to facilitate the searching of vehicles:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "db86a4a4-231d-4954-8fba-1dd13275dbf9"
                            },
                            "hash": "20",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "edit",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public interface Search {\n  public List<Vehicle> searchByType(String type);\n  public List<Vehicle> searchByModel(String model);\n}\n\npublic class VehicleInventory implements Search {\n  private HashMap<String, List<Vehicle>> vehicleTypes;\n  private HashMap<String, List<Vehicle>> vehicleModels;\n\n  public List<Vehicle> searchByType(String query) {\n    // return all vehicles of the given type.\n    return vehicleTypes.get(query);\n  }\n\n  public List<Vehicle> searchByModel(String query) {\n    // return all vehicles of the given model.\n    return vehicleModels.get(query);\n  }\n}\n",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "from abc import ABC, abstractmethod\n\nclass Search(ABC):\n  def search_by_type(self, type):\n    None\n\n  def search_by_model(self, model):\n    None\n\n\nclass VehicleInventory(Search):\n  def __init__(self):\n    self.__vehicle_types = {}\n    self.__vehicle_models = {}\n\n  def search_by_type(self, query):\n    # return all vehicles of the given type.\n    return self.__vehicle_types.get(query)\n\n  def search_by_model(self, query):\n    # return all vehicles of the given model.\n    return self.__vehicle_models.get(query)\n",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "5d341e2b-8170-4bc6-82ca-9959192e80d9"
                            },
                            "hash": "26",
                            "iteration": 2
                        }
                    ],
                    "summary": {
                        "title": "Design a Car Rental System",
                        "description": "Let's design a car rental system where customers can rent vehicles.",
                        "titleUpdated": true
                    }
                },
                {
                    "components": [
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "LinkedIn is a social network for professionals. The main goal of the site is to enable its members to connect with people they know and trust professionally, as well as to find new opportunities to grow their careers.\n\nA LinkedIn member\u2019s profile page, which emphasizes their skills, employment history, and education, has professional network news feeds with customizable modules. \n\nLinkedIn is very similar to Facebook in terms of its layout and design. These features are more specialized because they cater to professionals, but in general, if you know how to use Facebook or any other similar social network, LinkedIn is somewhat comparable.",
                                "mdHtml": "<p>LinkedIn is a social network for professionals. The main goal of the site is to enable its members to connect with people they know and trust professionally, as well as to find new opportunities to grow their careers.</p>\n<p>A LinkedIn member\u2019s profile page, which emphasizes their skills, employment history, and education, has professional network news feeds with customizable modules.</p>\n<p>LinkedIn is very similar to Facebook in terms of its layout and design. These features are more specialized because they cater to professionals, but in general, if you know how to use Facebook or any other similar social network, LinkedIn is somewhat comparable.</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "09903eea-97f4-4743-b407-ec11ed1fcbae"
                            },
                            "hash": "1",
                            "iteration": 1,
                            "saveVersion": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5749423074181120,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 640,
                                    "height": 320,
                                    "sizeInBytes": 18897,
                                    "name": "LinkedIn.png"
                                },
                                "comp_id": "cbc32d7c-1486-449a-ac94-0141195677fc"
                            },
                            "hash": "2",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## System Requirements\n\nWe will focus on the following set of requirements while designing LinkedIn:\n\n1. Each member should be able to add information about their basic profile, experiences, education, skills, and accomplishments.\n\n2. Any user of our system should be able to search for other members or companies by their name.\n\n3. Members should be able to send or accept connection requests from other members.\n\n4. Any member will be able to request a recommendation from other members.\n\n5. The system should be able to show basic stats about a profile, like the number of profile views, the total number of connections, and the total number of search appearances of the profile.\n\n6. Members should be able to create new posts to share with their connections.\n\n7. Members should be able to add comments to posts, as well as like or share a post or comment.\n\n8. Any member should be able to send messages to other members.\n\n9. The system should send a notification to a member whenever there is a new message, connection invitation or a comment on their post.\n\n10. Members will be able to create a page for a Company and add job postings.\n\n11. Members should be able to create groups and join any group they like.\n\n12. Members should be able to follow other members or companies.\n\n## Use case diagram\n\nWe have three main Actors in our system:\n\n* **Member:** All members can search for other members, companies or jobs, as well as send requests for connection, create posts, etc.\n* **Admin:** Mainly responsible for admin functions such as blocking and unblocking a member, etc.\n* **System:** Mainly responsible for sending notifications for new messages, connections invites, etc.\n\nHere are the top use cases of our system:\n\n* **Add/update profile:** Any member should be able to create their profile to reflect their experiences, education, skills, and accomplishments.\n* **Search:** Members can search other members, companies or jobs. Members can send a connection request to other members.\n* **Follow or Unfollow member or company:** Any member can follow or unfollow any other member or a company.\n* **Send message:** Any member can send a message to any of their connections.\n* **Create post:** Any member can create a post to share with their connections, as well as like other posts or add comments to any post.\n* **Send notifications:** The system will be able to send notifications for new messages, connection invites, etc.",
                                "mdHtml": "<h2>System Requirements</h2>\n<p>We will focus on the following set of requirements while designing LinkedIn:</p>\n<ol>\n<li>\n<p>Each member should be able to add information about their basic profile, experiences, education, skills, and accomplishments.</p>\n</li>\n<li>\n<p>Any user of our system should be able to search for other members or companies by their name.</p>\n</li>\n<li>\n<p>Members should be able to send or accept connection requests from other members.</p>\n</li>\n<li>\n<p>Any member will be able to request a recommendation from other members.</p>\n</li>\n<li>\n<p>The system should be able to show basic stats about a profile, like the number of profile views, the total number of connections, and the total number of search appearances of the profile.</p>\n</li>\n<li>\n<p>Members should be able to create new posts to share with their connections.</p>\n</li>\n<li>\n<p>Members should be able to add comments to posts, as well as like or share a post or comment.</p>\n</li>\n<li>\n<p>Any member should be able to send messages to other members.</p>\n</li>\n<li>\n<p>The system should send a notification to a member whenever there is a new message, connection invitation or a comment on their post.</p>\n</li>\n<li>\n<p>Members will be able to create a page for a Company and add job postings.</p>\n</li>\n<li>\n<p>Members should be able to create groups and join any group they like.</p>\n</li>\n<li>\n<p>Members should be able to follow other members or companies.</p>\n</li>\n</ol>\n<h2>Use case diagram</h2>\n<p>We have three main Actors in our system:</p>\n<ul>\n<li><strong>Member:</strong> All members can search for other members, companies or jobs, as well as send requests for connection, create posts, etc.</li>\n<li><strong>Admin:</strong> Mainly responsible for admin functions such as blocking and unblocking a member, etc.</li>\n<li><strong>System:</strong> Mainly responsible for sending notifications for new messages, connections invites, etc.</li>\n</ul>\n<p>Here are the top use cases of our system:</p>\n<ul>\n<li><strong>Add/update profile:</strong> Any member should be able to create their profile to reflect their experiences, education, skills, and accomplishments.</li>\n<li><strong>Search:</strong> Members can search other members, companies or jobs. Members can send a connection request to other members.</li>\n<li><strong>Follow or Unfollow member or company:</strong> Any member can follow or unfollow any other member or a company.</li>\n<li><strong>Send message:</strong> Any member can send a message to any of their connections.</li>\n<li><strong>Create post:</strong> Any member can create a post to share with their connections, as well as like other posts or add comments to any post.</li>\n<li><strong>Send notifications:</strong> The system will be able to send notifications for new messages, connection invites, etc.</li>\n</ul>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "8707c5ce-6f18-4d6a-b9d8-39e6c2a3def1"
                            },
                            "hash": "3",
                            "iteration": 2,
                            "saveVersion": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5203802240057344,
                                "style": "original",
                                "caption": "Use case diagram",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 834,
                                    "height": 1044,
                                    "sizeInBytes": 47921,
                                    "name": "usecase(8).svg"
                                },
                                "comp_id": "c35b5f99-77b8-4286-b508-dbae97205c1b"
                            },
                            "hash": "4",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## Class diagram\n\nHere are the main classes of the LinkedIn system:\n\n* **Member:**  This will be the main component of our system. Each member will have a profile which includes their Experiences, Education, Skills, Accomplishments, and Recommendations. Members will be connected to other members and they can follow companies and members. Members will also have suggestions to make connections with other members.\n\n* **Search:** Our system will support searching for other members and companies by their names, and jobs by their titles.\n\n* **Message:** Members can send messages to other members with text and media.\n\n* **Post:** Members can create posts containing text and media. \n\n* **Comment:** Members can add comments to posts as well as like them.\n\n* **Group:** Members can create and join groups.\n\n* **Company:** Company will store all the information about a company's page.\n\n* **JobPosting:** Companies can create a job posting. This class will handle all information about a job.\n\n* **Notification:** Will take care of sending notifications to members.",
                                "mdHtml": "<h2>Class diagram</h2>\n<p>Here are the main classes of the LinkedIn system:</p>\n<ul>\n<li>\n<p><strong>Member:</strong>  This will be the main component of our system. Each member will have a profile which includes their Experiences, Education, Skills, Accomplishments, and Recommendations. Members will be connected to other members and they can follow companies and members. Members will also have suggestions to make connections with other members.</p>\n</li>\n<li>\n<p><strong>Search:</strong> Our system will support searching for other members and companies by their names, and jobs by their titles.</p>\n</li>\n<li>\n<p><strong>Message:</strong> Members can send messages to other members with text and media.</p>\n</li>\n<li>\n<p><strong>Post:</strong> Members can create posts containing text and media.</p>\n</li>\n<li>\n<p><strong>Comment:</strong> Members can add comments to posts as well as like them.</p>\n</li>\n<li>\n<p><strong>Group:</strong> Members can create and join groups.</p>\n</li>\n<li>\n<p><strong>Company:</strong> Company will store all the information about a company\u2019s page.</p>\n</li>\n<li>\n<p><strong>JobPosting:</strong> Companies can create a job posting. This class will handle all information about a job.</p>\n</li>\n<li>\n<p><strong>Notification:</strong> Will take care of sending notifications to members.</p>\n</li>\n</ul>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "303d2d7c-0320-4137-a7ad-bf3a4daf2f21"
                            },
                            "hash": "5",
                            "iteration": 2,
                            "saveVersion": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 4678248023719936,
                                "style": "original",
                                "caption": "Class diagram",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 1206,
                                    "height": 1120,
                                    "sizeInBytes": 283451,
                                    "name": "Class Diagram (16).png"
                                },
                                "comp_id": "79eaf44c-b088-42b4-9404-f65fa07091c1"
                            },
                            "hash": "6",
                            "iteration": 0
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 6027476264288256,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 571,
                                    "height": 511,
                                    "sizeInBytes": 25589,
                                    "name": "uml cheat sheet (1).svg"
                                },
                                "comp_id": "534541a6-ea23-4f8a-9454-1fd814f348bc"
                            },
                            "hash": "7",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## Activity diagrams\n\n**Add experience to profile:** Any LinkedIn member can perform this activity. Here are the steps to add experience to a member profile:",
                                "mdHtml": "<h2>Activity diagrams</h2>\n<p><strong>Add experience to profile:</strong> Any LinkedIn member can perform this activity. Here are the steps to add experience to a member profile:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "f5c923fc-947f-4839-9681-40adabd814d9"
                            },
                            "hash": "8",
                            "iteration": 2,
                            "saveVersion": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5633951804686336,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 597,
                                    "height": 869,
                                    "sizeInBytes": 22353,
                                    "name": "Add experience - Activity Diagram.svg"
                                },
                                "comp_id": "e7cb8145-be4f-4191-85b1-833c6ac18e7f"
                            },
                            "hash": "9",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Send message:** Any Member can perform this activity. After sending a message, the system needs to send a notification to all the requested members. Here are the steps for sending a message:",
                                "mdHtml": "<p><strong>Send message:</strong> Any Member can perform this activity. After sending a message, the system needs to send a notification to all the requested members. Here are the steps for sending a message:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "b0684f29-abb3-48d3-b78a-9e752fadcece"
                            },
                            "hash": "10",
                            "iteration": 0
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5700609697120256,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 559,
                                    "height": 954,
                                    "sizeInBytes": 23998,
                                    "name": "Send message - Activity Diagram.svg"
                                },
                                "comp_id": "86272f05-461a-4333-a660-5c95dc54a95c"
                            },
                            "hash": "11",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## Code\n\nHere is the high-level definition for the classes described above:\n\n**Enums, data types, and constants:** Here are the required enums, data types, and constants:",
                                "mdHtml": "<h2>Code</h2>\n<p>Here is the high-level definition for the classes described above:</p>\n<p><strong>Enums, data types, and constants:</strong> Here are the required enums, data types, and constants:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "736799b2-70af-415d-87e5-07d52f9148cf"
                            },
                            "hash": "12",
                            "iteration": 2,
                            "saveVersion": 1
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public enum ConnectionInvitationStatus {\n  PENDING, ACCEPTED, CONFIRMED, REJECTED, CANCELED\n}\n\npublic enum AccountStatus {\n  ACTIVE, BLOCKED, BANNED, COMPROMISED, ARCHIVED, UNKNOWN\n}\n\npublic class Address {\n  private String streetAddress;\n  private String city;\n  private String state;\n  private String zipCode;\n  private String country;\n}",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class ConnectionInvitationStatus(Enum):\n  PENDING, ACCEPTED, CONFIRMED, REJECTED, CANCELED = 1, 2, 3, 4, 5\n\n\nclass AccountStatus(Enum):\n  ACTIVE, BLOCKED, BANNED, COMPROMISED, ARCHIVED, UNKNOWN = 1, 2, 3, 4, 5, 6\n\n\nclass Address:\n  def __init__(self, street, city, state, zip_code, country):\n    self.__street_address = street\n    self.__city = city\n    self.__state = state\n    self.__zip_code = zip_code\n    self.__country = country\n",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "11a9d517-dab7-468f-9011-e1805680e40f"
                            },
                            "hash": "24",
                            "iteration": 2
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Account, Person, Member, and Admin:** These classes represent the different people that interact with our system:",
                                "mdHtml": "<p><strong>Account, Person, Member, and Admin:</strong> These classes represent the different people that interact with our system:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "d84526d6-a64f-4f59-b3b2-d74505d5ae86"
                            },
                            "hash": "14",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "// For simplicity, we are not defining getter and setter functions. The reader can\n// assume that all class attributes are private and accessed through their respective\n// public getter method and modified only through their public setter method.\n\npublic class Account {\n  private String id;\n  private String password;\n  private AccountStatus status;\n\n  public boolean resetPassword();\n}\n\npublic abstract class Person {\n  private String name;\n  private Address address;\n  private String email;\n  private String phone;\n\n  private Account account;\n}\n\npublic class Member extends Person {\n  private Date dateOfMembership;\n  private String headline;\n  private byte[] photo;\n  private List<Member> memberSuggestions;\n  private List<Member> memberFollows;\n  private List<Member> memberConnections;\n  private List<Company> companyFollows;\n  private List<Group> groupFollows;\n  private Profile profile;\n\n  public boolean sendMessage(Message message);\n  public boolean createPost(Post post);\n  public boolean sendConnectionInvitation(ConnectionInvitation invitation);\n}\n\npublic class Admin extends Person {\n  public boolean blockUser(Customer customer);\n  public boolean unblockUser(Customer customer);\n}\n",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "# For simplicity, we are not defining getter and setter functions. The reader can\n# assume that all class attributes are private and accessed through their respective\n# public getter methods and modified only through their public methods function.\n\n\nclass Account:\n  def __init__(self, id, password, status=AccountStatus.Active):\n    self.__id = id\n    self.__password = password\n    self.__status = status\n\n  def reset_password(self):\n    None\n\n\nclass Person(ABC):\n  def __init__(self, name, address, email, phone, account):\n    self.__name = name\n    self.__address = address\n    self.__email = email\n    self.__phone = phone\n    self.__account = account\n\n\nclass Member(Person):\n  def __init__(self):\n    self.__date_of_membership = datetime.date.today()\n    self.__headline = \"\"\n    self.__photo = []\n    self.__member_suggestions = []\n    self.__member_follows = []\n    self.__member_connections = []\n    self.__company_follows = []\n    self.__group_follows = []\n    self.__profile = Profile()\n\n  def send_message(self, message):\n    None\n\n  def create_post(self, post):\n    None\n\n  def send_connection_invitation(self, connection_invitation):\n    None\n\n\nclass Admin(Person):\n  def block_user(self, customer):\n    None\n\n  def unblock_user(self, customer):\n    None\n",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "000a76e4-0eab-4dc0-9601-5824b56c7dca"
                            },
                            "hash": "25",
                            "iteration": 2
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "\n**Profile, Experience, etc:** A member's profile will have their job experiences, educations, skills, etc:\n",
                                "mdHtml": "<p><strong>Profile, Experience, etc:</strong> A member\u2019s profile will have their job experiences, educations, skills, etc:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "772687f5-60e4-426b-b08f-e2f5254c84e5"
                            },
                            "hash": "16",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public class Profile {\n  private String summary;\n  private List<Experience> experiences;\n  private List<Education> educations;\n  private List<Skill> skills;\n  private List<Accomplishment> accomplishments;\n  private List<Recommendation> recommendations;\n  private List<Stat> stats;\n\n  public boolean addExperience(Experience experience);\n  public boolean addEducation(Education education);\n  public boolean addSkill(Skill skill);\n  public boolean addAccomplishment(Accomplishment accomplishment);\n  public boolean addRecommendation(Recommendation recommendation);\n}\n\npublic class Experience {\n  private String title;\n  private String company;\n  private String location;\n  private Date from;\n  private Date to;\n  private String description;\n}",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class Profile:\n  def __init__(self, summary, experiences, educations, skills, accomplishments, recommendations):\n    self.__summary = summary\n    self.__experiences = experiences\n    self.__educations = educations\n    self.__skills = skills\n    self.__accomplishments = accomplishments\n    self.__recommendations = recommendations\n    self.__stats = []\n\n  def add_experience(self, experience):\n    None\n\n  def add_education(self, education):\n    None\n\n  def add_skill(self, skill):\n    None\n\n  def add_accomplishment(self, accomplishment):\n    None\n\n  def add_recommendation(self, recommendation):\n    None\n\n\nclass Experience:\n  def __init__(self, title, company, location, date_from, date_to, description):\n    self.__title = title\n    self.__company = company\n    self.__location = location\n    self.__from = date_from\n    self.__to = date_to\n    self.__description = description\n",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "8ac6b580-8954-4e4b-98c0-862277f9a010"
                            },
                            "hash": "26",
                            "iteration": 2
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "\n**Company and JobPosting:** Companies can have multiple job postings:\n",
                                "mdHtml": "<p><strong>Company and JobPosting:</strong> Companies can have multiple job postings:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "449d21d8-e387-4e4f-ab0e-5a36713c8b47"
                            },
                            "hash": "18",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public class Company {\n  private String name;\n  private String description;\n  private String type;\n  private int companySize;\n\n  private List<JobPosting> activeJobPostings;\n}\n\npublic class JobPosting {\n  private Date dateOfPosting;\n  private String description;\n  private String employmentType;\n  private String location;\n  private boolean isFulfilled;\n}\n",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class Company:\n  def __init__(self, name, description, type, company_size):\n    self.__name = name\n    self.__description = description\n    self.__type = type\n    self.__company_size = company_size\n\n    self.__active_job_postings = []\n\n\nclass JobPosting:\n  def __init__(self, description, employment_type, location, is_fulfilled):\n    self.__date_of_posting = datetime.date.today()\n    self.__description = description\n    self.__employment_type = employment_type\n    self.__location = location\n    self.__is_fulfilled = is_fulfilled",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "18af8a0d-b49f-457a-894f-b3ab5cb9edbf"
                            },
                            "hash": "27",
                            "iteration": 2
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "\n**Group, Post, and Message:** Members can create posts, send messages, and join groups:",
                                "mdHtml": "<p><strong>Group, Post, and Message:</strong> Members can create posts, send messages, and join groups:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "811c69e0-6402-457e-bbbc-b0821682d732"
                            },
                            "hash": "20",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public class Group {\n  private String name;\n  private String description;\n  private int totalMembers;\n  private List<Member> members;\n\n  public boolean addMember(Member member);\n\n  public boolean updateDescription(String description);\n}\n\npublic class Post {\n  private String text;\n  private int totalLikes;\n  private int totalShares;\n  private Member owner;\n}\n\npublic class Message {\n  private Member[] sentTo;\n  private String messageBody;\n  private byte[] media;\n}",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class Group:\n  def __init__(self, name, description):\n    self.__name = name\n    self.__description = description\n    self.__total_members = 0\n    self.__members = []\n\n  def add_member(self, member):\n    None\n\n  def update_description(self, description):\n    None\n\n\nclass Post:\n  def __init__(self, text, owner):\n    self.__text = text\n    self.__total_likes = 0\n    self.__total_shares = 0\n    self.__owner = owner\n\n\nclass Message:\n  def __init__(self, sent_to, message_body, media):\n    self.__sent_to = sent_to\n    self.__message_body = message_body\n    self.__media = media\n\n",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "eee609a8-933a-4c13-a62b-fd7223315726"
                            },
                            "hash": "28",
                            "iteration": 2
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "\n**Search interface and SearchIndex:** SearchIndex will implement the Search interface to facilitate searching for members, companies and job postings:\n",
                                "mdHtml": "<p><strong>Search interface and SearchIndex:</strong> SearchIndex will implement the Search interface to facilitate searching for members, companies and job postings:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "1dcc932b-03f4-46e2-84cf-1e7795874a94"
                            },
                            "hash": "22",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "edit",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public interface Search {\n  public List<Member> searchMember(String name);\n\n  public List<Company> searchCompany(String name);\n\n  public List<JobPosting> searchJob(String title);\n}\n\npublic class SearchIndex implements Search {\n  HashMap<String, List<Member>> memberNames;\n  HashMap<String, List<Company>> companyNames;\n  HashMap<String, List<JobPosting>> jobTitles;\n\n  public boolean addMember(Member member) {\n    if (memberNames.containsKey(member.getName())) {\n      memberNames.get(member.getName()).add(member);\n    } else {\n      memberNames.put(member.getName(), member);\n    }\n  }\n\n  public boolean addCompany(Company company);\n\n  public boolean addJobPosting(JobPosting jobPosting);\n\n  public List<Member> searchMember(String name) {\n    return memberNames.get(name);\n  }\n\n  public List<Company> searchCompany(String name) {\n    return companyNames.get(name);\n  }\n\n  public List<JobPosting> searchJob(String title) {\n    return jobTitles.get(title);\n  }\n}\n",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "from abc import ABC, abstractmethod\n\nclass Search:\n  def search_member(self, name):\n    None\n\n  def search_company(self, name):\n    None\n\n  def search_job(self, title):\n    None\n\n\nclass SearchIndex(Search):\n  def __init__(self):\n    self.__member_names = {}\n    self.__company_names = {}\n    self.__job_titles = {}\n\n  def add_member(self, member):\n    if member.get_name() in self.__member_names:\n      self.__member_names.get(member.get_name()).add(member)\n    else:\n      self.__member_names[member.get_name()] = member\n\n  def add_company(self, company):\n    None\n\n  def add_job_posting(self, job_posting):\n    None\n\n  def search_member(self, name):\n    return self.__member_names.get(name)\n\n  def search_company(self, name):\n    return self.__company_names.get(name)\n\n  def search_job(self, title):\n    return self.__job_titles.get(title)\n",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "08e6594d-a887-4d97-8287-031eec557a7a"
                            },
                            "hash": "29",
                            "iteration": 2
                        }
                    ],
                    "summary": {
                        "title": "Design Linkedin",
                        "description": "Let's design LinkedIn."
                    }
                },
                {
                    "components": [
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "Cricinfo is a sports news website exclusively for the game of cricket. The site features live coverage of cricket matches containing ball-by-ball commentary and a database for all the historic matches. The site also provides news and articles about cricket.",
                                "mdHtml": "<p>Cricinfo is a sports news website exclusively for the game of cricket. The site features live coverage of cricket matches containing ball-by-ball commentary and a database for all the historic matches. The site also provides news and articles about cricket.</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "16992bea-9308-4f51-9f88-534215a6e3e9"
                            },
                            "hash": "1",
                            "iteration": 1,
                            "saveVersion": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5677611220992000,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 583,
                                    "height": 340,
                                    "sizeInBytes": 28095,
                                    "name": "cricinfo.jpg"
                                },
                                "comp_id": "1bb80acd-fb54-4e67-a0b3-84844e4ebd57"
                            },
                            "hash": "2",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## System Requirements\n\nWe will focus on the following set of requirements while designing Cricinfo:\n\n1. The system should keep track of all cricket-playing teams and their matches.\n\n2. The system should show live ball-by-ball commentary of cricket matches.\n\n3. All international cricket rules should be followed.\n\n4. Any team playing a tournament will announce a squad (a set of players) for the tournament.\n\n5. For each match, both teams will announce their playing-eleven from the tournament squad.\n\n6. The system should be able to record stats about players, matches, and tournaments.\n\n7. The system should be able to answer global stats queries like, \"Who is the highest wicket taker of all time?\", \"Who has scored maximum numbers of 100s in test matches?\", etc.\n\n8. The system should keep track of all ODI, Test and T20 matches.\n\n## Use case diagram\n\nWe have two main Actors in our system:\n\n* **Admin:** An Admin will be able to add/modify players, teams, tournaments, and matches, and will also record ball-by-ball details of each match.\n* **Commentator:** Commentators will be responsible for adding ball-by-ball commentary for matches.\n\nHere are the top use cases of our system:\n\n* **Add/modify teams and players:** An Admin will add players to teams and keeps up-to-date information about them in the system.\n* **Add tournaments and matches:** Admins will add tournaments and matches in the system.\n* **Add ball:** Admins will record ball-by-ball details of a match.\n* **Add stadium, umpire, and referee:** The system will keep track of stadiums as well as of the umpires and referees managing the matches.\n* **Add/update stats:** Admins will add stats about matches and tournaments. The system will generate certain stats.\n* **Add commentary:** Add ball-by-ball commentary of matches.",
                                "mdHtml": "<h2>System Requirements</h2>\n<p>We will focus on the following set of requirements while designing Cricinfo:</p>\n<ol>\n<li>\n<p>The system should keep track of all cricket-playing teams and their matches.</p>\n</li>\n<li>\n<p>The system should show live ball-by-ball commentary of cricket matches.</p>\n</li>\n<li>\n<p>All international cricket rules should be followed.</p>\n</li>\n<li>\n<p>Any team playing a tournament will announce a squad (a set of players) for the tournament.</p>\n</li>\n<li>\n<p>For each match, both teams will announce their playing-eleven from the tournament squad.</p>\n</li>\n<li>\n<p>The system should be able to record stats about players, matches, and tournaments.</p>\n</li>\n<li>\n<p>The system should be able to answer global stats queries like, \u201cWho is the highest wicket taker of all time?\u201d, \u201cWho has scored maximum numbers of 100s in test matches?\u201d, etc.</p>\n</li>\n<li>\n<p>The system should keep track of all ODI, Test and T20 matches.</p>\n</li>\n</ol>\n<h2>Use case diagram</h2>\n<p>We have two main Actors in our system:</p>\n<ul>\n<li><strong>Admin:</strong> An Admin will be able to add/modify players, teams, tournaments, and matches, and will also record ball-by-ball details of each match.</li>\n<li><strong>Commentator:</strong> Commentators will be responsible for adding ball-by-ball commentary for matches.</li>\n</ul>\n<p>Here are the top use cases of our system:</p>\n<ul>\n<li><strong>Add/modify teams and players:</strong> An Admin will add players to teams and keeps up-to-date information about them in the system.</li>\n<li><strong>Add tournaments and matches:</strong> Admins will add tournaments and matches in the system.</li>\n<li><strong>Add ball:</strong> Admins will record ball-by-ball details of a match.</li>\n<li><strong>Add stadium, umpire, and referee:</strong> The system will keep track of stadiums as well as of the umpires and referees managing the matches.</li>\n<li><strong>Add/update stats:</strong> Admins will add stats about matches and tournaments. The system will generate certain stats.</li>\n<li><strong>Add commentary:</strong> Add ball-by-ball commentary of matches.</li>\n</ul>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "b9ccecb8-9f96-42eb-81d3-2b04cb70b9a8"
                            },
                            "hash": "3",
                            "iteration": 2,
                            "saveVersion": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5718639969828864,
                                "style": "original",
                                "caption": "Use case diagram",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 836,
                                    "height": 1044,
                                    "sizeInBytes": 38917,
                                    "name": "usecase(10).svg"
                                },
                                "comp_id": "0e74130f-67e0-46ed-8743-0acc42249499"
                            },
                            "hash": "4",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## Class diagram\n\nHere are the main classes of the Cricinfo system:\n\n* **Player:**  Keeps a record of a cricket player, their basic profile and contracts.\n\n* **Team:** This class manages cricket teams.\n\n* **Tournament:** Manages cricket tournaments and keeps track of the points table for all playing teams.\n\n* **TournamentSquad:** Each team playing a tournament will announce a set of players who will be playing the tournament. TournamentSquad will encapsulate that.\n\n* **Playing11:** Each team playing a match will select 11 players from their announced tournaments squad.\n\n* **Match:** Encapsulates all information of a cricket match. Our system will support three match types: 1) ODI, 2) T20, and 3) Test\n\n* **Innings:** Records all innings of a match.\n\n* **Over:** Records details about an Over.\n\n* **Ball:** Records every detail of a ball, such as the number of runs scored, if it was a wicket-taking ball, etc.\n\n* **Run:** Records the number and type of runs scored on a ball. The different run types are: Wide, LegBy, Four, Six, etc.\n\n* **Commentator and Commentary:** The commentator adds ball-by-ball commentary.\n\n* **Umpire and Referee:** These classes will store details about umpires and referees, respectively.\n\n* **Stat:** Our system will keep track of the stats for every player, match and tournament.\n\n* **StatQuery:** This class will encapsulate general stat queries and their answers, like \"Who has scored the maximum number of 100s in ODIs?\" or, \"Which bowler has taken the most wickets in test matches?\", etc. ",
                                "mdHtml": "<h2>Class diagram</h2>\n<p>Here are the main classes of the Cricinfo system:</p>\n<ul>\n<li>\n<p><strong>Player:</strong>  Keeps a record of a cricket player, their basic profile and contracts.</p>\n</li>\n<li>\n<p><strong>Team:</strong> This class manages cricket teams.</p>\n</li>\n<li>\n<p><strong>Tournament:</strong> Manages cricket tournaments and keeps track of the points table for all playing teams.</p>\n</li>\n<li>\n<p><strong>TournamentSquad:</strong> Each team playing a tournament will announce a set of players who will be playing the tournament. TournamentSquad will encapsulate that.</p>\n</li>\n<li>\n<p><strong>Playing11:</strong> Each team playing a match will select 11 players from their announced tournaments squad.</p>\n</li>\n<li>\n<p><strong>Match:</strong> Encapsulates all information of a cricket match. Our system will support three match types: 1) ODI, 2) T20, and 3) Test</p>\n</li>\n<li>\n<p><strong>Innings:</strong> Records all innings of a match.</p>\n</li>\n<li>\n<p><strong>Over:</strong> Records details about an Over.</p>\n</li>\n<li>\n<p><strong>Ball:</strong> Records every detail of a ball, such as the number of runs scored, if it was a wicket-taking ball, etc.</p>\n</li>\n<li>\n<p><strong>Run:</strong> Records the number and type of runs scored on a ball. The different run types are: Wide, LegBy, Four, Six, etc.</p>\n</li>\n<li>\n<p><strong>Commentator and Commentary:</strong> The commentator adds ball-by-ball commentary.</p>\n</li>\n<li>\n<p><strong>Umpire and Referee:</strong> These classes will store details about umpires and referees, respectively.</p>\n</li>\n<li>\n<p><strong>Stat:</strong> Our system will keep track of the stats for every player, match and tournament.</p>\n</li>\n<li>\n<p><strong>StatQuery:</strong> This class will encapsulate general stat queries and their answers, like \u201cWho has scored the maximum number of 100s in ODIs?\u201d or, \u201cWhich bowler has taken the most wickets in test matches?\u201d, etc.</p>\n</li>\n</ul>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "f795d992-e413-4c14-8e02-8702bb914c33"
                            },
                            "hash": "5",
                            "iteration": 2,
                            "saveVersion": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5673023396904960,
                                "style": "original",
                                "caption": "Class diagram",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 1096,
                                    "height": 1165,
                                    "sizeInBytes": 273094,
                                    "name": "Class Diagram (17).png"
                                },
                                "comp_id": "961f930e-e586-4ac9-950b-9044977e23da"
                            },
                            "hash": "6",
                            "iteration": 0
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5253326226587648,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 571,
                                    "height": 511,
                                    "sizeInBytes": 25589,
                                    "name": "uml cheat sheet (1).svg"
                                },
                                "comp_id": "ddb4ad4d-a5c2-47ba-83d4-823a77bf078c"
                            },
                            "hash": "7",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## Activity diagrams\n\n**Record a Ball of an Over:** Here are the steps to record a ball of an over in the system:",
                                "mdHtml": "<h2>Activity diagrams</h2>\n<p><strong>Record a Ball of an Over:</strong> Here are the steps to record a ball of an over in the system:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "7d026157-a3ed-44bb-a066-4cd9fd6c3c89"
                            },
                            "hash": "8",
                            "iteration": 2,
                            "saveVersion": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5192214418292736,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 393,
                                    "height": 804,
                                    "sizeInBytes": 18430,
                                    "name": "Add ball - Activity Diagram.svg"
                                },
                                "comp_id": "76955813-4d72-4eec-8bee-f7d5141763f4"
                            },
                            "hash": "9",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## Code\n\nHere is the high-level definition for the classes described above.\n\n**Enums, data types, and constants:** Here are the required enums, data types, and constants:",
                                "mdHtml": "<h2>Code</h2>\n<p>Here is the high-level definition for the classes described above.</p>\n<p><strong>Enums, data types, and constants:</strong> Here are the required enums, data types, and constants:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "db08af64-e94d-4025-b364-f449a014be48"
                            },
                            "hash": "10",
                            "iteration": 2,
                            "saveVersion": 1
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public class Address {\n  private String streetAddress;\n  private String city;\n  private String state;\n  private String zipCode;\n  private String country;\n}\n\npublic class Person {\n  private String name;\n  private Address address;\n  private String email;\n  private String phone;\n}\n\npublic enum MatchFormat {\n  ODI,\n  T20,\n  TEST\n}\n\npublic enum MatchResult {\n  LIVE,\n  FINISHED,\n  DRAWN,\n  CANCELED\n}\n\npublic enum UmpireType {\n  FIELD,\n  RESERVED,\n  TV\n}\n\npublic enum WicketType {\n  BOLD,\n  CAUGHT,\n  STUMPED,\n  RUN_OUT,\n  LBW,\n  RETIRED_HURT,\n  HIT_WICKET,\n  OBSTRUCTING\n}\n\npublic enum BallType {\n  NORMAL,\n  WIDE,\n  WICKET,\n  NO_BALL\n}\n\npublic enum RunType {\n  NORMAL,\n  FOUR,\n  SIX,\n  LEG_BYE,\n  BYE,\n  NO_BALL,\n  OVERTHROW\n}",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class Address:\n  def __init__(self, street, city, state, zip_code, country):\n    self.__street_address = street\n    self.__city = city\n    self.__state = state\n    self.__zip_code = zip_code\n    self.__country = country\n\n\nclass Person():\n  def __init__(self, name, address, email, phone):\n    self.__name = name\n    self.__address = address\n    self.__email = email\n    self.__phone = phone\n\n\nclass MatchFormat(Enum):\n  ODI, T20, TEST = 1, 2, 3\n\n\nclass MatchResult(Enum):\n  LIVE, FINISHED, DRAWN, CANCELLED = 1, 2, 3, 4\n\n\nclass UmpireType(Enum):\n  FIELD, RESERVED, TV = 1, 2, 3\n\n\nclass WicketType(Enum):\n  BOLD, CAUGHT, STUMPED, RUN_OUT, LBW, RETIRED_HURT, HIT_WICKET, OBSTRUCTING = 1, 2, 3, 4, 5, 6, 7, 8\n\n\nclass BallType(Enum):\n  NORMAL, WIDE, WICKET, NO_BALL = 1, 2, 3, 4\n\n\nclass RunType(Enum):\n  NORMAL, FOUR, SIX, LEG_BYE, BYE, NO_BALL, OVERTHROW = 1, 2, 3, 4, 5, 6, 7\n",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "b7550932-910b-440c-a157-c1034ab9b82c"
                            },
                            "hash": "18",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Admin, Player, Umpire, Referee, and Commentator:** These classes represent the different people that interact with our system:",
                                "mdHtml": "<p><strong>Admin, Player, Umpire, Referee, and Commentator:</strong> These classes represent the different people that interact with our system:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "10d4786d-2f5b-4680-ab55-e7812753227b"
                            },
                            "hash": "12",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "// For simplicity, we are not defining getter and setter functions. The reader can\n// assume that all class attributes are private and accessed through their respective\n// public getter method and modified only through their public setter method.\n\npublic class Player {\n  private Person person;\n  private ArrayList<PlayerContract> contracts;\n\n  public boolean addContract();\n}\n\npublic class Admin {\n  private Person person;\n\n  public boolean addMatch(Match match);\n\n  public boolean addTeam(Team team);\n\n  public boolean addTournament(Tournament tournament);\n}\n\npublic class Umpire {\n  private Person person;\n\n  public boolean assignMatch(Match match);\n}\n\npublic class Referee {\n  private Person person;\n\n  public boolean assignMatch(Match match);\n}\n\npublic class Commentator {\n  private Person person;\n\n  public boolean assignMatch(Match match);\n}",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "# For simplicity, we are not defining getter and setter functions. The reader can\n# assume that all class attributes are private and accessed through their respective\n# public getter methods and modified only through their public methods function.\n\nclass Player:\n  def __init__(self, person):\n    self.__person = person\n    self.__contracts = []\n\n  def add_contract(self, contract):\n    None\n\n\nclass Admin:\n  def __init__(self, person):\n    self.__person = person\n\n  def add_match(self, match):\n    None\n\n  def add_team(self, team):\n    None\n\n  def add_tournament(self, tournament):\n    None\n\n\nclass Umpire:\n  def __init__(self, person):\n    self.__person = person\n\n  def assign_match(self, match):\n    None\n\n\nclass Referee:\n  def __init__(self, person):\n    self.__person = person\n\n  def assign_match(self, match):\n    None\n\n\nclass Commentator:\n  def __init__(self, person):\n    self.__person = person\n\n  def assign_match(self, match):\n    None\n",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "d8e46bde-5695-4640-9d17-94cdb5f70875"
                            },
                            "hash": "19",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "\n**Team, TournamentSquad, and Playing11:** Team will announce a squad for a tournament, out of which, the playing 11 will be chosen:",
                                "mdHtml": "<p><strong>Team, TournamentSquad, and Playing11:</strong> Team will announce a squad for a tournament, out of which, the playing 11 will be chosen:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "2c8c4f1b-e10e-47ee-8df8-0f5fd4238f70"
                            },
                            "hash": "14",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public class Team {\n  private String name;\n  private List<Player> players;\n  private List<News> news;\n  private Coach coach;\n\n  public boolean addTournamentSquad(TournamentSquad tournamentSquad);\n  public boolean addPlayer(Player player);\n  public boolean addNews(News news);\n}\n\npublic class TournamentSquad {\n  private List<Player> players;\n  private List<TournamentStat> tournamentStats;\n\n  public boolean addPlayer(Player player);\n}\n\npublic class Playing11 {\n  private List<Player> players;\n  private Player twelfthMan;\n\n  public boolean addPlayer(Player player);\n}\n",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class Team:\n  def __init__(self, name, coach):\n    self.__name = name\n    self.__players = []\n    self.__news = []\n    self.__coach = coach\n\n  def add_tournament_squad(self, tournament_squad):\n    None\n\n  def add_player(self, player):\n    None\n\n  def add_news(self, news):\n    None\n\n\nclass TournamentSquad:\n  def __init__(self):\n    self.__players = []\n    self.__tournament_stats = []\n\n  def add_player(self, player):\n    None\n\n\nclass Playing11:\n  def __init__(self):\n    self.__players = []\n    self.__twelfth_man = None\n\n  def add_player(self, player):\n    None\n",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "67708502-d2ae-4053-96af-c36c0ce8e057"
                            },
                            "hash": "20",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "\n**Over, Ball, Wicket, Commentary, Inning, and Match:** Match will be an abstract class, extended by ODI, Test, and T20:\n",
                                "mdHtml": "<p><strong>Over, Ball, Wicket, Commentary, Inning, and Match:</strong> Match will be an abstract class, extended by ODI, Test, and T20:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "1bb0b825-aae4-4bcb-8bfc-b2384abc15c2"
                            },
                            "hash": "16",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "edit",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public class Over {\n  private int number;\n  private List<Ball> balls;\n\n  public boolean addBall(Ball ball);\n}\n\npublic class Ball {\n  private Player balledBy;\n  private Player playedBy;\n  private BallType type;\n\n  private Wicket wicket;\n  private List<Run> runs;\n  private Commentary commentary;\n\n}\n\npublic class Wicket {\n  private WicketType wicketType;\n  private Player playerOut;\n  private Player caughtBy;\n  private Player runoutBy;\n  private Player stumpedBy;\n}\n\npublic class Commentary {\n  private String text;\n  private Date createdAt;\n  private Commentator createdBy;\n}\n\npublic class Inning {\n  private int number;\n  private Date startTime;\n  private List<Over> overs;\n\n  public boolean addOver(Over over);\n}\n\npublic abstract class Match {\n  private int number;\n  private Date startTime;\n  private MatchResult result;\n\n  private Playing11[] teams;\n  private List<Inning> innings;\n  private List<Umpire> umpires;\n  private Referee referee;\n  private List<Commentator> commentators;\n  private List<MatchStat> matchStats;\n\n  public boolean assignStadium(Stadium stadium);\n\n  public boolean assignReferee(Referee referee);\n}\n\npublic class ODI extends Match {\n  //...\n}\n\npublic class Test extends Match {\n  //...\n}\n",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class Over:\n  def __init__(self, number):\n    self.__number = number\n    self.__balls = []\n\n  def add_ball(self, ball):\n    None\n\n\nclass Ball:\n  def __init__(self, balled_by, played_by, ball_type, wicket, runs, commentary):\n    self.__balled_by = balled_by\n    self.__played_by = played_by\n    self.__type = ball_type\n\n    self.__wicket = wicket\n    self.__runs = runs\n    self.__commentary = commentary\n\n\nclass Wicket:\n  def __init__(self, wicket_type, player_out, caught_by, runout_by, stumped_by):\n    self.__wicket_type = wicket_type\n    self.__player_out = player_out\n    self.__caught_by = caught_by\n    self.__runout_by = runout_by\n    self.__stumped_by = stumped_by\n\n\nclass Commentary:\n  def __init__(self, text, commentator):\n    self.__text = text\n    self.__created_at = datetime.date.today()\n    self.__created_by = commentator\n\n\nclass Inning:\n  def __init__(self, number, start_time):\n    self.__number = number\n    self.__start_time = start_time\n    self.__overs = []\n\n  def add_over(self, over):\n    None\n\n\n# from abc import ABC, abstractmethod\nclass Match(ABC):\n  def __init__(self, number, start_time, referee):\n    self.__number = number\n    self.__start_time = start_time\n    self.__result = MatchResult.LIVE\n\n    self.__teams = []\n    self.__innings = []\n    self.__umpires = []\n    self.__referee = referee\n    self.__commentators = []\n    self.__match_stats = []\n\n  def assign_stadium(self, stadium):\n    None\n\n  def assign_referee(self, referee):\n    None\n\n\nclass ODI(Match):\n# ...\n\n\nclass Test(Match):\n# ...\n",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "ac89b804-dc5b-451c-a312-7aec651abcc8"
                            },
                            "hash": "21",
                            "iteration": 1
                        }
                    ],
                    "summary": {
                        "title": "Design Cricinfo",
                        "description": "Let's design Cricinfo."
                    }
                },
                {
                    "components": [
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "Facebook is an online social networking service where users can connect with other users to post and read messages. Users access Facebook through their website interface or mobile apps.",
                                "mdHtml": "<p>Facebook is an online social networking service where users can connect with other users to post and read messages. Users access Facebook through their website interface or mobile apps.</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "46a86e63-7a6c-4b31-a8be-bab9a97e2322"
                            },
                            "hash": "1",
                            "iteration": 1,
                            "saveVersion": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5657751292215296,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 531,
                                    "height": 353,
                                    "sizeInBytes": 58329,
                                    "name": "facebook.png"
                                },
                                "comp_id": "339dbe8f-4aae-4bb7-b886-a730e8e189dd"
                            },
                            "hash": "2",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## System Requirements\n\nWe will focus on the following set of requirements while designing Facebook:\n\n1. Each member should be able to add information about their basic profile, work experience, education, etc.\n\n2. Any user of our system should be able to search other members, groups or pages by their name.\n\n3. Members should be able to send and accept/reject friend requests from other members.\n\n4. Members should be able to follow other members without becoming their friend.\n\n5. Members should be able to create groups and pages, as well as join already created groups, and follow pages.\n\n6. Members should be able to create new posts to share with their friends.\n\n7. Members should be able to add comments to posts, as well as like or share a post or comment.\n\n8. Members should be able to create privacy lists containing their friends. Members can link any post with a privacy list to make the post visible only to the members of that list.\n\n9. Any member should be able to send messages to other members.\n\n10. Any member should be able to add a recommendation for any page.\n\n11. The system should send a notification to a member whenever there is a new message or friend request or comment on their post.\n\n12. Members should be able to search through posts for a word.\n\n**Extended Requirement:** Write a function to find a connection suggestion for a member.\n\n## Use case diagram\n\nWe have three main Actors in our system:\n\n* **Member:** All members can search for other members, groups, pages, or posts, as well as send friend requests, create posts, etc.\n* **Admin:** Mainly responsible for admin functions like blocking and unblocking a member, etc.\n* **System:** Mainly responsible for sending notifications for new messages, friend requests, etc.\n\nHere are the top use cases of our system:\n\n* **Add/update profile:** Any member should be able to create their profile to reflect their work experiences, education, etc.\n* **Search:** Members can search for other members, groups or pages. Members can send a friend request to other members.\n* **Follow or Unfollow a member or a page:** Any member can follow or unfollow any other member or page.\n* **Send message** Any member can send a message to any of their friends.\n* **Create post** Any member can create a post to share with their friends, as well as like or add comments to any post visible to them.\n* **Send notification** The system will be able to send notifications for new messages, friend requests, etc.",
                                "mdHtml": "<h2>System Requirements</h2>\n<p>We will focus on the following set of requirements while designing Facebook:</p>\n<ol>\n<li>\n<p>Each member should be able to add information about their basic profile, work experience, education, etc.</p>\n</li>\n<li>\n<p>Any user of our system should be able to search other members, groups or pages by their name.</p>\n</li>\n<li>\n<p>Members should be able to send and accept/reject friend requests from other members.</p>\n</li>\n<li>\n<p>Members should be able to follow other members without becoming their friend.</p>\n</li>\n<li>\n<p>Members should be able to create groups and pages, as well as join already created groups, and follow pages.</p>\n</li>\n<li>\n<p>Members should be able to create new posts to share with their friends.</p>\n</li>\n<li>\n<p>Members should be able to add comments to posts, as well as like or share a post or comment.</p>\n</li>\n<li>\n<p>Members should be able to create privacy lists containing their friends. Members can link any post with a privacy list to make the post visible only to the members of that list.</p>\n</li>\n<li>\n<p>Any member should be able to send messages to other members.</p>\n</li>\n<li>\n<p>Any member should be able to add a recommendation for any page.</p>\n</li>\n<li>\n<p>The system should send a notification to a member whenever there is a new message or friend request or comment on their post.</p>\n</li>\n<li>\n<p>Members should be able to search through posts for a word.</p>\n</li>\n</ol>\n<p><strong>Extended Requirement:</strong> Write a function to find a connection suggestion for a member.</p>\n<h2>Use case diagram</h2>\n<p>We have three main Actors in our system:</p>\n<ul>\n<li><strong>Member:</strong> All members can search for other members, groups, pages, or posts, as well as send friend requests, create posts, etc.</li>\n<li><strong>Admin:</strong> Mainly responsible for admin functions like blocking and unblocking a member, etc.</li>\n<li><strong>System:</strong> Mainly responsible for sending notifications for new messages, friend requests, etc.</li>\n</ul>\n<p>Here are the top use cases of our system:</p>\n<ul>\n<li><strong>Add/update profile:</strong> Any member should be able to create their profile to reflect their work experiences, education, etc.</li>\n<li><strong>Search:</strong> Members can search for other members, groups or pages. Members can send a friend request to other members.</li>\n<li><strong>Follow or Unfollow a member or a page:</strong> Any member can follow or unfollow any other member or page.</li>\n<li><strong>Send message</strong> Any member can send a message to any of their friends.</li>\n<li><strong>Create post</strong> Any member can create a post to share with their friends, as well as like or add comments to any post visible to them.</li>\n<li><strong>Send notification</strong> The system will be able to send notifications for new messages, friend requests, etc.</li>\n</ul>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "12dde35e-62f9-43fd-a943-b0927ffd610c"
                            },
                            "hash": "3",
                            "iteration": 2,
                            "saveVersion": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5673053186949120,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 834,
                                    "height": 1044,
                                    "sizeInBytes": 46662,
                                    "name": "usecase(9).svg"
                                },
                                "comp_id": "c2e83285-7b72-4d98-9e87-c8ec41509244"
                            },
                            "hash": "4",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## Class diagram\n\nHere are the main classes of the Facebook system:\n\n* **Member:**  This will be the main component of our system. Each member will have a profile which includes their Work Experiences, Education, etc. Members will be connected to other members and they can follow other members and pages. Members will also have suggestions to send friend requests to other members.\n\n* **Search:** Our system will support searching for other members, groups and pages by their names, and through posts for any word.\n\n* **Message:** Members can send messages to other members with text, photos, and videos.\n\n* **Post:** Members can create posts containing text and media, as well as like and share a post.\n\n* **Comment:** Members can add comments to posts as well as like any comment.\n\n* **Group:** Members can create and join groups.\n\n* **PrivacyList:** Members can create privacy lists containing their friends. Members can link any post with a privacy list, to make the post visible only to the members of that list.\n\n* **Page:** Members can create pages that other members can follow, and share messages there.\n\n* **Notification:** This class will take care of sending notifications to members. The system will be able to send a push notification or an email.",
                                "mdHtml": "<h2>Class diagram</h2>\n<p>Here are the main classes of the Facebook system:</p>\n<ul>\n<li>\n<p><strong>Member:</strong>  This will be the main component of our system. Each member will have a profile which includes their Work Experiences, Education, etc. Members will be connected to other members and they can follow other members and pages. Members will also have suggestions to send friend requests to other members.</p>\n</li>\n<li>\n<p><strong>Search:</strong> Our system will support searching for other members, groups and pages by their names, and through posts for any word.</p>\n</li>\n<li>\n<p><strong>Message:</strong> Members can send messages to other members with text, photos, and videos.</p>\n</li>\n<li>\n<p><strong>Post:</strong> Members can create posts containing text and media, as well as like and share a post.</p>\n</li>\n<li>\n<p><strong>Comment:</strong> Members can add comments to posts as well as like any comment.</p>\n</li>\n<li>\n<p><strong>Group:</strong> Members can create and join groups.</p>\n</li>\n<li>\n<p><strong>PrivacyList:</strong> Members can create privacy lists containing their friends. Members can link any post with a privacy list, to make the post visible only to the members of that list.</p>\n</li>\n<li>\n<p><strong>Page:</strong> Members can create pages that other members can follow, and share messages there.</p>\n</li>\n<li>\n<p><strong>Notification:</strong> This class will take care of sending notifications to members. The system will be able to send a push notification or an email.</p>\n</li>\n</ul>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "613c5f89-b4c5-4466-a60b-ce7977a22db1"
                            },
                            "hash": "5",
                            "iteration": 2,
                            "saveVersion": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 6328445271277568,
                                "style": "original",
                                "caption": "Class diagram",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 1184,
                                    "height": 1070,
                                    "sizeInBytes": 273560,
                                    "name": "Class Diagram (18).png"
                                },
                                "comp_id": "6e316ca6-45a2-4ce1-820a-88f2f424b726"
                            },
                            "hash": "6",
                            "iteration": 0
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5312567952015360,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 571,
                                    "height": 511,
                                    "sizeInBytes": 25589,
                                    "name": "uml cheat sheet (1).svg"
                                },
                                "comp_id": "43adc6ad-d12c-4ef2-a623-d2dd8738ec1f"
                            },
                            "hash": "7",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## Activity diagrams\n\n**Add work experience to profile:** Any Facebook member can perform this activity. Here are the steps to add work experience to a member's profile:",
                                "mdHtml": "<h2>Activity diagrams</h2>\n<p><strong>Add work experience to profile:</strong> Any Facebook member can perform this activity. Here are the steps to add work experience to a member\u2019s profile:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "37981598-17b1-4d17-9720-7efcf2ad32aa"
                            },
                            "hash": "8",
                            "iteration": 2,
                            "saveVersion": 1
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5640941595525120,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 380,
                                    "height": 804,
                                    "sizeInBytes": 14996,
                                    "name": "Add experience - Activity Diagram(2).svg"
                                },
                                "comp_id": "eec2f8a4-6ad6-44dd-99c5-17d4f9b97772"
                            },
                            "hash": "9",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Create a new post:** Any Member can perform this activity. Here are the steps for creating a post:",
                                "mdHtml": "<p><strong>Create a new post:</strong> Any Member can perform this activity. Here are the steps for creating a post:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "19a89c78-7751-4de7-a519-e321fec4f230"
                            },
                            "hash": "10",
                            "iteration": 0
                        },
                        {
                            "type": "Image",
                            "mode": "view",
                            "content": {
                                "image_id": 5114140502786048,
                                "style": "original",
                                "caption": "",
                                "borderColor": "#ccc",
                                "hasBorder": false,
                                "metadata": {
                                    "width": 513,
                                    "height": 999,
                                    "sizeInBytes": 24208,
                                    "name": "Make post - Activity Diagram.svg"
                                },
                                "comp_id": "a07ed539-f1ec-4e20-8158-7ea9604a93be"
                            },
                            "hash": "11",
                            "iteration": 0
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "## Code\n\nHere is the high-level definition for the classes described above.\n\n**Enums, data types, and constants:** Here are the required enums, data types, and constants:",
                                "mdHtml": "<h2>Code</h2>\n<p>Here is the high-level definition for the classes described above.</p>\n<p><strong>Enums, data types, and constants:</strong> Here are the required enums, data types, and constants:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "cb67d9fb-4a6b-49b9-aabf-139c8b26cc12"
                            },
                            "hash": "12",
                            "iteration": 2,
                            "saveVersion": 1
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public enum ConnectionInvitationStatus{\n  PENDING,\n  ACCEPTED,\n  REJECTED,\n  CANCELED\n}\n\npublic enum AccountStatus{\n  ACTIVE,\n  CLOSED,\n  CANCELED,\n  BLACKLISTED,\n  DISABLED\n}\n\npublic class Address {\n  private String streetAddress;\n  private String city;\n  private String state;\n  private String zipCode;\n  private String country;\n}",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class ConnectionInvitationStatus(Enum):\n  PENDING, ACCEPTED, REJECTED, CANCELED = 1, 2, 3, 4\n\n\nclass AccountStatus(Enum):\n  ACTIVE, CLOSED, CANCELED, BLACKLISTED, DISABLED = 1, 2, 3, 4, 5\n\n\nclass Address:\n  def __init__(self, street, city, state, zip_code, country):\n    self.__street_address = street\n    self.__city = city\n    self.__state = state\n    self.__zip_code = zip_code\n    self.__country = country\n",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "5097e0dc-a74f-4e72-b0c5-a766b29f76a8"
                            },
                            "hash": "13",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Account, Person, Member, and Admin:** These classes represent the different people that interact with our system:",
                                "mdHtml": "<p><strong>Account, Person, Member, and Admin:</strong> These classes represent the different people that interact with our system:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "7725c195-647e-4ca7-9a3b-5bc70fa81d43"
                            },
                            "hash": "14",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "// For simplicity, we are not defining getter and setter functions. The reader can\n// assume that all class attributes are private and accessed through their respective\n// public getter method and modified only through their public setter method.\n\npublic class Account {\n  private String id;\n  private String password;\n  private AccountStatus status;\n\n  public boolean resetPassword();\n}\n\npublic abstract class Person {\n  private String name;\n  private Address address;\n  private String email;\n  private String phone;\n\n  private Account account;\n}\n\npublic class Member extends Person {\n  private Integer memberId;\n  private Date dateOfMembership;\n  private String name;\n\n  private Profile profile;\n  private HashSet<Integer> memberFollows;\n  private HashSet<Integer> memberConnections;\n  private HashSet<Integer> pageFollows;\n  private HashSet<Integer> memberSuggestions;\n  private HashSet<ConnectionInvitation> connectionInvitations;\n  private HashSet<Integer> groupFollows;\n\n  public boolean sendMessage(Message message);\n  public boolean createPost(Post post);\n  public boolean sendConnectionInvitation(ConnectionInvitation invitation);\n  private Map<Integer, Integer> searchMemberSuggestions();\n}\n\npublic class Admin extends Person {\n  public boolean blockUser(Customer customer);\n  public boolean unblockUser(Customer customer);\n  public boolean enablePage(Page page);\n  public boolean disablePage(Page page);\n}\n\npublic class ConnectionInvitation {\n  private Member memberInvited;\n  private ConnectionInvitationStatus status;\n  private Date dateCreated;\n  private Date dateUpdated;\n\n  public bool acceptConnection();\n  public bool rejectConnection();\n}",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "# For simplicity, we are not defining getter and setter functions. The reader can\n# assume that all class attributes are private and accessed through their respective\n# public getter methods and modified only through their public methods function.\n\nclass Account:\n  def __init__(self, id, password, status=AccountStatus.Active):\n    self.__id = id\n    self.__password = password\n    self.__status = status\n\n  def reset_password(self):\n    None\n\n\n# from abc import ABC, abstractmethod\nclass Person(ABC):\n  def __init__(self, name, address, email, phone, account):\n    self.__name = name\n    self.__address = address\n    self.__email = email\n    self.__phone = phone\n    self.__account = account\n\n\nclass Member(Person):\n  def __init__(self, id, date_of_membership, name):\n    self.__member_id = id\n    self.__date_of_membership = date_of_membership\n    self.__name = name\n\n    self.__profile = Profile()\n    self.__member_follows = []\n    self.__member_connections = []\n    self.__page_follows = []\n    self.__member_suggestions = []\n    self.__connection_invitations = []\n    self.__group_follows = []\n\n  def send_message(self, message):\n    None\n\n  def create_post(self, post):\n    None\n\n  def send_connection_invitation(self, invitation):\n    None\n\n  def search_member_suggestions(self):\n    None\n\n\nclass Admin(Person):\n  def block_user(self, customer):\n    None\n\n  def unblock_user(self, customer):\n    None\n\n  def enable_page(self, page):\n    None\n\n  def disable_page(self, page):\n    None\n\n\nclass ConnectionInvitation:\n  def __init__(self, member_invited, name, status=ConnectionInvitationStatus.PENDING):\n    self.__member_invited = member_invited\n    self.__status = status\n    self.__date_created = datetime.date.today()\n    self.__date_updated = datetime.date.today()\n\n  def accept_connection(self):\n    None\n\n  def reject_connection(self):\n    None",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "a967f848-0297-45de-85fb-fc4db3896862"
                            },
                            "hash": "15",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "\n**Profile and Work:** A member's profile will have their work experiences, educations, places, etc:",
                                "mdHtml": "<p><strong>Profile and Work:</strong> A member\u2019s profile will have their work experiences, educations, places, etc:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "de43aebd-305e-460a-83af-4e71d38b2e2d"
                            },
                            "hash": "16",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public class Profile {\n  private byte[] profilePicture;\n  private byte[] coverPhoto;\n  private String gender;\n\n  private List<Work> workExperiences;\n  private List<Education> educations;\n  private List<Place> places;\n  private List<Stat> stats;\n\n  public boolean addWorkExperience(Work work);\n  public boolean addEducation(Education education);\n  public boolean addPlace(Place place);\n}\n\npublic class Work {\n  private String title;\n  private String company;\n  private String location;\n  private Date from;\n  private Date to;\n  private String description;\n}\n",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class Profile:\n  def __init__(self, profile_picture, cover_photo, gender):\n    self.__profile_picture = profile_picture\n    self.__cover_photo = cover_photo\n    self.__gender = gender\n\n    self.__work_experiences = []\n    self.__educations = []\n    self.__places = []\n    self.__stats = []\n\n  def add_work_experience(self, work):\n    None\n\n  def add_education(self, education):\n    None\n\n  def add_place(self, place):\n    None\n\n\nclass Work:\n  def __init__(self, title, company, location, date_from, date_to, description):\n    self.__title = title\n    self.__company = company\n    self.__location = location\n    self.__from = date_from\n    self.__to = date_to\n    self.__description = description\n",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "407ad176-9665-4fee-86c9-32bdb10712bc"
                            },
                            "hash": "17",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "\n**Page and Recommendation:** Each page can have multiple recommendations, and members will follow/like pages:\n",
                                "mdHtml": "<p><strong>Page and Recommendation:</strong> Each page can have multiple recommendations, and members will follow/like pages:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "842b4d0e-249c-4c76-b262-77770c92071a"
                            },
                            "hash": "18",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public class Page {\n  private Integer pageId;\n  private String name;\n  private String description;\n  private String type;\n  private int totalMembers;\n  private List<Recommendation> recommendation;\n\n  private List<Recommendation> getRecommendation();\n}\n\npublic class Recommendation {\n  private Integer recommendationId;\n  private int rating;\n  private String description;\n  private Date createdAt;\n}",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class Page:\n  def __init__(self, id, name, description, type, total_members):\n    self.__page_id = id\n    self.__name = name\n    self.__description = description\n    self.__type = type\n    self.__total_members = total_members\n    self.__recommendation = []\n\n  def get_recommendation(self):\n    return self.__recommendation\n\n\nclass Recommendation:\n  def __init__(self, id, rating, description):\n    self.__recommendation_id = id\n    self.__rating = rating\n    self.__description = description\n    self.__created_at = datetime.date.today()",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "727b5c14-e3e6-4dda-bd23-da4e6fcb664a"
                            },
                            "hash": "19",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "\n**Group, Post, Message, and Comment:** Members can create posts, comment on posts, send messages and join groups:",
                                "mdHtml": "<p><strong>Group, Post, Message, and Comment:</strong> Members can create posts, comment on posts, send messages and join groups:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "6cff673f-c51b-44e9-a032-3dc58bafe0ef"
                            },
                            "hash": "20",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public class Group {\n  private Integer groupId;\n  private String name;\n  private String description;\n  private int totalMembers;\n  private List<Member> members;\n\n  public boolean addMember(Member member);\n  public boolean updateDescription(String description);\n}\n\npublic class Post {\n  private Integer postId;\n  private String text;\n  private int totalLikes;\n  private int totalShares;\n  private Member owner;\n}\n\npublic class Message {\n  private Integer messageId;\n  private Member[] sentTo;\n  private String messageBody;\n  private byte[] media;\n\n  public boolean addMember(Member member);\n}\n\npublic class Comment {\n  private Integer commentId;\n  private String text;\n  private int totalLikes;\n  private Member owner;\n}\n",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "class Group:\n  def __init__(self, id, name, description, total_members):\n    self.__group_id = id\n    self.__name = name\n    self.__description = description\n    self.__total_members = total_members\n    self.__members = []\n\n  def add_member(self, member):\n    None\n\n  def update_description(self, description):\n    None\n\n\nclass Post:\n  def __init__(self, id, text, total_likes, total_shares, owner):\n    self.__post_id = id\n    self.__text = text\n    self.__total_likes = total_likes\n    self.__total_shares = total_shares\n    self.__owner = owner\n\n\nclass Message:\n  def __init__(self, id, sent_to, body, media):\n    self.__message_id = id\n    self.__sent_to = sent_to\n    self.__message_body = body\n    self.__media = media\n\n  def add_member(self, member):\n    None\n\n\nclass Comment:\n  def __init__(self, id, text, total_likes, owner):\n    self.__comment_id = id\n    self.__text = text\n    self.__total_likes = total_likes\n    self.__owner = owner\n",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "3407cbc9-d9b2-457b-a9df-798fdfc2e54f"
                            },
                            "hash": "21",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "view",
                            "content": {
                                "version": "2.0",
                                "text": "**Search interface and SearchIndex:** SearchIndex will implement Search to facilitate searching of members, groups, pages, and posts:",
                                "mdHtml": "<p><strong>Search interface and SearchIndex:</strong> SearchIndex will implement Search to facilitate searching of members, groups, pages, and posts:</p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "42a72a91-1cfa-4130-8467-fd3eaa02f9a7"
                            },
                            "hash": "22",
                            "iteration": 0
                        },
                        {
                            "type": "TabbedCode",
                            "mode": "view",
                            "content": {
                                "version": "5.0",
                                "caption": "",
                                "codeContents": [
                                    {
                                        "solutionContent": "\n\n\n",
                                        "judgeContent": null,
                                        "hiddenCodeContent": {
                                            "prependCode": "\n\n",
                                            "appendCode": "\n\n",
                                            "codeSelection": "prependCode"
                                        },
                                        "enableStdin": false,
                                        "caption": "",
                                        "theme": "default",
                                        "evaluateWithoutExecution": false,
                                        "judgeContentPrepend": "",
                                        "allowDownload": false,
                                        "evaluateLanguage": "java",
                                        "judgeHints": null,
                                        "showSolution": false,
                                        "selectedIndex": 0,
                                        "judge": false,
                                        "treatOutputAsHTML": false,
                                        "version": "2.0",
                                        "title": "Java",
                                        "language": "java",
                                        "content": "public interface Search {\n  public List<Member> searchMember(String name);\n  public List<Group> searchGroup(String name);\n  public List<Page> searchPage(String name);\n  public List<Post> searchPost(String word);\n}\n\npublic class SearchIndex implements Search {\n   HashMap<String, List<Member>> memberNames;\n   HashMap<String, List<Group>> groupNames;\n   HashMap<String, List<Page>> pageTitles;\n   HashMap<String, List<Post>> posts;\n\n   public boolean addMember(Member member) {\n     if(memberNames.containsKey(member.getName())) {\n       memberNames.get(member.getName()).add(member);\n     } else {\n       memberNames.put(member.getName(), member);\n     }\n   }\n\n   public boolean addGroup(Group group);\n   public boolean addPage(Page page);\n   public boolean addPost(Post post);\n\n  public List<Member> searchMember(String name) {\n    return memberNames.get(name);\n  }\n\n  public List<Group> searchGroup(String name) {\n    return groupNames.get(name);\n  }\n\n  public List<Page> searchPage(String name) {\n    return pageTitles.get(name);\n  }\n\n  public List<Post> searchPost(String word) {\n    return posts.get(word);\n  }\n}",
                                        "entryFileName": "main.java",
                                        "enableHiddenCode": false,
                                        "runnable": false,
                                        "key": 0
                                    },
                                    {
                                        "caption": "",
                                        "theme": "default",
                                        "timeLimit": 30,
                                        "evaluateLanguage": "python",
                                        "additionalContent": [],
                                        "version": "2.0",
                                        "title": "Python",
                                        "language": "python",
                                        "content": "from abc import ABC, abstractmethod\n\nclass Search(ABC):\n  def search_member(self, name):\n    None\n\n  def search_group(self, name):\n    None\n\n  def search_page(self, name):\n    None\n\n  def search_post(self, word):\n    None\n\n\nclass SearchIndex(Search):\n  def __init__(self):\n    self.__member_names = {}\n    self.__group_names = {}\n    self.__page_titles = {}\n    self.__posts = {}\n\n  def add_member(self, member):\n    if member.get_name() in self.__member_names:\n      self.__member_names.get(member.get_name()).add(member)\n    else:\n      self.__member_names[member.get_name()] = member\n\n  def add_group(self, group):\n    None\n\n  def add_page(self, page):\n    None\n\n  def add_post(self, post):\n    None\n\n  def search_member(self, name):\n    return self.__member_names.get(name)\n\n  def search_group(self, name):\n    return self.__group_names.get(name)\n\n  def search_page(self, name):\n    return self.__page_titles.get(name)\n\n  def search_post(self, word):\n    return self.__posts.get(word)",
                                        "entryFileName": "main.py",
                                        "key": 1
                                    }
                                ],
                                "comp_id": "87781fc2-1c40-4323-83d7-96b52fe5232d"
                            },
                            "hash": "23",
                            "iteration": 1
                        },
                        {
                            "type": "MarkdownEditor",
                            "mode": "edit",
                            "content": {
                                "version": "2.0",
                                "text": "## Extended requirement\nHere is the code for finding connection suggestions for a member. \n\nThere can be many strategies to search for connection suggestions; we will do a two-level deep breadth-first search to find people who have the most connections with each other. These people could be good candidates for a connection suggestion, here is the sample Java code:",
                                "mdHtml": "<h2>Extended requirement</h2>\n<p>Here is the code for finding connection suggestions for a member.</p>\n<p>There can be many strategies to search for connection suggestions; we will do a two-level deep breadth-first search to find people who have the most connections with each other. These people could be good candidates for a connection suggestion, here is the sample Java code:</p>\n",
                                "cursorPosition": 23,
                                "comp_id": "0f890d07-cb04-4aa6-8b86-dbff7f69b1c4"
                            },
                            "hash": "24",
                            "iteration": 1,
                            "saveVersion": 1
                        },
                        {
                            "type": "Code",
                            "mode": "view",
                            "content": {
                                "solutionContent": "\n\n\n",
                                "docker": {
                                    "envs": [],
                                    "jobs": [],
                                    "version": 3,
                                    "container": {
                                        "imageName": "",
                                        "file": {},
                                        "buildStatusUrl": "",
                                        "liveInstance": {},
                                        "track": false
                                    },
                                    "userVariables": []
                                },
                                "judgeContent": null,
                                "hiddenCodeContent": {
                                    "prependCode": "\n\n",
                                    "appendCode": "\n\n",
                                    "codeSelection": "prependCode"
                                },
                                "enableStdin": false,
                                "caption": "",
                                "theme": "default",
                                "evaluateWithoutExecution": false,
                                "comp_id": "f5193445-92dc-4933-afcc-d183cbaa855c",
                                "judgeContentPrepend": "\n\n\n",
                                "allowDownload": false,
                                "evaluateLanguage": "java",
                                "additionalContent": [],
                                "judgeHints": null,
                                "showSolution": false,
                                "selectedIndex": 0,
                                "judge": false,
                                "treatOutputAsHTML": false,
                                "version": "7.0",
                                "title": "",
                                "language": "java",
                                "content": "import java.util.HashSet;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\nimport java.util.stream.Collectors;\nimport static java.util.Collections.reverseOrder;\n\npublic class Member extends Person {\n  private Integer memberId;\n  private Date dateOfMembership;\n  private String name;\n\n  private Profile profile;\n  private HashSet<Integer> memberFollows;\n  private HashSet<Integer> memberConnections;\n  private HashSet<Integer> pageFollows;\n  private HashSet<Integer> memberSuggestions;\n  private HashSet<ConnectionInvitation> connectionInvitations;\n  private HashSet<Integer> groupFollows;\n\n  public boolean sendMessage(Message message);\n  public boolean createPost(Post post);\n  public boolean sendConnectionInvitation(ConnectionInvitation invitation);\n\n  private Map<Integer, Integer> searchMemberSuggestions() {\n    Map<Integer, Integer> suggestions = new HashMap<>();\n    for(Integer memberId : this.memberConnections) {\n      HashSet<Integer> firstLevelConnections = new Member(memberId).getMemberConnections());\n      for(Integer firstLevelConnectionId : firstLevelConnections) {\n        this.findMemberSuggestion(suggestions, firstLevelConnectionId);\n        HashSet<Integer> secondLevelConnections = new Member(firstLevelConnectionId).getMemberConnections());\n        for(Integer secondLevelConnectionId : secondLevelConnections) {\n          this.findMemberSuggestion(suggestions, secondLevelConnectionId);\n        }\n      }\n\t  }\n\n    // sort by value (increasing count), i.e., by highest number of mutual connection count\n    Map<Integer, Integer> result = new LinkedHashMap<>();\n    suggestions.entrySet().stream()\n        .sorted(reverseOrder(Map.Entry.comparingByValue()))\n        .forEachOrdered(x -> result.put(x.getKey(), x.getValue()));\n\n    return result;\n  }\n\n  private void findMemberSuggestion(Map<Integer, Integer> suggestions, Integer connectionId) {\n    // return if the proposed suggestion is already a connection or if there is a\n    // pending connection invitation\n    if(this.memberConnections.contains(connectionId) ||\n        this.connectionInvitations.contains(connectionId)) {\n      return;\n    }\n\n    int count = suggestions.containsKey(connectionId) ? suggestions.get(connectionId) : 0;\n    suggestions.put(connectionId, count + 1);\n  }\n}",
                                "entryFileName": "main.java",
                                "enableHiddenCode": false,
                                "dockerJob": {
                                    "key": ""
                                },
                                "runnable": false
                            },
                            "hash": "25",
                            "iteration": 1
                        }
                    ],
                    "summary": {
                        "title": "Design Facebook - a social network"
                    }
                }
            ]
        },
        {
            "title": "Appendix",
            "pages": [
                {
                    "components": [
                        {
                            "type": "MarkdownEditor",
                            "mode": "edit",
                            "content": {
                                "version": "2.0",
                                "text": "We can be reached at hello@designgurus.org\n\nFor feedback, comments, and suggestions, please contact us at ood@designgurus.org",
                                "mdHtml": "<p>We can be reached at <a href=\"mailto:hello@designgurus.org\">hello@designgurus.org</a></p>\n<p>For feedback, comments, and suggestions, please contact us at <a href=\"mailto:ood@designgurus.org\">ood@designgurus.org</a></p>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "c2f1e64f-f176-4914-a066-9949657c66bf"
                            },
                            "hash": "1",
                            "iteration": 1
                        }
                    ],
                    "summary": {
                        "title": "Feedback"
                    },
                    "pageProperties": {}
                },
                {
                    "components": [
                        {
                            "type": "MarkdownEditor",
                            "mode": "edit",
                            "content": {
                                "version": "2.0",
                                "text": "Here are a few of other courses prepared by Design Gurus:\n\n* [Grokking the Coding Interview](https://www.educative.io/courses/grokking-the-coding-interview?aff=VOY6)\n* [Grokking the System Design Interview](https://www.educative.io/courses/grokking-the-system-design-interview?aff=VOY6)\n* [Grokking the Advanced System Design Interview](https://www.educative.io/courses/grokking-adv-system-design-intvw?aff=VOY6)\n* [Grokking Dynamic Programming Patterns for Coding Interviews](https://www.educative.io/courses/grokking-dynamic-programming-patterns-for-coding-interviews?aff=VOY6)\n",
                                "mdHtml": "<p>Here are a few of other courses prepared by Design Gurus:</p>\n<ul>\n<li><a href=\"https://www.educative.io/courses/grokking-the-coding-interview?aff=VOY6\">Grokking the Coding Interview</a></li>\n<li><a href=\"https://www.educative.io/courses/grokking-the-system-design-interview?aff=VOY6\">Grokking the System Design Interview</a></li>\n<li><a href=\"https://www.educative.io/courses/grokking-adv-system-design-intvw?aff=VOY6\">Grokking the Advanced System Design Interview</a></li>\n<li><a href=\"https://www.educative.io/courses/grokking-dynamic-programming-patterns-for-coding-interviews?aff=VOY6\">Grokking Dynamic Programming Patterns for Coding Interviews</a></li>\n</ul>\n",
                                "cursorPosition": {
                                    "line": 0,
                                    "ch": 0
                                },
                                "comp_id": "fecce3f4-08d2-415f-9e68-92d6835ddd36"
                            },
                            "hash": "1",
                            "iteration": 2,
                            "saveVersion": 4
                        }
                    ],
                    "summary": {
                        "titleUpdated": true,
                        "title": "Other Courses"
                    }
                }
            ]
        }
    ]
}